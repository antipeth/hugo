<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>计算机网络 on 春风少年兄</title>
    <link>https://blog.0pt.im/zh/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</link>
    <description>Recent content in 计算机网络 on 春风少年兄</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 07 Aug 2023 18:17:28 +0800</lastBuildDate>
    <atom:link href="https://blog.0pt.im/zh/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>从零开始的计算机网络6-7</title>
      <link>https://blog.0pt.im/learn/1-6-7/</link>
      <pubDate>Mon, 07 Aug 2023 18:17:28 +0800</pubDate>
      <guid>https://blog.0pt.im/learn/1-6-7/</guid>
      <description>万维网WWW 万维网WWW（World Wide Web）并非某种特殊的计算机网络。它是一个大规模的、联机式的信息储藏所,是运行在因特网上的一个分布式应用。&#xA;万维网利用网页之间的超链接将不同网站的网页链接成一张逻辑上的信息网。&#xA;万维网是欧洲粒子物理实验室的Tim Berners-Lee最初于1989年3月提出的。&#xA;1993年2月，第一个图形界面的浏览器Mosaic&#xA;1995年著名的Netscape Navigator浏览器上市。&#xA;目前比较流行的浏览器如下:（后面是浏览器内核）&#xA;Chrome Blink&#xA;Firefox Gecko&#xA;Safari WebKit&#xA;Opera Blink&#xA;lnternet Explorer Trident&#xA;浏览器最重要的部分是渲染引擎，也就是浏览器内核。负责对网页内容进行解析和显示。&#xA;不同的浏览器内核对网页内容的解析也有不同，因此同一网页在不同内核的浏览器里的显示效果可能不同;&#xA;网页编写者需要在不同内核的浏览器中测试网页显示效果。&#xA;为了方便地访问在世界范围的文档，万维网使用统一资源定位符URL来指明因特网上任何种类“资源”的位置。URL的一般形式由以下四个部分组成:&#xA;&amp;lt;协议&amp;gt;://&amp;lt;主机&amp;gt;:&amp;lt;端口&amp;gt;/&amp;lt;路径&amp;gt;&#xA;万维网的文档&#xA;HTML 超文本标记语言HTML(HyperText Markup Language)，使用多种“标签”来描述网页的结构和内容&#xA;CSS 层叠样式表CSS(Cascading Style Sheets)，从审美的角度来描述网页的样式&#xA;JavaScript 一种脚本语言(和Java没有任何关系)，控制网页的行为&#xA;超文本传输协议HTTP(HyperText Transfer Protocol)&#xA;HTTP定义了浏览器（即万维网客户进程）怎样向万维网服务器请求万维网文档，以及万维网服务器怎样把万维网文档传送给浏览器。&#xA;HTTP/1.0采用非持续连接方式。在该方式下，每次浏览器要请求一个文件都要与服务器建立TCP连接,当收到响应后就立即关闭连接。&#xA;每请求一个文档就要有两倍的RTT的开销。若一个网贝上有很多引用对家（例如图/守)，B求每一个对象都需要花费2RTT的时间。&#xA;为了减小时延，浏览器通常会建立多个并行的TCP连接同时请求多个对象。但是，这会大量占用万维网服务器的资源，特别是万维网服务器往往要同时服务于大量客户的请求，这会使其负担很重。&#xA;HTTP/1.1采用持续连接方式。在该方式下，万维网服务器在发送响应后仍然保持这条连接，使同一个&#xA;客户(浏览器）和该服务器可以继续在区条连孩上传达石续i人IIr阴水报THW队人。-I于传送同一个页面上引用的对象，而是只要这些文档都在同一个服务器上就行。&#xA;为了进一步提高效率，HTTP/1.1的持续连接还可以使用流水线方式工作，即浏览器在收到HTTP的响应报文之前就能够连续发送多个请求报文。这样的一个接一个的请求报文到达服务器后，服务器就发回一个接一个的响应报文。这样就节省了很多个RTT时间，使TCP连接中的空闲时间减少，提高了下载文档的效率。 HTTP的报文格式&#xA;HTTP是面向文本的，其报文中的每一个字段都是一些ASCII码串，并且每个字段的长度都是不确定的。&#xA;使用Cookie在服务器上记录用户信息&#xA;早期的万维网应用非常简单，仅仅是用户查看存放在不同服务器上的各种静态的文档。因此HTTP被设计为一种无状态的协议。这样可以简化服务器的设计。&#xA;现在，用户可以通过万维网实现各种复杂的应用，如网上购物、电子商务等。这些应用往往需要万维网服务器能够识别用户。&#xA;Cookie提供了一种机制使得万维网服务器能够“记住”用户，而无需用户主动提供用户标识信息。也就是说，Cookie是一种对无状态的HTTP进行状态化的技术。&#xA;万维网缓存与代理服务器&#xA;在万维网中还可以使用缓存机制以提高万维网的效率。&#xA;万维网缓存又称为Web缓存(Web Cache)，可位于客户机，也可位于中间系统上，位于中间系统上的Web缓存又称为代理服务器(Proxy Server) 。&#xA;Web缓存把最近的一些请求和响应暂存在本地磁盘中。当新请求到达时，若发现这个请求与暂时存放的请求相同，就返回暂存的响应，而不需要按URL的地址再次去因特网访问该资源。&#xA;试问：假如原始服务器的文档已修改，出现上图情况，主机请求到错误文档？&#xA;通常情况，代理服务器会为每个响应对象设定一个修改时间字段（Last-Modified）和一个有效日期字段(Expires)。没过期正常响应，过期了向原始服务器发送请求，若文档无变化，如下&#xA;若文档有变化，如下&#xA;例题：某浏览器发出的HTTP请求报文如下&#xA;GETlindex.html HTTP/1.1&#xA;Host: www.test.edu.cn&#xA;Connection: Close</description>
    </item>
    <item>
      <title>从零开始的计算机网络6-6</title>
      <link>https://blog.0pt.im/learn/1-6-6/</link>
      <pubDate>Mon, 07 Aug 2023 18:16:28 +0800</pubDate>
      <guid>https://blog.0pt.im/learn/1-6-6/</guid>
      <description>电子邮件 电子邮件（E-mail）是因特网上最早流行的一种应用，并且仍然是当今因特网上最重要、最实用的应用之一。&#xA;传统的电话通信属于实时通信，存在以下两个缺点:&#xA;电话通信的主叫和被叫双方必须同时在场;&#xA;一些不是十分紧迫的电话也常常不必要地打断人们的工作或休息。&#xA;而电子邮件与邮政系统的寄信相似。&#xA;发件人将邮件发送到自己使用的邮件服务器;&#xA;发件人的邮件服务器将收到的邮件按其目的地址转发到收件人邮件服务器中的收件人邮箱;&#xA;收件人在方便的时候访问收件人邮件服务器中自己的邮箱，获取收到的电子邮件。&#xA;电子邮件使用方便、传递迅速而且费用低廉。它不仅可以传送文字信息，而且还可附上声音和图像。&#xA;由于电子邮件的广泛使用，现在许多国家已经正式取消了电报业务。在我国，电信局的电报业务也因电子邮件的普及而濒临消失。&#xA;电子邮件系统采用客户/服务器方式。&#xA;电子邮件系统的三个主要组成构件：用户代理，邮件服务器，以及电子邮件所需的协议。&#xA;用户代理是用户与电子邮件系统的接口，又称为电子邮件客户端软件。&#xA;邮件服务器是电子邮件系统的基础设施。因特网上所有的ISP都有邮件服务器，其功能是发送和接收邮件，同时还要负责维护用户的邮箱。&#xA;协议包括邮件发送协议（例如SMTP）和邮件读取协议（例如POP3，IMAP）。&#xA;简单邮件传送协议SMTP (Simple Mail Transfer Protocol)的基本工作原理&#xA;注意:&#xA;1.为了简单起见，省略了认证过程;&#xA;2.应答代码后面一般都跟有简单的描述信息;&#xA;3.不同的SMTP服务器给出的相同应答代码的描述信息可能不同。&#xA;电子邮件的信息格式并不是由SMTP定义的，而是在RFC 822中单独定义的。这个RFC文档已在2008年更新为RFC 5322。一个电子邮件有信封和内容两部分。而内容又由首部和主体两部分构成。&#xA;SMTP协议只能传送ASCII码文本数据，不能传送可执行文件或其他的二进制对象。&#xA;SMTP不能满足传送多媒体邮件（例如带有图片、音频或视频数据）的需要。并且许多其他非英语国家的文字（例如中文、俄文、甚至带有重音符号的法文或德文）也无法用SMTP传送。&#xA;为解决SMTP传送非ASCII码文本的问题，提出了多用途因特网邮件扩展MIME (Multipurpose Internet MailExtensions)。&#xA;增加了5个新的邮件首部字段，这些字段提供了有关邮件主体的信息。&#xA;定义了许多邮件内容的格式，对多媒体电子邮件的表示方法进行了标准化。&#xA;定义了传送编码，可对任何内容格式进行转换，而不会被邮件系统改变。&#xA;实际上，MIME不仅仅用于SMTP，也用于后来的同样面向ASCII字符的HTTP。&#xA;常用的邮件读取协议有以下两个:&#xA;邮局协议POP (Post Office Protocol)，POP3是其第三个版本，是因特网正式标准。非常简单、功能有限的邮件读取协议。用户只能以下载并删除方式或下载并保留方式从邮件服务器下载邮件到用户方计算机。不允许用户在邮件服务器上管理自己的邮件。(例如创建文件夹，对邮件进行分类管理等)。&#xA;因特网邮件访问协议IMAP (Internet Message Access Protocol)，IMAP4是其第四个版本，目前还只是因特网建议标准。功能比POP3强大的邮件读取协议。用户在自己的计算机上就可以操控邮件服务器中的邮箱，就像在本地操控━样，因此IMAP是一个联机协议。&#xA;POP3和IMAP4都采用基于TCP连接的客户/服务器方式。POP3使用熟知端口110，IMAP4使用熟知端口143。&#xA;基于万维网的电子邮件&#xA;通过浏览器登录（提供用户名和口令）邮件服务器万维网网站就可以撰写、收发、阅读和管理电子邮件。这种工作模式与IMAP很类似，不同的是用户计算机无需安装专门的用户代理程序，只需要使用通用的万维网浏览器。&#xA;邮件服务器网站通常都提供非常强大和方便的邮件管理功能，用户可以在邮件服务器网站上管理和处理自己的邮件，而不需要将邮件下载到本地进行管理。</description>
    </item>
    <item>
      <title>从零开始的计算机网络6-5</title>
      <link>https://blog.0pt.im/learn/1-6-5/</link>
      <pubDate>Mon, 07 Aug 2023 18:15:28 +0800</pubDate>
      <guid>https://blog.0pt.im/learn/1-6-5/</guid>
      <description>文件传送协议FTP 将某台计算机中的文件通过网络传送到可能相距很远的另一台计算机中，是一项基本的网络应用，即文件传送。文件传送协议FTP (File Transfer Protocol)是因特网上使用得最广泛的文件传送协议。&#xA;FTP提供交互式的访问，允许客户指明文件的类型与格式(如指明是否使用ASCII码)，并允许文件具有存取权限（如访问文件的用户必须经过授权，并输入有效的口令）。&#xA;FTP屏蔽了各计算机系统的细节，因而适合于在异构网络中任意计算机之间传送文件。&#xA;在因特网发展的早期阶段，用FTP传送文件约占整个因特网的通信量的三分之一，而由电子邮件和域名系统所产生的通信量还要小于FTP所产生的通信量。只是到了1995年，万维网WWW的通信量才首次超过了FTP。&#xA;FTP的常见用途是在计算机之间传输文件，尤其是用于批量传输文件。&#xA;FTP的另一个常见用途是让网站设计者将构成网站内容的大量文件批量上传到他们的Web服务器。&#xA;FTP的基本工作原理&#xA;2:控制连接在整个会话期间一直保持打开，用于传送FTP相关控制命令。&#xA;5:数据连接用于文件传输，在每次文件传输时才建立，传输结束就关闭。&#xA;例题：FTP客户和服务器间传递FTP命令时，使用的连接是&#xA;A.建立在TCP之上的控制连接 B.建立在TCP之上的数据连接&#xA;C.建立在UDP之上的控制连接 D.建立在UDP之上的数据连接&#xA;解析：FTP客户和服务器之间要建立以下两个并行的TCP连接:&#xA;一个是控制连接，在整个会话期间一直保持打开，用于传送FTP相关控制命令.另一个是数据连接，用于文件传输，在每次文件传输时才建立，传输结束就关闭。&#xA;例题：下列关于FTP协议的叙述中，错误的是&#xA;A.数据连接在每次数据传输完毕后就关闭 B.控制连接在整个会话期间保持打开状态&#xA;C.服务器与客户端的TCP20端口建立数据连接 D.客户端与服务器的TCP21端口建立控制连接&#xA;解析：FTP客户和服务器之间要建立“控制连接”和“数据连接”这两个并行的TCP连接。控制连接在整个会话期间都保持打开状态，而数据连接在每次文件传输时才建立，传输结束就关闭。&#xA;默认情况下，FTP使用TCP21端口进行控制连接，TCP20端口进行数据连接。&#xA;但是，是否使用TCP 20端口建立数据连接与传输模式有关，主动方式使用TCP20端口，被动方式由服务器和客户端自行协商决定。</description>
    </item>
    <item>
      <title>从零开始的计算机网络6-4</title>
      <link>https://blog.0pt.im/learn/1-6-4/</link>
      <pubDate>Mon, 07 Aug 2023 18:14:28 +0800</pubDate>
      <guid>https://blog.0pt.im/learn/1-6-4/</guid>
      <description>域名系统DNS (Domain Name System) 早在1983年，因特网就开始采用层次结构的命名树作为主机的名字（即域名），并使用分布式的域名系统DNS。&#xA;DNS使大多数域名都在本地解析，仅少量解析需要在因特网上通信，因此系统效率很高。&#xA;由于DNS是分布式系统，即使单个计算机出了故障，也不会妨碍整个系统的正常运行。&#xA;因特网采用层次树状结构的域名结构&#xA;域名的结构由若干个分量组成，各分量之间用“点”隔开，分别代表不同级别的域名。&#xA;···.三级域名.二级域名.顶级域名&#xA;每一级的域名都由英文字母和数字组成，不超过63个字符，不区分大小写字母。&#xA;级别最低的域名写在最左边，而级别最高的顶级域名写在最右边。&#xA;完整的域名不超过255个字符。&#xA;域名系统既不规定一个域名需要包含多少个下级域名，也不规定每一级的域名代表什么意思。&#xA;各级域名由其上一级的域名管理机构管理，而最高的顶级域名则由因特网名称与数字地址分配机构ICANN进行管理。&#xA;顶级域名TLD (Top Level Domain)分为以下三类:&#xA;国家顶级域名nTLD 采用ISO 3166的规定。如cn表示中国，us表示美国，uk表示英国、等等。&#xA;通用顶级域名gTLD 最常见的通用顶级域名有七个，即:com(公司企业)、net (网络服务机构)、org (非营利性组织)、int(国际组织)、edu(美国教育结构)、gov(美国政府部门) . mil(美国军事部门)。&#xA;反向域arpa 用于反向域名解析，即IP地址反向解析为域名。&#xA;在国家顶级域名下注册的二级域名均由该国家自行确定。例如，顶级域名为jp的日本，将其教育和企业机构的二级域名定为ac和co，而不用edu和com。&#xA;我国则将二级域名划分为以下两类:&#xA;类别域名 共七个: ac(科研机构)、com (工、商、金融等企业)、edu(教育机构)、gov(政府部门)、net(提供网络服务的机构)、mil(军事机构)和org (非营利性组织)。&#xA;行政区域名 共34个，适用于我国的各省、自治区、直辖市。例如: bj为北京市、sh为上海市、js为江苏省，等等。&#xA;举例：因特网的域名空间&#xA;这种按等级管理的命名方法便于维护名字的唯一性，并且也容易设计出一种高效的域名查询机制。需要注意的是，域名只是个逻辑概念，并不代表计算机所在的物理地点。&#xA;域名和IP地址的映射关系必须保存在域名服务器中，供所有其他应用查询。显然不能将所有信息都储存在一台域名服务器中。DNS使用分布在各地的域名服务器来实现域名到IP地址的转换。&#xA;域名服务器可以划分为以下四种不同的类型:&#xA;根域名服务器 根域名服务器是最高层次的域名服务器。每个根域名服务器都知道所有的顶级域名服务器的域名及其IP地址。因特网上共有13个不同IP地址的根域名服务器。尽管我们将这13个根域名服务器中的每一个都视为单个的服务器，但“每台服务器”实际上是由许多分布在世界各地的计算机构成的服务器群集。当本地域名服务器向根域名服务器发出查询请求时，路由器就把查询请求报文转发到离这个DNS客户最近的一个根域名服务器。这就加快了DNS的查询过程，同时也更合理地利用了因特网的资源。根域名服务器通常并不直接对域名进行解析，而是返回该域名所属顶级域名的顶级域名服务器的IP地址。&#xA;顶级域名服务器 这些域名服务器负责管理在该顶级域名服务器注册的所有二级域名。当收到DNS查询请求时就给出相应的回答（可能是最后的结果，也可能是下一级权限域名服务器的IP地址）。&#xA;权限域名服务器 这些域名服务器负责管理某个区的域名。每一个主机的域名都必须在某个权限域名服务器处注册登记。因此权限域名服务器知道其管辖的域名与IP地址的映射关系。另外，权限域名服务器还知道其下级域名服务器的地址。&#xA;本地域名服务器 本地域名服务器不属于上述的域名服务器的等级结构。当一个主机发出DNS请求报文时，这个报文就首先被送往该主机的本地域名服务器。本地域名服务器起着代理的作用，会将该报文转发到上述的域名服务器的等级结构中。每一个因特网服务提供者ISP，一个大学，甚至一个大学里的学院，都可以拥有一个本地域名服务器，它有时也称为默认域名服务器。本地域名服务器离用户较近，一般不超过几个路由器的距离，也有可能就在同一个局域网中。本地域名服务器的IP地址需要直接配置在需要域名解析的主机中。&#xA;域名解析的过程&#xA;递归查询&#xA;迭代查询&#xA;由于递归查询对于被查询大，通常采用以下模式:从请求主机到本地域名服务器的查询是递归查询，而其余的查询是迭代查询。&#xA;为了提高DNS的查询效率，并减轻根域名服务器的负荷和减少因特网上的DNS查询报文数量，在域名服务器中广泛地使用了高速缓存。高速缓存用来存放最近查询过的域名以及从何处获得域名映射信息的记录。&#xA;由于域名到IP地址的映射关系并不是永久不变，为保持高速缓存中的内容正确，域名服务器应为每项内容设置计时器并删除超过合理时间的项（例如，每个项目只存放两天)。&#xA;不但在本地域名服务器中需要高速缓存，在用户主机中也很需要。许多用户主机在启动时从本地域名服务器下载域名和IP地址的全部数据库，维护存放自己最近使用的域名的高速缓存，并且只在从缓存中找不到域名时才向域名服务器查询。同理，主机也需要保持高速缓存中内容的正确性。&#xA;例题：假设所有域名服务器均采用迭代查询方式进行域名解析，当H4访问规范域名为www.abc.xyz.com的网站时，域名服务器201.1.1.1在完成该域名解析过程中，可能发出DNS查询的最少和最多次数分别是&#xA;A.0，3 B.1，3 C.0，4 D.1，4&#xA;解析：&#xA;若主机H4的DNS高速缓存中有该域名的DNS信息时，不需要查询任何域名服务器。这样，H4无需向图中的默认域名服务器（本地域名服务器）发出DNS查询，该域名服务器也无需发出DNS查询。&#xA;题目给定采用迭代查询进行域名解析，在最坏的情况下，需要图中的本地域名服务器依次向以下域名服务器发出共4次DNS查询:&#xA;根域名服务器&#xA;顶级域名服务器(.com)&#xA;权限域名服务器(xyz.com)</description>
    </item>
    <item>
      <title>从零开始的计算机网络6-3</title>
      <link>https://blog.0pt.im/learn/1-6-3/</link>
      <pubDate>Mon, 07 Aug 2023 18:13:28 +0800</pubDate>
      <guid>https://blog.0pt.im/learn/1-6-3/</guid>
      <description>动态主机配置协议DHCP DHCP的作用&#xA;人工配置工作量大，容易出错。&#xA;DHCP的工作过程&#xA;DHCP服务器为DHCP客户分配IP时，使用ARP确保所选IP地址未被网络中其他主机占用。&#xA;DHCP客户接受确认IP地址租约时，使用ARP检测所分配到的IP地址是否已被网络中其他主机占用:&#xA;若被占用:给DHCP服务器发送“DHCPDECLINE”报文撤销IP地址租约，并重新发送“DHCP DISCOVER”报文;&#xA;若未被占用:可以使用租约中的IP地址与网络中其他主机通信了。&#xA;DHCP中继代理&#xA;原本路由器不转发广播，所以得给路由器配置，使之成为DHCP中继代理。</description>
    </item>
    <item>
      <title>从零开始的计算机网络6-2</title>
      <link>https://blog.0pt.im/learn/1-6-2/</link>
      <pubDate>Mon, 07 Aug 2023 18:12:28 +0800</pubDate>
      <guid>https://blog.0pt.im/learn/1-6-2/</guid>
      <description>客户/服务器方式（C/S方式）和对等方式（P2P方式） 网络应用程序运行在处于网络边缘的不同的端系统上，通过彼此间的通信来共同完成某项任务。&#xA;开发一种新的网络应用首先要考虑的问题就是网络应用程序在各种端系统上的组织方式和它们之间的关系。目前流行的主要有以下两种：&#xA;客户/服务器(Client/Server，C/S)方式&#xA;对等(Peer-to-Peer，P2P)方式&#xA;客户/服务器(Client/Server,C/S)方式&#xA;客户和服务器是指通信中所涉及的两个应用进程。&#xA;客户/服务器方式所描述的是进程之间服务和被服务的关系。&#xA;客户是服务请求方，服务器是服务提供方。&#xA;服务器总是处于运行状态，并等待客户的服务请求。服务器具有固定端口号（例如HTTP服务器的默认端口号为80），而运行服务器的主机也具有固定的IP地址。&#xA;C/S方式是因特网上传统的、同时也是最成熟的方式，很多我们熟悉的网络应用采用的都是C/S方式。包括万维网www、电子邮件、文件传输FTP等。&#xA;基于C/S方式的应用服务通常是服务集中型的，即应用服务集中在网络中比客户计算机少得多的服务器计算机上。&#xA;由于一台服务器计算机要为多个客户机提供服务，在C/S应用中，常会出现服务器计算机跟不上众多客户机请求的情况。&#xA;为此，在C/S应用中，常用计算机群集（或服务器场）构建一个强大的虚拟服务器。&#xA;对等(Peer-to-Peer，P2P)方式&#xA;在P2P方式中，没有固定的服务请求者和服务提供者，分布在网络边缘各端系统中的应用进程是对等的，被称为对等方。对等方相互之间直接通信，每个对等方既是服务的请求者，又是服务的提供者。 目前，在因特网上流行的P2P应用主要包括P2P文件共享、即时通信、P2P流媒体、分布式存储等。&#xA;基于P2P的应用是服务分散型的，因为服务不是集中在少数几个服务器计算机中，而是分散在大量对等计算机中，这些计算机并不为服务提供商所有，而是为个人控制的桌面计算机和笔记本电脑，它们通常位于住宅、校园和办公室中。&#xA;P2P方式的最突出特性之一就是它的可扩展性。因为系统每增加一个对等方，不仅增加的是服务的请求者，同时也增加了服务的提供者，系统性能不会因规模的增大而降低。&#xA;P2P方式具有成本上的优势，因为它通常不需要庞大的服务器设施和服务器带宽。为了降低成本，服务提供商对于将P2P方式用于应用的兴趣越来越大。</description>
    </item>
    <item>
      <title>从零开始的计算机网络6-1</title>
      <link>https://blog.0pt.im/learn/1-6-1/</link>
      <pubDate>Mon, 07 Aug 2023 18:11:28 +0800</pubDate>
      <guid>https://blog.0pt.im/learn/1-6-1/</guid>
      <description>应用层概述 应用层是计算机网络体系结构的最顶层，是设计和建立计算机网络的最终目的，也是计算机网络中发展最快的部分。&#xA;早期基于文本的应用（电子邮件、远程登录、文件传输、新闻组）&#xA;20世纪90年代将因特网带入千家万户的万维网www&#xA;当今流行的即时通信、P2P文件共享及各种音视频应用&#xA;计算设备的小型化和“无处不在”，宽带住宅接入和无线接入的日益普及和迅速发展，为未来更多的新型应用提供了广阔的舞台。&#xA;在本章中，我们以一些经典的网络应用为例来学习有关网络应用的原理、协议和实现方面的知识。&#xA;万维网www&#xA;域名系统DNS&#xA;动态主机配置DHCP&#xA;电子邮件&#xA;文件传送FTP和P2P文件共享&#xA;多媒体网络应用</description>
    </item>
    <item>
      <title>从零开始的计算机网络5-9</title>
      <link>https://blog.0pt.im/learn/1-5-9/</link>
      <pubDate>Mon, 07 Aug 2023 18:10:28 +0800</pubDate>
      <guid>https://blog.0pt.im/learn/1-5-9/</guid>
      <description>TCP报文段的首部格式 为了实现可靠传输，TCP采用了面向字节流的方式。但TCP在发送数据时，是从发送缓存取出一部分或全部字节并给其添加一个首部使之成为TCP报文段后进行发送。&#xA;一个TCP报文段由首部和数据载荷两部分构成;&#xA;TCP的全部功能都体现在它首部中各字段的作用。&#xA;源端口：占16比特，写入源端口号，用来标识发送该TCP报文段的应用进程。 目的端口：占16比特，写入目的端口号，用来标识接收该TCP报文段的应用进程。&#xA;序号:占32比特，取值范围[0,2^32 - 1]，序号增加到最后一个后，下一个序号就又回到 指出本TCP报文段数据载荷的第一个字节的序号。&#xA;确认号:占32比特，取值范围[0,2^32 -1]，确认号增加到最后一个后，下一个确认号就又回到0。 指出期望收到对方下一个TCP报文段的数据载荷的第一个字节的序号，同时也是对之前收到的所有数据的确认。&#xA;若确认号=n，则表明到序号n-1为止的所有数据都已正确接收，期望接收序号为n的数据。&#xA;确认标志位ACK:取值为1时确认号字段才有效;取值为0时确认号字段无效。&#xA;TCP规定，在连接建立后所有传送的TCP报文段都必须把ACK置1。&#xA;数据偏移：占4比特，并以4字节为单位。&#xA;用来指出TCP报文段的数据载荷部分的起始处距离TCP报文段的起始处有多远。&#xA;这个字段实际上是指出了TCP报文段的首部长度。&#xA;首部固定长度为20字节，因此数据偏移字段的最小值为(0101)（二进制）&#xA;首部最大长度为60字节，因此数据偏移字段的最大值为(1111)（二进制）&#xA;如数据偏移=0101，转换成十进制为5，所以首部长度为5 * 4字节 = 20字节&#xA;窗口：占16比特，以字节为单位。指出发送本报文段的一方的接收窗口。&#xA;窗口值作为接收方让发送方设置其发送窗口的依据。&#xA;这是以接收方的接收能力来控制发送方的发送能力，称为流量控制。&#xA;校验和：占16比特，检查范围包括TCP报文段的首部和数据载荷两部分。&#xA;在计算校验和时，要在TCP报文段的前面加上12字节的伪首部。&#xA;同步标志位SYN：在TCP连接建立时用来同步序号。&#xA;终止标志位FIN:用来释放TCP连接。&#xA;复位标志位RST:用来复位TCP连接。&#xA;当RST=1时，表明TCP连接出现了异常,必须释放连接，然后再重新建立连接。&#xA;RST置1还用来拒绝一个非法的报文段或拒绝打开一个TCP连接。&#xA;推送标志位PSH：接收方的TCP收到该标志位为1的报文段会尽快上交应用进程， 而不必等到接收缓存都填满后再向上交付。&#xA;紧急标志位URG：取值为1时紧急指针字段有效;取值为0时紧急指针字段无效。 紧急指针：占16比特，以字节为单位，用来指明紧急数据的长度。 当发送方有紧急数据时，可将紧急数据插队到发送缓存的最前面，并立刻封装到一个TCP报文段中进行发送。紧急指针会指出本报文段数据载荷部分包含了多长的紧急数据，紧急数据之后是普通数据。&#xA;选项&#xA;最大报文段长度MSS选项：TCP报文段数据载荷部分的最大长度。&#xA;窗口扩大选项：为了扩大窗口(提高吞吐率)。&#xA;时间戳选项:&#xA;用来计算往返时间RTT&#xA;用于处理序号超范围的情况，又称为防止序号绕回PAWS。&#xA;选择确认选项&#xA;填充：由于选项的长度可变，因此使用填充来确保报文段首部能被4整除 （因为数据偏移字段，也就是首部长度字段，是以4字节为单位的）。</description>
    </item>
    <item>
      <title>从零开始的计算机网络5-8</title>
      <link>https://blog.0pt.im/learn/1-5-8/</link>
      <pubDate>Mon, 07 Aug 2023 18:09:28 +0800</pubDate>
      <guid>https://blog.0pt.im/learn/1-5-8/</guid>
      <description>TCP的运输连接管理 TCP的连接建立 TCP是面向连接的协议，它基于运输连接来传送TCP报文段。&#xA;TCP运输连接的建立和释放是每一次面向连接的通信中必不可少的过程。&#xA;TCP运输连接有以下三个阶段:&#xA;建立TCP连接&#xA;数据传送&#xA;释放TCP连接&#xA;TCP的运输连接管理就是使运输连接的建立和释放都能正常地进行。&#xA;TCP的连接建立要解决以下三个问题:&#xA;使TCP双方能够确知对方的存在;&#xA;使TCP双方能够协商一些参数（如最大窗口值、是否使用窗口扩大选项和时间戳选项以及服务质量等）；&#xA;使TCP双方能够对运输实体资源（如缓存大小、连接表中的项目等）进行分配。&#xA;TCP连接请求报文段首部中的同步位SYN被设置为1，表明这是一个TCP请求报文段。&#xA;序号字段seq被设置了一个初始值x，作为TCP客户进程方选择的初始序号。&#xA;请准意：TGP规定SYN被设置为1的报文段不能携带数据，但要消耗掉一个序号。&#xA;针对TCP连接请求的确认报文段首部中的同步位SYN和确认位ACK都设置为1，表明这是一个TCP连接请求确认报文段。序号字段seq被设置了─个初始值y，作为TCP服务器进程诚选择的初始序号。确认号字段adk的值被设置成了x+1，这是对TP客户进程所选择的初始序号的确认。&#xA;请注意：这个报文段也不能携带数据，因为它是SYN被设置为1的报文段，但同样要消耗掉一个序号。&#xA;针对TCP连接请求的确认的确认报文段首部中的确认位ACK被设置为1，表明这是一个普通的TCP确认报文段。序号字段seq被设置为x+1，这是因为MGP客户进程发送的第一个TCP报文段的序号为X，并且不携带数据，因此第二个报文段的序号为x+1。&#xA;请注意:TCP规定普通的TCP确认报文段可以携带数据，但如果不携带数据，则不消耗序号。在这种情况下，所发送的下一个数据报文段的序号仍是x+1。&#xA;确认号字段ack被设置为y+1，这是对TCP服务器进程所选择的初始序号的确认。TCP服务器递程收到该确认报文段后也进入连接已建立状态。&#xA;为什么最后要发针对TCP连接请求的确认的确认报文段？&#xA;这是为了防止已失效的连接请求报文段突然又传送到了TCP服务器，因而导致错误。&#xA;例题：主机甲向主机乙发送一个(SYN=1,seq=11220)的TCP段，期望与主机乙建立TCP连接，若主机乙接受该连接请求，则主机乙向主机甲发送的正确的TCP段可能是&#xA;A.(SYN=0，ACK=0, seq=11221, ack=11221) B.(SYN=1，ACK=1, seq=11220, ack=11220)&#xA;C.(SYN=1，ACK=1, seq=11221, ack=11221) D.(SYN=0，ACK=0, seq=11220,ack=11220)&#xA;解析：见上文，选C。&#xA;TCP的连接释放 TCP通过“四报文挥手”来释放连接&#xA;该报文段首部中的终止位FIN和确认位ACK的值都被设置为1，表明这是一个TCP接释放报文段，同时世对之前收到的报文段进行确认。序号seq字段的值设置为u，它等于TCP客户进程之前已传送过的、数据的最后一个字节的序号加1。&#xA;请注意：TCP规定终止位FN等于1的报文段即使不携带数据，也要消耗掉一个序号。&#xA;确认号ack字段的值设置为v，它等于TCP客户进程之前已收到的、数据的最局一个字节的序号加1。&#xA;TCP服务器进程收到TCP连接释放报文段后，会发送一个普通的TCP确认报文段养进入关闭等待状态。&#xA;该报文段首部中的确认位ACK的值被设置为1，表明这是一个普通的TCP确认报文段。序号seq字段的值设置为v，它等于TCP服务器进程之前已传送过的数据的最后一个字节的序号加1。确认号adk字段的值设置为u+1，这是对TCP连接释放报文段的确认。TCP服务器进程这时应通知高层应用进程：TCP客户进程要断开与自己的TCP连接。此时，从TGP客户进程到TCP服务器进程这个方向的连接就释放了。这时的TCP连接属于半关闭状态，也就是TCP客户进程已经没有数据要发送了。但如果TCP服务器进程仍有数据要发送，TCP客户进程仍要接收。&#xA;也就是说，从TCP服务器进程到TCP客户进程这个方向的连接并未关闭。&#xA;TCP客户进程收到TCP确认报文段后就入终止等待2状态。等待TCP服务器进程发出的TCP连接释放报文段。若使用TCP服务器进程的应用进程已经没有数据要发送了，应用进程就通知其TCP服务器进程释放连接。由于TCP连接释放是由TCP客户进程主动发起的，因此TCP服务器进程对TCP连接的释放称为被动关闭连接。&#xA;TCP服务器进程发送TCP连接释放报文段并进入最后确认状态。该报文段省部中的终止位FIN和确认位ACK的值都被设置为1，表明这是一个TCP连接释放报文段，同时也对之前收到的报文段进行确认。现在假定序号seq字段的值为w。这是因为在半关闭状态下 ，TCP服务器进程可能又发送了一些数据。确认号ack字段的值为u+1，这是对之前收到的TCP连接释放报文段的重复确认。TCP客户进程收到TCP连接释放报文段后，必须针对该报文段发送普通的TCP确认报文段，之后进入时间等待状态。该报文段首部中的确认位ACK的值被设置为1，表明这是一个普通的TCP确认报文段。序号seq字段的值设置为u+1，这是因为TCP客户进程之前的TCP连接释放报文段虽然不携带数据，但要消耗掉一个序号。确认号ack字段的值设置为w+1，这是对所接受到的TCP连接释放报文段的确认。TCP服务器进程收到该报文段后就进入关闭状态。而TCP客户进程还要经过2MSL后才能进入关闭状态。&#xA;MSL(Maximum Segment Lifetime)意思是最长报文段寿命，RFC793建议为2分种。&#xA;为什么不直接进入关闭状态而是还要等待2MSL？&#xA;TCP服务器进程每收到一次TCP客户进程的数据，就重新设置并启动保活计时器（2小时定时）。&#xA;若保活计时器定时周期内未收到TCP客户进程发来的数据，则当保活计时器到时后，TCP服务器进程就向TCP客户进程发送一个探测报文段，以后则每隔75秒钟发送一次。若一连发送10个探测报文段后仍无TCP客户进程的响应，TCP服务器进程就认为TCP客户进程所在主机出了故障接着就关闭这个连接。</description>
    </item>
    <item>
      <title>从零开始的计算机网络5-7</title>
      <link>https://blog.0pt.im/learn/1-5-7/</link>
      <pubDate>Sun, 06 Aug 2023 18:09:28 +0800</pubDate>
      <guid>https://blog.0pt.im/learn/1-5-7/</guid>
      <description>TCP可靠传输的实现 TCP基于以字节为单位的滑动窗口来实现可靠传输&#xA;虽然发送方的发送窗口是根据接收方的接收窗口设置的，但在同一时刻，发送方的发送窗口并不总是和接收方的接收窗口一样大。&#xA;网络传送窗口值需要经历一定的时间滞后，并且这个时间还是不确定的。&#xA;发送方还可能根据网络当时的拥塞情况适当减小自己的发送窗口尺寸。&#xA;对于不按序到达的数据应如何处理，TCP并无明确规定。&#xA;如果接收方把不按序到达的数据一律丢弃，那么接收窗口的管理将会比较简单，但这样做对网络资源的利用不利,因为发送方会重复传送较多的数据。&#xA;TCP通常对不按序到达的数据是先临时存放在接收窗口中，等到字节流中所缺少的字节收到后，再按序交付上层的应用进程。&#xA;TCP要求接收方必须有累积确认和捎带确认机制，这样可以减小传输开销。接收方可以在合适的时候发送确认，也可以在自己有数据要发送时把确认信息顺便捎带上。&#xA;接收方不应过分推迟发送确认，否则会导致发送方不必要的超时重传，这反而浪费了网络的资源。&#xA;TCP标准规定，确认推迟的时间不应超过0.5秒。若收到一连串具有最大长度的报文段，则必须每隔-个报文段就发送一个确认[RFC 1122]。&#xA;捎带确认实际上并不经常发生，因为大多数应用程序很少同时在两个方向上发送数据。&#xA;TCP的通信是全双工通信。通信中的每一方都在发送和接收报文段。因此，每一方都有自己的发送窗口和接收窗口。在谈到这些窗口时，一定要弄清楚是哪一方的窗口。&#xA;例题：主机甲与主机乙之间已建立一个TCP连接，主机甲向主机乙发送了两个连续的TCP段，分别包含300字节和500字节的有效载荷，第一个段的序号为200，主机乙正确接收到两个段后，发送给主机甲的确认序号是&#xA;A.500 B.700 C.800 D.1000&#xA;解析：&#xA;选D&#xA;例题：主机甲与主机乙之间已建立一个TCP连接，主机甲向主机乙发送了3个连续的TCP段，分别包含300字节、400字节和500字节的有效载荷，第3个段的序号为900。若主机乙仅正确接收到第1个和第3个段，则主机乙发送给主机甲的确认序号是&#xA;A.300 B.500 C.1200 D.1400&#xA;解析：</description>
    </item>
    <item>
      <title>从零开始的计算机网络5-6</title>
      <link>https://blog.0pt.im/learn/1-5-6/</link>
      <pubDate>Sat, 05 Aug 2023 18:09:28 +0800</pubDate>
      <guid>https://blog.0pt.im/learn/1-5-6/</guid>
      <description>TCP超时重传时间的选择 超时重传时间的选择是TCP最复杂的问题之一&#xA;不能直接使用某次测量得到的RTT样本来计算超时重传时间RTO。&#xA;利用每次测量得到的RTT样本，计算加权平均往返时间RTTs（又称为平滑的往返时间）。&#xA;RTTs = RTT1&#xA;新的RTTs = (l - α) ×旧的RTTs+α ×新的RTT样本&#xA;在上式中,0 ≤a &amp;lt;1 :&#xA;若α很接近于0，则新RTT样本对RTTs的影响不大;&#xA;若α很接近于1，则新RTT样本对RTTs的影响较大;&#xA;已成为建议标准的RFC6298推荐的α值为1/8，即0.125。&#xA;用这种方法得出的加权平均往返时间RTTs就比测量出的RTT值更加平滑。&#xA;显然，超时重传时间RTO应略大于加权平均往返时间RTTs。&#xA;RFC6298建议使用下式计算超时重传时间RTO:&#xA;往返时间RTT的测量比较复杂&#xA;源主机若误将确认当作是对原报文段的确认:&#xA;所计算出的RTTs和RTO就会偏大，降低了传输效率;&#xA;源主机若误将确认当作是对重传报文段的确认：&#xA;所计算出的RTTs和RTO就会偏小，导致报文段没必要的重传，增大网络负荷;&#xA;针对出现超时重传时无法测准往返时间RTT的问题，Karn提出了一个算法:在计算加权平均往返时间RTTs时，只要报文段重传了，就不采用其往返时间RTT样本。也就是出现重传时，不重新计算RTTs，进而超时重传时间RTO也不会重新计算。&#xA;这又引起了新的问题。设想出现这样的情况:报文段的时延突然增大了很多，并且之后很长一段时间都会保持这种时延。因此在原来得出的重传时间内，不会收到确认报文段。于是就重传报文段。但根据Karn算法，不考虑重传的报文段的往返时间样本。这样，超时重传时间就无法更新。这会导致报文段反复被重传。&#xA;因此，要对Karn算法进行修正。方法是：报文段每重传一次，就把超时重传时间RTO增大一些。典型的做法是将新RTO的值取为旧RTO值的2倍。</description>
    </item>
    <item>
      <title>从零开始的计算机网络5-5</title>
      <link>https://blog.0pt.im/learn/1-5-5/</link>
      <pubDate>Fri, 04 Aug 2023 18:09:28 +0800</pubDate>
      <guid>https://blog.0pt.im/learn/1-5-5/</guid>
      <description>TCP的拥塞控制 在某段时间，若对网络中某一资源的需求超过了该资源所能提供的可用部分，网络性能就要变坏，这种情况就叫做拥塞(congestion)。&#xA;在计算机网络中的链路容量（即带宽）、交换结点中的缓存和处理机等，都是网络的资源。若出现拥塞而不进行控制，整个网络的吞吐量将随输入负荷的增大而下降。&#xA;慢开始(slow-start)&#xA;拥塞避免(congestion avoidance)&#xA;快重传(fast retransmit)&#xA;快恢复(fast recovery)&#xA;下面介绍这四种拥塞控制算法的基本原理，假定如下条件:&#xA;数据是单方向传送，而另一个方向只传送确认。&#xA;接收方总是有足够大的缓存空间，因而发送方发送窗口的大小由网络的拥塞程度来决定。&#xA;以最大报文段MSS的个数为讨论问题的单位，而不是以字节为单位。&#xA;发送方维护一个叫做拥塞窗口cwnd的状态变量，其值取决于网络的拥塞程度，并且动态变化。&#xA;拥塞窗口cwnd的维护原则:只要网络没有出现拥塞，拥塞窗口就再增大一些;但只要网络出现拥塞，拥塞窗口就减少一些。&#xA;判断出现网络拥塞的依据:没有按时收到应当到达的确认报文（即发生超时重传）。&#xA;发送方将拥塞窗口作为发送窗口swnd，即swnd = cwnd。&#xA;维护一个慢开始门限ssthresh状态变量:&#xA;当cwnd &amp;lt; ssthresh时，使用慢开始算法;&#xA;当cwnd &amp;gt; ssthresh时，停止使用慢开始算法而改用拥塞避免算法;&#xA;当cwnd = ssthresh时，既可使用慢开始算法，也可使用拥塞避免算法。&#xA;设初始时cwnd = 1，ssthresh = 16&#xA;“慢开始”是指一开始向网络注入的报文段少，并不是指拥塞窗口cwnd增长速度慢;&#xA;“拥塞避免”并非指完全能够避免拥塞，而是指在拥塞避免阶段将拥塞窗口控制为按线性规律增长，使网络比较不容易出现拥塞;&#xA;慢开始和拥塞避免算法是1988年提出的TCP拥塞控制算法(TCP Tahoe版本)。&#xA;1990年又增加了两个新的拥塞控制算法（改进TCP的性能），这就是快重传和快恢复（TCP Reno版本)。有时，个别报文段会在网络中丢失，但实际上网络并未发生拥塞。&#xA;这将导致发送方超时重传，并误认为网络发生了拥塞;&#xA;发送方把拥塞窗口cwnd又设置为最小值1，并错误地启动慢开始算法，因而降低了传输效率。&#xA;采用快重传算法可以让发送方尽早知道发生了个别报文段的丢失。&#xA;所谓快重传，就是使发送方尽快进行重传，而不是等超时重传计时器超时再重传。&#xA;要求接收方不要等待自己发送数据时才进行捎带确认，而是要立即发送确认;&#xA;即使收到了失序的报文段也要立即发出对已收到的报文段的重复确认。&#xA;发送方一旦收到3个连续的重复确认，就将相应的报文段立即重传，而不是等该报文段的超时重传计时器超时再重传。&#xA;对于个别丢失的报文段，发送方不会出现超时重传，也就不会误认为出现了拥塞（进而降低拥塞窗口cwnd为1)。使用快重传可以使整个网络的吞吐量提高约20%。&#xA;发送方一旦收到3个重复确认，就知道现在只是丢失了个别的报文段。于是不启动慢开始算法，而执行快恢复算法;&#xA;也有的快恢复实现是把快恢复开始时的拥塞窗口cwnd值再增大一些&#xA;即等于新的ssthresh + 3。&#xA;既然发送方收到3个重复的确认，就表明有3个数据报文段已经离开了网络;&#xA;这3个报文段不再消耗网络资源而是停留在接收方的接收缓存中;&#xA;可见现在网络中不是堆积了报文段而是减少了3个报文段。因此可以适当把拥塞窗口扩大些&#xA;例题：一个TCP连接总是以1KB的最大段长发送TCP段，发送方有足够多的数据要发送。当拥塞窗口为16KB时发生了超时，如果接下来的4个RTT（往返时间)内的TCP段的传输都是成功的，那么当第4个RTT时间内发送的所有TCP段都得到肯定应答时，拥塞窗口大小是&#xA;A.7KB B.8KB C.9KB D.16KB&#xA;解析：</description>
    </item>
    <item>
      <title>从零开始的计算机网络5-4</title>
      <link>https://blog.0pt.im/learn/1-5-4/</link>
      <pubDate>Thu, 03 Aug 2023 18:09:28 +0800</pubDate>
      <guid>https://blog.0pt.im/learn/1-5-4/</guid>
      <description>TCP的流量控制 一般来说，我们总是希望数据传输得更快一些。&#xA;但如果发送方把数据发送得过快，接收方就可能来不及接收，这就会造成数据的丢失。&#xA;所谓流量控制(flow control)就是让发送方的发送速率不要太快，要让接收方来得及接收。&#xA;利用滑动窗口机制可以很方便地在TCP连接上实现对发送方的流量控制。&#xA;ACK是TCP报文段首部的标志位，取值1表示这是一个TCP确认报文段。小写adk是TCP报文段首部中的确认号字段，取值201表示序号201之前的数据已全蔷R确接收，现在希望收到序号201及赏后续数据。rwnd是TCP报文段首部中的窗口字段，取值300表示自己的接收窗口大小为300。&#xA;如果零窗口探测报文丢失，怎么办？&#xA;零窗口探测报文段也有重传计时器。没事。&#xA;例题：主机甲和主机乙之间建立了一个TCP连接，TCP最大段长度为1000字节。若主机甲的当前拥塞窗口为4000字节在主机甲向主机乙连续发送两个最大段后，成功收到主机乙发送的第一个段的确认段，确认段中通告的接收窗口大小为2000字节，则此时主机甲还可以向主机乙发送的最大字节数是&#xA;A.1000 B.2000 C.3000 D.4000&#xA;解析：</description>
    </item>
    <item>
      <title>从零开始的计算机网络5-3</title>
      <link>https://blog.0pt.im/learn/1-5-3/</link>
      <pubDate>Wed, 02 Aug 2023 18:09:28 +0800</pubDate>
      <guid>https://blog.0pt.im/learn/1-5-3/</guid>
      <description>UDP和TCP的对比 UDP和TCP是TCP/IP体系结构运输层中的两个重要协议&#xA;用户数据报协议UDP(User Datagram Protocol) 1.无连接的UDP&#xA;2.UDP支持单播、多播以及广播&#xA;3.UDP是面向应用报文的&#xA;4.UDP向上层提供无连接不可靠传输服务（适用于IP电话、视频会议等实时应用）&#xA;5.UDP用户数据包首部仅8字节&#xA;传输控制协议TCP(Transmission Control Protocol) 1.面向连接的TCP&#xA;2.TCP仅支持单播&#xA;3.TCP是面向字节流的&#xA;TCP并不知道数据报的含义，只是将其视为字节流，加载到发送缓存中发送。接收方的TCP也不知道数据报的含义，只是交付给应用进程，接收方的应用进程必须有能力识别接收到的字节流。&#xA;4.TCP向上层提供面向连接的可靠传输服务（适用于要求可靠传输的应用，例如文件传输）&#xA;5.TCP报文段首部最小20字节，最大60字节</description>
    </item>
    <item>
      <title>从零开始的计算机网络5-2</title>
      <link>https://blog.0pt.im/learn/1-5-2/</link>
      <pubDate>Tue, 01 Aug 2023 18:09:28 +0800</pubDate>
      <guid>https://blog.0pt.im/learn/1-5-2/</guid>
      <description>运输层端口号、复用与分用的概念 运行在计算机上的进程使用进程标识符PID来标志。&#xA;因特网上的计算机并不是使用统一的操作系统，不同的操作系统(windows，Linux，Mac os)又使用不同格式的进程标识符。&#xA;为了使运行不同操作系统的计算机的应用进程之间能够进行网络通信，就必须使用统一的方法对TCP/IP体系的应用进程进行标识。&#xA;TCP/IP体系的运输层使用端口号来区分应用层的不同应用进程。&#xA;端口号使用16比特表示，取值范围0~65535;&#xA;熟知端口号:0~1023，IANA把这些端口号指派给了TCP/IP体系中最重要的一些应用协议，例如:FTP使用21/20，HTTP使用80，DNS使用53。&#xA;登记端口号:1024~49151，为没有熟知端口号的应用程序使用。使用这类端口号必须在IANA按照规定的手续登记，以防止重复。例如:Microsoft RDP微软远程桌面使用的端口是3389。&#xA;短暂端口号:49152~65535，留给客户进程选择暂时使用。当服务器进程收到客户进程的报文时，就知道了客户进程所使用的动态端口号。通信结束后，这个端口号可供其他客户进程以后使用。&#xA;端口号只具有本地意义，即端口号只是为了标识本计算机应用层中的各进程，在因特网中，不同计算机中的相同端口号是没有联系的。&#xA;发送方的复用和接收方的分用&#xA;TCP/IP体系的应用层常用协议所使用的运输层熟知端口号</description>
    </item>
    <item>
      <title>从零开始的计算机网络5-1</title>
      <link>https://blog.0pt.im/learn/1-5-1/</link>
      <pubDate>Mon, 31 Jul 2023 18:09:28 +0800</pubDate>
      <guid>https://blog.0pt.im/learn/1-5-1/</guid>
      <description>运输层概述 之前课程所介绍的计算机网络体系结构中的物理层、数据链路层以及网络层它们共同解决了将主机通过异构网络互联起来所面临的问题，实现了主机到主机的通信。&#xA;但实际上在计算机网络中进行通信的真正实体是位于通信两端主机中的进程(AP)。&#xA;如何为运行在不同主机上的应用进程提供直接的通信服务是运输层的任务，运输层协议又称为端到端协议。&#xA;运输层向高层用户屏蔽了下面网络核心的细节(如网络拓扑、所采用的路由选择协议等)，它使应用进程看见的就好像是在两个运输层实体之间有一条端到端的逻辑通信信道。&#xA;根据应用需求的不同，因特网的运输层为应用层提供了两种不同的运输协议，即面向连接的TCP和无连接的UDP，这两种协议就是本章要讨论的主要内容。</description>
    </item>
    <item>
      <title>从零开始的计算机网络4-9</title>
      <link>https://blog.0pt.im/learn/1-4-9/</link>
      <pubDate>Sun, 30 Jul 2023 18:09:28 +0800</pubDate>
      <guid>https://blog.0pt.im/learn/1-4-9/</guid>
      <description>虚拟专用网VPN与网络地址转换NAT 虚拟专用网VPN(Virtual Private Network) 利用公用的因特网作为本机构各专用网之间的通信载体，这样的专用网又称为虚拟专用网。由于IPv4地址的紧缺，一个机构能够申请到的IPv4地址数量往往远小于本机构所拥有的主机数量。因此，虚拟专用网中的各主机所分配的地址应该是本机构可自由分配的专用地址，而不是需要申请的、在因特网上使用的公有地址。&#xA;专用(私有)地址: 10.0.0.0~10.255.255.255(10/8地址块) 172.16.0.0~172.31.255.255(172.16/12地址块)&#xA;192.168.0.0~192.168.255.255(192.168/16地址块)&#xA;私有地址只能用于机构内部通信，而不能用于和因特网上的主机通信。&#xA;从逻辑上看，R1和R2好像是一条直通的点对点链路。因此也被称为IP隧道技术&#xA;同一机构内不同部门的内部网络所构成的虚拟专用网VPN又称为内联网VPN 有时一个机构的VPN需要有某些外部机构（通常就是合作伙伴）参加进来。这样的VPN就称为外联网VPN，在外地工作的员工需要访问公司内部的专用网络时，只要在任何地点接入到因特网，运行驻留在员工PC中的VPN软件，在员工的PC和公司的主机之间建立VPN隧道，即可访问专用网络中的资源。这种VPN称为远程接入VPN。&#xA;网络地址转换NAT(Network Address Translation)&#xA;虽然因特网采用了无分类编址方式来减缓IPv4地址空间耗尽的速度，但由于因特网用户数目的激增，特别是大量小型办公室网络和家庭网络接入因特网的需求不断增加，IPv4地址空间即将面临耗尽的危险仍然没有被解除。&#xA;1994年提出了一种网络地址转换NAT的方法再次缓解了IPv4地址空间即将耗尽的问题。&#xA;NAT能使大量使用内部专用地址的专用网络用户共享少量外部全球地址来访问因特网上的主机和资源。&#xA;该转换方法存在一个问题:如果NAT路由器具有N个全球IP地址，那么至多只能有N个内网主机能够同时和因特网上的主机通信。&#xA;由于绝大多数的网络应用都是使用运输层协议TCP或UDP来传送数据，因此可以利用运输层的端口号和IP地址一起进行转换。这样，用一个全球IP地址就可以使多个拥有本地地址的主机同时和因特网上的主机进行通信。这种将端口号和IP地址一起进行转换的技术叫作网络地址与端口号转换NAPT(Network Address and Port Translation)。&#xA;外网主机不能首先对内网中的主机发起通信，因为NAPT转换表里找不到相应记录。&#xA;内网主机不能直接充当因特网服务器。&#xA;对于一些P2P网络应用，需要外网主机主动与内网主机进行通信，在通过NAT时会遇到问题,需要网络应用自己使用一些特殊的NAT穿越技术来解决问题。&#xA;另外，由于NAT对外网屏蔽了内网主机的网络地址，能为内网的主机提供一定的安全保护。</description>
    </item>
    <item>
      <title>从零开始的计算机网络4-8</title>
      <link>https://blog.0pt.im/learn/1-4-8/</link>
      <pubDate>Sat, 29 Jul 2023 18:09:28 +0800</pubDate>
      <guid>https://blog.0pt.im/learn/1-4-8/</guid>
      <description>网际控制报文协议ICMP 为了更有效地转发lP数据报和提高交付成功的机会，在网际层使用了网际控制报文协议ICMP(Internet Control Message Protocol)。&#xA;主机或路由器使用ICMP来发送差错报告报文和询问报文。&#xA;ICMP报文被封装在IP数据报中发送。&#xA;ICMP差错报告报文共有以下五种:&#xA;终点不可达&#xA;源点抑制&#xA;时间超过&#xA;参数问题&#xA;改变路由(重定向)&#xA;1.终点不可达&#xA;当路由器或主机不能交付数据报时，就向源点发送终点不可达报文。&#xA;具体可再根据ICMP的代码字段细分为目的网络不可达目的主机不可达、目的协议不可达、目的端口不可达、目的网络未知、目的主机未知等13种错误。&#xA;2.源点抑制&#xA;当路由器或主机由于拥塞而丢弃数据报时，就向源点发送源点抑制报文，使源点知道应当把数据报的发送速率放慢。&#xA;3.时间超过&#xA;当路由器收到一个目的IP地址不是自己的IP数据报，会将其生存时间TTL字段的值减1。 若结果不为0，则将该IP数据报转发出去;若结果为O，除丢弃该IP数据报外，还要向源点发送时间超过报文。 另外，当终点在预先规定的时间内不能收到一个数据报的全部数据报片时，就把已收到的数据报片都丢弃，也会向源点发送时间超过报文。&#xA;4.参数问题&#xA;当路由器或目的主机收到IP数据报后，根据其首部中的检验和字段发现首部在传输过程中出现了误码就丢弃该数据报，并向源点发送参数问题报文。&#xA;5.改变路由（重定向）&#xA;路由器把改变路由报文发送给主机，让主机知道下次应将数据报发送给另外的路由器（可通过更好的路由)。&#xA;以下情况不应发送ICMP差错报告报文:&#xA;对ICMP差错报告报文不再发送ICMP差错报告报文&#xA;对第一个分片的数据报片的所有后续数据报片都不发送ICMP差错报告报文&#xA;对具有多播地址的数报都不发送ICMP差错报告报文&#xA;对具有特殊地址(如127.0.0.0或0.0.0.0)的数据报不发送ICMP差错报告报文&#xA;常用的ICMP询问报文有以下两种:&#xA;回送请求和回答 ICMP回送请求报文是由主机或路由器向一个特定的目的主机发出的询问。收到此报文的主机必须给源主机或路由器发送ICMP回送回答报文。这种询问报文用来测试目的站是否可达及了解其有关状态。&#xA;时间戳请求和回答 ICMP时间戳请求报文是请某个主机或路由器回答当前的日期和时间。在ICMP时间戳回答报文中有一个32位的字段，其中写入的整数代表从1900年1月1日起到当前时刻一共有多少秒。这种询问报文用来进行时钟同步和测量时间。&#xA;ICMP应用举例&#xA;1.分组网间探测PING(Packet InterNet Groper)&#xA;用来测试主机或路由器间的连通性&#xA;应用层直接使用网际层的ICMP(没有通过运输层的TCP或UDP)&#xA;使用ICMP回送请求和回答报文&#xA;就是ping&#xA;2.跟踪路由traceroute&#xA;用来测试IP数据报从源主机到达目的主机要经过哪些路由器&#xA;Windows版本 tracert命令 应用层直接使用网际层ICMP 使用了ICMP回送请求和回答报文以及差错报告报文&#xA;Unix版本 traceroute命令 在运输层使用UDP协议 仅使用ICMP差错报告报文&#xA;跟踪路由traceroute原理&#xA;主机依次发送TTL=1、2、3、4&amp;hellip;的回送请求报文（1个1个发，当接收到ICMP差错报告后再发下一个）&#xA;经过路由依次丢弃IP数据报并给源主机发送ICMP差错报告（时间超过)&#xA;当到达目的主机时，目的主机向源主机发送ICMP回送请求的回答报文，源主机就知道到达终点，停止发送回送请求报文。</description>
    </item>
    <item>
      <title>从零开始的计算机网络4-7</title>
      <link>https://blog.0pt.im/learn/1-4-7/</link>
      <pubDate>Fri, 28 Jul 2023 18:09:28 +0800</pubDate>
      <guid>https://blog.0pt.im/learn/1-4-7/</guid>
      <description>IPv4数据报的首部格式 首部长度&#xA;占4比特，表示IP数据报首部的长度。该字段的取值以4字节为单位。&#xA;最小十进制取值为5，表示IP数据报首部只有20字节固定部分;&#xA;最大十进制取值为15，表示IP数据报首部包含20字节固定部分和最大40字节可变部分; 可选字段&#xA;长度从1个字节到40个字节不等。用来支持排错、测量及安全等措施。&#xA;可选字段增加了IP数据报的功能，但这同时也使得IP数据报的首部长度成为可变的。这就增加了每一个路由器处理IP数据报的开销。实际上可选字段很少被使用。&#xA;填充字段&#xA;确保首部长度为4字节的整数倍。使用全0进行填充。 区分服务&#xA;占8比特，用来获得更好的服务。&#xA;该字段在旧标准中叫作服务类型，但实际上一直没有被使用过。1998年，因特网工程任务组IETF把这个字段改名为区分服务。利用该字段的不同数值可提供不同等级的服务质量。&#xA;只有在使用区分服务时，该字段才起作用。一般情况下都不使用该字段。&#xA;总长度&#xA;占16比特，表示IP数据报的总长度（首部+数据载荷)。&#xA;最大取值为十进制的65535，以字节为单位。&#xA;举例：（）为二进制 首部长度=(0101) x 4 = 5 x 4 = 20(字节)&#xA;总长度=(0000001111111100) = 1020(字节)&#xA;数据载荷长度=总长度-首部长度=1020 - 20 = 1000(字节)&#xA;标识&#xA;占16比特，属于同一个数据报的各分片数据报应该具有相同的标识。&#xA;IP软件维持一个计数器，每产生一个数据报，计数器值加1，并将此值赋给标识字段。&#xA;标志&#xA;占3比特，各比特含义如下:&#xA;DF位:1表示不允许分片;0表示允许分片&#xA;MF位:1表示“后面还有分片”;0表示“这是最后一个分片”&#xA;保留位:必须为0&#xA;片偏移&#xA;占13比特，指出分片数据报的数据载荷部分偏移其在原数据报的位置有多少个单位。&#xA;片偏移以8个字节为单位。&#xA;举例：对IPv4数据报进行分片&#xA;片偏移除8是因为片偏移是以字节做单位。&#xA;生存时间TTL&#xA;占8比特，最初以秒为单位，最大生存周期为255秒;路由器转发IP数据报时，将IP数据报首部中的该字段的值减去IP数据报在本路由器上所耗费的时间，若不为0就转发，否则就丢弃。&#xA;现在以“跳数”为单位，路由器转发IP数据报时，将IP数据报首部中的该字段的值减1，若不为0就转发，否则就丢弃。&#xA;防止IP数据报在网络中永久兜圈。（前面有提到）&#xA;协议&#xA;占8比特，指明IPv4数据报的数据部分是何种协议数据单元。常用的一些协议和相应的协议字段值如下。 协议名称 ICMP IGMP TCP UDP lPv6 OSPF 协议字段值 1 2 6 17 41 89 首部检验和&#xA;占16比特，用来检测首部在传输过程中是否出现差错。比CRC检验码简单，称为因特网检验和.</description>
    </item>
    <item>
      <title>从零开始的计算机网络4-6</title>
      <link>https://blog.0pt.im/learn/1-4-6/</link>
      <pubDate>Thu, 27 Jul 2023 18:09:28 +0800</pubDate>
      <guid>https://blog.0pt.im/learn/1-4-6/</guid>
      <description>路由选择协议概述 静态路由选择&#xA;由人工配置的网络路由、默认路由、特定主机路由、黑洞路由等都属于静态路由。&#xA;这种人工配置方式简单、开销小。&#xA;但不能及时适应网络状态(流量、拓扑等)的变化。&#xA;一般只在小规模网络中采用。&#xA;动态路由选择&#xA;路由器通过路由选择协议自动获取路由信息。&#xA;比较复杂、开销比较大。&#xA;能较好地适应网络状态的变化。&#xA;适用于大规模网络。&#xA;因特网所采用的路由选择协议的主要特点&#xA;自适应：动态路由选择，能较好地适应网络状态的变化&#xA;分布式：路由器之间交换路由信息&#xA;分层次：将整个因特网划分为许多较小的自治系统AS(Autonomous System)&#xA;因特网采用分层次的路由选择协议&#xA;域间路由选择采用外部网关协议EGP&#xA;域内路由选择采用内部网关协议IGP&#xA;只是路由选择协议的分类名称，不是具体的路由选择协议。网关一词是因为在早期&#xA;常见的路由选择协议&#xA;路由选择协议&#xA;内部网关协议IGP&#xA;路由信息协议RIP 基于距离向量，RIP在因特网上最早使用&#xA;内部网关路由协议IGRP 基于距离向量，是思科早期私有的协议，现在已被EIGRP取代&#xA;增强型内部网关路由协议EIGRP 思科私有的，用来取代IGRP的混合型路由协议(结合距离向量和链路状态)&#xA;开放式最短路径优先OSPF 基于链路状态，在各种网络中广泛使用&#xA;中间系统到中间系统IS-IS 基于链路状态，是ISP骨干网上最长常用的IGP协议&#xA;外部网关协议EGP&#xA;边界网关协议BGP 路由器的基本结构&#xA;路由表一般仅包含从目的网络到下一跳的映射&#xA;路由表需要对网络拓扑变化的计算最优化&#xA;转发表是从路由表得出的 转发表的结构应当使查找过程最优化&#xA;为方便理解，不严格区分路由表和转发表。&#xA;路由信息协议RIP的基本工作原理 路由信息协议RIP(Routing Information Protocol)是内部网关协议IGP中最先得到广泛使用的协议之一，其相关标准文档为RFC 1058。&#xA;RIP要求自治系统AS内的每一个路由器都要维护从它自己到AS内其他每一个网络的距离记录。这是一组距离，称为“距离向量D-V(Distance-Vector)”。&#xA;RIP使用跳数(Hop Count)作为度量(Metric)来衡量到达目的网络的距离。&#xA;路由器到直连网络的距离定义为1。&#xA;路由器到非直连网络的距离定义为所经过的路由器数加1。&#xA;允许一条路径最多只能包含15个路由器。“距离”等于16时相当于不可达。因此，RIP只适用于小型互联网。&#xA;RIP认为好的路由就是“距离短”的路由，也就是所通过路由器数量最少的路由。当到达同一目的网络有多条“距离相等”的路由时，可以进行等价负载均衡。&#xA;RIP包含以下三个要点:&#xA;和谁交换信息 仅和相邻路由器交换信息&#xA;交换什么信息 自己的路由表&#xA;何时交换信息 周期性交换（例如每30秒)&#xA;RIP基本工作过程&#xA;路由器刚开始工作时，只知道自己到直连网络的距离为1。&#xA;每个路由器仅和相邻路由器周期性地交换并更新路由信息。&#xA;若干次交换和更新后，每个路由器都知道到达本AS内各网络的最短距离和下一跳地址，称为收敛。&#xA;RIP的路由条目的更新规则&#xA;C将其路由表发给D，结果D改造，对D原有路由表进行更新。&#xA;例题：某自治系统内采用RIP协议，若该自治系统内的路由器R1收到其邻居路由器R2的距离矢量，距离矢量中包含信息&amp;lt; net1,16 &amp;gt;，则能得出的结论是&#xA;A.R2可以经过R1到达net1，跳数为17 B.</description>
    </item>
    <item>
      <title>从零开始的计算机网络4-5</title>
      <link>https://blog.0pt.im/learn/1-4-5/</link>
      <pubDate>Wed, 26 Jul 2023 18:09:28 +0800</pubDate>
      <guid>https://blog.0pt.im/learn/1-4-5/</guid>
      <description>静态路由配置及其可能产生的路由环路问题 静态路由配置是指用户或网络管理员使用路由器的相关命令给路由器人工配置路由表。&#xA;这种人工配置方式简单、开销小。但不能及时适应网络状态(流量、拓扑等)的变化。&#xA;一般只在小规模网络中采用。&#xA;使用静态路由配置可能出现以下导致产生路由环路的错误&#xA;配置错误&#xA;聚合了不存在的网络&#xA;网络故障&#xA;假设R1要转发给192.168.2.0/24，应该转发给R2的接口0。但是R1路由表除了直连自动识别外，没有R2接口0，换句话说，R1不知道目的网络的存在。&#xA;因此，我们可以使用路由器的相关配置命令，给R1添加一条到达该目的网络的路由条目。&#xA;该路由条目是是我们人工设置的静态路由。&#xA;默认路由为0.0.0.0/0，对于本例，下一跳为R2的接口0&#xA;人工配置默认路由，减少人工配置工作量，可以删了上一个静态路由。&#xA;特定主机路由&#xA;静态路由配置错误导致路由环路&#xA;R2要转发IP数据报给192.168.1.0/24，但是把静态路由配错了如图所示。如何会发给R3，R3检查路由表，把该数据报发给R2,R2检查路由表，又发给R3，形成路由环路。&#xA;为了防止IP数据报在路由环路中永久兜圈，在IP数据报首部设有生存时间TTL字段。&#xA;IP数据报进入路由器后，TTL字段的值减1。若TTL的值不等于0，则被路由器转发，否则被丢弃。&#xA;聚合了不存在的网络而导致的路由环路&#xA;先把黑洞路由当作不存在。R2要转发给192.168.2.0/24，检查路由表，发现192.168.0.0/22的聚合路由，于是发送给R1，R1检查路由表，匹配192.168.2.0/24，于是发送给192.168.2.0/24。&#xA;但是，聚合路由192.168.0.0/22包含4个IP，其中2个还不存在，试想，当R2要转发给一个不存在的IP192.168.0.0/24，检查路由表，发现192.168.0.0/22的聚合路由，于是发送给R1，R1检查路由表，只能匹配默认路由，于是发回给R2，然后就形成路由环路。&#xA;所以，我们可以在路由表中，添加所聚合的、不存在的黑洞路由。此时R2要转发给一个不存在的IP192.168.0.0/24，检查路由表，发现192.168.0.0/22的聚合路由与192.168.0.0/24的黑洞路由，根据最长前缀匹配，选择到黑洞路由，之后，该数据报被丢弃，相当于进入黑洞，有去无回。&#xA;网络故障导致的路由环路&#xA;当图示网络故障，路由表会自动删除所直连的路由记录。此时R1要发送给192.168.1.0/24，检查路由表，发现192.168.0.0/22的聚合路由，于是发送给R1，R1检查路由表，只能匹配默认路由，于是发回给R2，然后就形成路由环路。&#xA;所以，我们同样也可以添加黑洞路由。可以设置黑洞路由在故障发送后路由记录被删除后自动生效。</description>
    </item>
    <item>
      <title>从零开始的计算机网络4-4</title>
      <link>https://blog.0pt.im/learn/1-4-4/</link>
      <pubDate>Tue, 25 Jul 2023 18:09:28 +0800</pubDate>
      <guid>https://blog.0pt.im/learn/1-4-4/</guid>
      <description>数据报的发送和转发过程 IP数据报的发送和转发过程包含以下两部分:&#xA;主机发送IP数据报&#xA;路由器转发IP数据报&#xA;为了将重点放在TCP/IP协议栈的网际层发送和转发IP数据报的过程上，在之后的举例中，我们忽略使用ARP协议来获取目的主机或路由器接口的MAC地址的过程以及以太网交换机自学习和转发帧的过程。&#xA;举例：&#xA;假设C要发送数据给F，源主机如何知道目的主机是否与自己在同一个网络中？通过想与运算。&#xA;C怎么知道R的存在？&#xA;指定默认网关。&#xA;假设A发送数据给D&#xA;路由器是如何转发呢？&#xA;检查lP数据报首部是否出错:若出错，则直接丢弃该lIP数据报并通告源主机若没有出错，则进行转发&#xA;根据lP数据报的目的地址在路由表中查找匹配的条目:若找到匹配的条目，则转发给条目中指示的下一跳若找不到，则丢弃该lP数据报并通告源主机&#xA;将目的地址与目的网络相应的地址掩码进行相与，得到的结果为目的网络，即匹配。&#xA;路由器隔离广播域，就算广播数据报的目的地址为其他网络，也不转发。&#xA;例题：下列网络设备中，能够抑制广播风暴的是&#xA;1中继器 2集线器 3网桥 4路由器&#xA;A.仅1和2 B.仅3 C.仅3和4 D.仅4&#xA;解析：&#xA;中继器和集线器工作在物理层，既不隔离冲突域也不隔离广播域。&#xA;网桥和交换机(多端口网桥）工作在数据链路层，可以隔离冲突域，不能隔离广播域。&#xA;路由器工作在网络层，既隔离冲突域，也隔离广播域。&#xA;选D&#xA;例题：下列关于IP路由器概念的描述中，正确的是&#xA;1运行路由协议，设置路由表&#xA;2监测到拥塞时，合理丢弃IP分组&#xA;3对收到的IP分组头进行差错校验，确保传输的IP分组不丢失&#xA;4根据收到的IP分组的目的IP地址，将其转发到合适的输出线路上&#xA;A.仅34 B.仅123 C.仅124 D.1234&#xA;解析：&#xA;IP路由器工作在TCP/IP体系结构的网际层(或称IP层)，TCP/IP体系结构的网际层并不负责可靠传输，也就是不能确保传输的IP分组不丢失。&#xA;IP路由器对收到的lP分组头进行差错校验，当发现错误时会丢弃该IP分组并向源主机发送ICMP差错报告报文(类型为参数错误)。&#xA;综上所述，题目中的描述ⅢI是错误的，利用排除法可知选项C正确。题目中的其他描述项都是正确的。&#xA;例题：&#xA;某网络拓扑如下图所示，其中路由器内网接口、DHCP服务器、WWW服务器与主机1均采用静态IP地址配置，相关地址信息见图中标注;主机2~主机N通过DHCP服务器动态获取IP地址等配置信息。&#xA;若主机1的子网掩码和默认网关分别配置为255.255.255.0和111.123.15.2，则该主机是否能访问WWW服务器?是否能访问Internet?请说明理由。&#xA;解析：主机1可以访问WWW服务器。从IP地址与子网掩码配置以及物理连接方面看，主机1和wwW服务器在同一网络中。&#xA;主机1不能访问Internet，因为它的默认网关错误配置成了DHCP服务器的IP地址,DHCP服务器不具备路由器的功能,无法将IP分组转发到Internet。</description>
    </item>
    <item>
      <title>从零开始的计算机网络4-3</title>
      <link>https://blog.0pt.im/learn/1-4-3/</link>
      <pubDate>Mon, 24 Jul 2023 18:09:28 +0800</pubDate>
      <guid>https://blog.0pt.im/learn/1-4-3/</guid>
      <description>IPv4地址概述 在TCP/IP体系中，IP地址是一个最基本的概念，我们必须把它弄清楚。&#xA;IPv4地址就是给因特网(Internet)上的每一台主机(或路由器）的每一个接口分配一个在全世界范围内是唯一的32比特的标识符。&#xA;IP地址由因特网名字和数字分配机构ICANN(Internet Corporation for Assigned Names and Numbers)进行分配。&#xA;我国用户可向亚太网络信息中心APNIC(Asia Pacific Network Information Center)申请IP地址，需要缴费。&#xA;2011年2月3日，互联网号码分配管理局IANA(由ICANN行使职能）宣布，IPv4地址已经分配完毕。&#xA;我国在2014至2015年也逐步停止了向新用户和应用分配IPv4地址。同时全面开展商用部署&#xA;IPv4地址的编址方法经历了如下三个历史阶段:&#xA;1981年 分类编址&#xA;1985年 划分子网&#xA;1993年 无分类编址&#xA;32比特的IPv4地址不方便阅读、记录以及输入等，因此IPv4地址采用点分十进制表示方法以方便用户使用。&#xA;例题：请将以下这些32比特的IPv4地址转换为点分十进制形式。&#xA;(1) 00001010 11111110 00001111 11110000&#xA;(2)10101100 00010000 10111111 11110111&#xA;(3)11000000 10101000 10100101 00000111&#xA;答案：&#xA;(1)10.254.15.240 (2)172.16.191.247 (3)192.168.165.7&#xA;二进制与十进制的转换自己学，较简单&#xA;分类编址的IPv4地址 注意事项:&#xA;只有A类、B类和C类地址可分配给网络中的主机或路由器的各接口&#xA;主机号为“全0”的地址是网络地址，不能分配给主机或路由器的各接口&#xA;主机号为“全1”的地址是广播地址，不能分配给主机或路由器的各接口&#xA;A类地址 可指派的网络数量为2^(8-1) - 2 = 126(减2的原因是除去最小网络号0和最大网络号127)&#xA;每个网络中可分配的IP地址数量为2^24 -2= 16777214(减2的原因是除去主机号为全0的网络地址和全1的广播地址)&#xA;B类地址 可指派的网络数量为2^(16-2) =16384&#xA;每个网络中可分配的IP地址数量为2^16 - 2 = 65534(减2的原因是除去主机号为全0的网络地址和全1的广播地址)&#xA;注意:有些教材中指出128.0是保留网络号，B类第一个可指派的网络号为128.1。但根据2002年9月发表的RFC3330文档，128.0网络号已经可以分配了。&#xA;C类地址 可指派的网络数量为2^(24-3) = 2097152</description>
    </item>
    <item>
      <title>从零开始的计算机网络4-2</title>
      <link>https://blog.0pt.im/learn/1-4-2/</link>
      <pubDate>Sun, 23 Jul 2023 18:09:28 +0800</pubDate>
      <guid>https://blog.0pt.im/learn/1-4-2/</guid>
      <description>网络层提供的两种服务 面向连接的虚电路服务 可靠通信由网络来保证&#xA;必须建立网络层的连接——虚电路VC(Virtual Circuit)&#xA;通信双方沿着已建立的虚电路发送分组&#xA;目的主机的地址仅在连接建立阶段使用，之后每个分组的首部只需携带一条虚电路的编号(构成虚电路的每一段链路都有一个虚电路编号)。&#xA;这种通信方式如果再使用可靠传输的网络协议，就可使所发送的分组最终正确到达接收方(无差错按序到达、不丢失、不重复)。&#xA;通信结束后，需要释放之前所建立的虚电路。&#xA;很多广域分组交换网都使用面向连接的虚电路服务。例如，曾经的X.25和逐渐过时的帧中继FR、异步传输模式ATM等。&#xA;无连接的数据报服务 可靠通信应当由用户主机来保证&#xA;不需要建立网络层连接&#xA;每个分组可走不同的路径&#xA;每个分组的首部必须携带目的主机的完整地址&#xA;这种通信方式所传送的分组可能误码、丢失、重复和失序。&#xA;由于网络本身不提供端到端的可靠传输服务，这就使网络中的路由器可以做得比较简单，而且价格低廉(与电信网的交换机相比较)。&#xA;因特网采用了这种设计思想，也就是将复杂的网络处理功能置于因特网的边缘(用户主机和其内部的运输层)，而将相对简单的尽最大努力的分组交付功能置于因特网核心。</description>
    </item>
    <item>
      <title>从零开始的计算机网络4-1</title>
      <link>https://blog.0pt.im/learn/1-4-1/</link>
      <pubDate>Sat, 22 Jul 2023 18:09:28 +0800</pubDate>
      <guid>https://blog.0pt.im/learn/1-4-1/</guid>
      <description>网络层概述 网络层的主要任务是实现网络互连，进而实现数据包在各网络之间的传输。&#xA;要实现网络层任务，需要解决以下主要问题:&#xA;网络层向运输层提供怎样的服务（“可靠传输”还是“不可靠传输”）&#xA;网络层寻址问题&#xA;路由选择问题&#xA;因特网(Internet)是目前全世界用户数量最多的互联网，它使用TCP/IP协议栈。&#xA;由于TCP/IP协议栈的网络层使用网际协议IP，它是整个协议栈的核心协议，因此在TCP/IP协议栈中网络层常称为网际层。&#xA;综上所述，我们通过学习TCP/IP协议栈的网际层来学习网络层的理论知识和实践技术。</description>
    </item>
    <item>
      <title>从零开始的计算机网络3-11</title>
      <link>https://blog.0pt.im/learn/1-3-11/</link>
      <pubDate>Fri, 21 Jul 2023 18:09:28 +0800</pubDate>
      <guid>https://blog.0pt.im/learn/1-3-11/</guid>
      <description>虚拟局域网VLAN 概述 以太网交换机工作在数据链路层（也包括物理层）&#xA;使用一个或多个以太网交换机互连起来的交换式以太网，其所有站点都属于同一个广播域。&#xA;随着交换式以太网规模的扩大，广播域相应扩大。&#xA;巨大的广播域会带来很多弊端:&#xA;广播风暴&#xA;难以管理和维护&#xA;潜在的安全问题&#xA;广播风暴会浪费网络资源和各主机的CPU资源!&#xA;分割广播域的方法&#xA;使用路由器可以隔离广播域，路由器的成本较高。&#xA;虚拟局域网VLAN技术应运而生&#xA;虚拟局域网VLAN(Virtual Local Area Network)是一种将局域网内的设备划分成与物理位置无关的逻辑组的技术，这些逻辑组具有某些共同的需求。&#xA;实现机制 IEEE 802.1Q帧&#xA;IEEE 802.1Q帧（也称Dot One Q帧）对以太网的MAC帧格式进行了扩展，插入了4字节的VLAN标记&#xA;VLAN标记的最后12比特称为VLAN标识符VID，它唯一地标志了以太网帧属于哪一个VLAN.&#xA;VID的取值范围是0~4095 (0 ~2^(12-1))&#xA;0和4095都不用来表示VLAN，因此用于表示VLAN的VID的有效取值范围是1~4094。&#xA;0和4095都不用来表示VLAN，因此用于表示VLAN的VID的有效取值范围是1~4094。&#xA;802.1Q帧是由交换机来处理的，而不是用户主机来处理的。&#xA;当交换机收到普通的以太网帧时，会将其插入4字节的VLAN标记转变为802.1Q帧，简称“打标签“&#xA;当交换机转发802.1Q帧时，可能会删除其4字节VLAN标记转变为普通以太网帧，简称“去标签”&#xA;交换机的端口类型&#xA;交换机的端口类型有以下三种:&#xA;Access&#xA;Trunk&#xA;Hybrid&#xA;思科交换机没有Hybrid端口&#xA;交换机各端口的缺省VLAN ID&#xA;在思科交换机上称为Native VLAN，即本征VLAN。&#xA;在华为交换机上称为Port VLAN ID，即端口VLAN ID，简记为PVID。&#xA;Access端口一般用于连接用户计算机&#xA;Access端口只能属于一个VLAN&#xA;Access端口的PVID值与端口所属VLAN的ID相同(默认为1)&#xA;Access端口接收处理方法:&#xA;一般只接受“未打标签”的普通以太网MAC帧。根据接收帧的端口的PVID给帧“打标签”，即插入4字节VLAN标记字段，字段中的VID取值与端口的PVID取值相等。&#xA;Access端口发送处理方法:&#xA;若帧中的VID与端口的PVID相等，则“去标签”并转发该帧;否则不转发。&#xA;Trunk端口一般用于交换机之间或交换机与路由器之间的互连&#xA;Trunk端口可以属于多个VLAN&#xA;用户可以设置Trunk端口的PVID值。默认情况下，Trunk端口的PVID值为1。&#xA;Trunk端口发送处理方法:&#xA;对VID等于PVID的帧，“去标签”再转发;&#xA;对VID不等于PVID的帧，直接转发;&#xA;Trunk端口接收处理方法:&#xA;接收“未打标签”的帧，根据接收帧的端口的PVID给帧“打标签”，即插入4字节VLAN标记字段，字段中的VID取值与端口的PVID取值相等。&#xA;接收“已打标签的帧”;&#xA;例题：&#xA;上图给出了用于交换机互连的Trunk端口的PVID值的组合，试回答以下问题:&#xA;(1)主机A发送广播帧，则帧的传递过程是什么?&#xA;(2)主机C发送广播帧，则帧的传递过程是什么?&#xA;(3)从上述过程可以得出什么结论?&#xA;解析：&#xA;结论：互连的Trunk端口的PVID值不等,可能会造成转发错误!</description>
    </item>
    <item>
      <title>从零开始的计算机网络3-10</title>
      <link>https://blog.0pt.im/learn/1-3-10/</link>
      <pubDate>Thu, 20 Jul 2023 18:09:28 +0800</pubDate>
      <guid>https://blog.0pt.im/learn/1-3-10/</guid>
      <description>以太网交换机的生成树协议STP 如何提高以太网的可靠性?&#xA;添加冗余链路可以提高以太网的可靠性&#xA;但是，冗余链路也会带来负面效应——形成网络环路网络环路会带来以下问题:&#xA;广播风暴，大量消耗网络资源，使得网络无法正常转发其他数据帧;&#xA;主机收到重复的广播帧，大量消耗主机资源&#xA;交换机的帧交换表震荡（漂移)&#xA;广播帧一直循环转发。帧交换表一直变化。&#xA;以太网交换机使用生成树协议STP(Spanning Tree Protocol),可以在增加冗余链路来提高网络可靠性的同时又避免网络环路带来的各种问题。&#xA;不论交换机之间采用怎样的物理连接，交换机都能够自动计算并构建一个逻辑上没有环路的网络，其逻辑拓扑结构必须是树型的(无逻辑环路);&#xA;最终生成的树型逻辑拓扑要确保连通整个网络;&#xA;当首次连接交换机或网络物理拓扑发生变化时(有可能是人为改变或故障)，交换机都将进行生成树的重新计算。</description>
    </item>
    <item>
      <title>从零开始的计算机网络3-9</title>
      <link>https://blog.0pt.im/learn/1-3-9/</link>
      <pubDate>Wed, 19 Jul 2023 18:09:28 +0800</pubDate>
      <guid>https://blog.0pt.im/learn/1-3-9/</guid>
      <description>以太网交换机自学习和转发帧的流程 以太网交换机工作在数据链路层（也包括物理层)&#xA;以太网交换机收到帧后，在帧交换表中查找帧的目的MAC地址所对应的接口号，然后通过该接口转发帧。&#xA;以太网交换机是一种即插即用设备，刚上电启动时其内部的帧交换表是空的。随着网络中各主机间的通信，以太网交换机通过自学习算法自动逐渐建立起帧交换表。&#xA;每条记录都有自己的有效时间,到期自动删除!这是因为MAC地址与交换机接口的对应关系并不是永久性的!&#xA;例题：为简单起见，主机A，B，C，D，E，F，G，H的MAC地址与其主机名称相同。主机间依次如下通信:&#xA;1.B→C 2.D→A 3.G→D 4.E→H 5.C→B 6.F→G&#xA;请给出以太网交换机1，2，3的自学习过程以及各自最终的帧交换表的内容。&#xA;解析：&#xA;例题：以太网交换机进行转发决策时使用的PDU地址是&#xA;A.目的物理地址 B.目的IP地址 C.源物理地址 D.源lP地址&#xA;解析：PDU(Protocol Data Unit)的意思是协议数据单元，它是计算机网络体系结构中对等实体间逻辑通信的对象。&#xA;以太网交换机工作在数据链路层（也包括物理层)，它接收并转发的PDU通常称为帧。以太网交换机收到帧后，在帧交换表中查找帧的目的MAC地址所对应的接口号，然后通过该接口转发帧。&#xA;MAC地址又称为硬件地址或物理地址。请注意:不要被“物理”二字误导认为物理地址属于物理层范畴，物理地址属于数据链路层范畴。&#xA;例题：某以太网拓扑及交换机当前转发表如下图所示，主机00-e1-d5-00-23-a1向主机00-e1-d5-00-23-c1发送1个数据帧，主机OO-e1-d5-00-23-c1收到该帧后，向主机00-e1-d5-00-23-a1发送1个确认帧，交换机对这两个帧的转发端口分别是&#xA;A.{3}和{1} B.{2，3}和{1} C.{2，3}和{1，2} D.{1，2，3}和{1}&#xA;解析：自己想&#xA;选B</description>
    </item>
    <item>
      <title>从零开始的计算机网络3-8</title>
      <link>https://blog.0pt.im/learn/1-3-8/</link>
      <pubDate>Tue, 18 Jul 2023 18:09:28 +0800</pubDate>
      <guid>https://blog.0pt.im/learn/1-3-8/</guid>
      <description>集线器与交换机的区别 早期的总线型以太网&#xA;使用双绞线和集线器HUB的星型以太网&#xA;使用集线器的以太网在逻辑上仍是一个总线网，各站共享总线资源，使用的还是CSMA/CD协议;&#xA;集线器只工作在物理层，它的每个接口仅简单地转发比特，不进行碰撞检测(由各站的网卡检测);&#xA;集线器一般都有少量的容错能力和网络管理功能。例如，若网络中某个网卡出了故障，不停地发送帧。此时，集线器可以检测到这个问题，在内部断开与出故障网卡的连线，使整个以太网仍然能正常工作。&#xA;使用集线器HUB在物理层扩展以太网&#xA;以太网交换机&#xA;由此看出，交换机功能更强大。&#xA;前提：1.忽略ARP过程。 2.假设交换机的帧交换表已“学习好了&amp;quot;。&#xA;以太网交换机通常都有多个接口。每个接口都可以直接与一台主机或另一个以太网交换机相连。一般都工作在全双工方式。&#xA;以太网交换机具有并行性，能同时连通多对接口，使多对主机能同时通信，无碰撞(不使用CSMA/CD协议)。&#xA;以太网交换机一般都具有多种速率的接口，例如:&#xA;10Mb/s、100Mb/s、1Gb/s、10Gb/s接口的多种组合。以太网交换机工作在数据链路层（也包括物理层），它收到帧后，在帧交换表中查找帧的目的MAC地址所对应的接口号，然后通过该接口转发帧。&#xA;以太网交换机是一种即插即用设备，其内部的帧交换表是通过自学习算法自动地逐渐建立起来的。&#xA;帧的两种转发方式:&#xA;1.存储转发&#xA;2.直通交换:采用基于硬件的交叉矩阵（交换时延非常小，但不检查帧是否有差错)&#xA;小结：&#xA;集线器HUB&#xA;早期以太网的互连设备&#xA;工作在OSI体系结构的物理层&#xA;对接收到的信号进行放大、转发&#xA;使用集线器作为互连设备的以太网仍然属于共享总线式以太网。集线器互连起来的所有主机共享总线带宽，属于同一个碰撞域和广播域。&#xA;交换机SWITCH&#xA;目前以太网中使用最广泛的互连设备&#xA;工作在OSI体系结构的数据链路层（也包括物理层）&#xA;根据MAC地址对帧进行转发&#xA;使用交换机作为互连设备的以太网，称为交换式以太网。交换机可以根据MAC地址过滤帧，即隔离碰撞域。&#xA;交换机的每个接口是一个独立的碰撞域&#xA;交换机隔离碰撞域但不隔离广播域（VLAN除外）</description>
    </item>
    <item>
      <title>从零开始的计算机网络3-7</title>
      <link>https://blog.0pt.im/learn/1-3-7/</link>
      <pubDate>Mon, 17 Jul 2023 18:09:28 +0800</pubDate>
      <guid>https://blog.0pt.im/learn/1-3-7/</guid>
      <description>MAC地址、IP地址以及ARP协议 MAC地址是以太网的MAC子层所使用的地址; 数据链路层&#xA;IP地址是TCP/IP体系结构网际层所使用的地址; 网际层&#xA;ARP协议属于TCP/IP体系结构的网际层，其作用是已知设备所分配到的IP地址，使用ARP协议可以通过该IP地址获取到设备的MAC地址; 网际层&#xA;尽管IP地址和ARP协议属于TCP/IP体系结构的网际层（而不属于数据链路层)，但是它们与MAC地址存在一定的关系，并且我们日常的网络应用都离不开MAC地址、IP地址以及ARP协议。因此，我们将这三者放在一起讨论。&#xA;MAC地址 使用点对点信道的数据链路层不需要使用地址&#xA;使用广播信道的数据链路层必须使用地址来区分各主机&#xA;当多个主机连接在同一个广播信道上，要想实现两个主机之间的通信，则每个主机都必须有一个唯一的标识,即一个数据链路层地址;&#xA;在每个主机发送的帧中必须携带标识发送主机和接收主机的地址。由于这类地址是用于媒体接入控制MAC(Media Access Control)，因此这类地址被称为MAC地址;&#xA;MAC地址一般被固化在网卡（网络适配器）的电可擦可编程只读存储器EEPROM中，因此MAC地址也被称为硬件地址;&#xA;MAC地址有时也被称为物理地址。请注意:这并不意味着MAC地址属于网络体系结构中的物理层!&#xA;一般情况下，用户主机会包含两个网络适配器:有线局域网适配器（有线网卡）和无线局域网适配器（无线网卡)。每个网络适配器都有一个全球唯一的MAC地址。而交换机和路由器往往拥有更多的网络接口，所以会拥有更多的MAC地址。综上所述，严格来说，MAC地址是对网络上各接口的唯一标识，而不是对网络上各设备的唯一标识。&#xA;IEEE 802局域网的MAC地址格式&#xA;IEEE 802局域网的MAC地址发送顺序&#xA;单播MAC地址举例&#xA;在帧首部的目的地址字段填入C的MAC地址，源地址字段填入自己的MAC地址，再加上帧首部的其他字段，数据载荷以及帧尾部，就构成了该单播帧。&#xA;广播MAC地址举例&#xA;在帧首部的目的地址字段填入广播地址，源地址字段填入自己的MAC地址，再加上帧首部的其他字段，数据载荷以及帧尾部，就构成了该单播帧。&#xA;判断一个地址首部是不是多播地址&#xA;随机MAC地址&#xA;棱镜门事件，斯诺登爆料，美国国家安全局有一套系统，通过监视电子设备的MAC地址，来跟踪城市中每个人的行动。&#xA;随后，苹果，window10，安卓6.0，内核版本3.18的linux开始提供随机MAC地址的功能。目前大部分移动设备都采取了随机MAC地址的功能。&#xA;IP地址 IP地址是因特网(Internet)上的主机和路由器所使用的地址，用于标识两部分信息:&#xA;网络编号:标识因特网上数以百万计的网络&#xA;主机编号:标识同一网络上不同主机(或路由器各接口)&#xA;很显然，之前介绍的MAC地址不具备区分不同网络的功能。&#xA;如果只是一个单独的网络，不接入因特网，可以只使用MAC地址(这不是一般用户的应用方式)。&#xA;如果主机所在的网络要接入因特网，则IP地址和MAC地址都需要使用。&#xA;从网络体系结构看IP地址与MAC地址&#xA;数据包转发过程中IP地址与MAC地址的变化情况&#xA;数据包转发过程中源IP地址和目的IP地址保持不变;&#xA;数据包转发过程中源MAC地址和目的MAC地址逐个链路(或逐个网络)改变.&#xA;由ARP协议解决&#xA;ARP协议 B知道C的IP地址 B不知道C的MAC地址 B的数据链路层封装MAC帧时,无法填写目的MAC地址!&#xA;每一个主机都有ARP高速缓存表&#xA;类型：&#xA;动态:自动获取，生命周期默认为两分钟;&#xA;静态:手工设置，不同操作系统下的生命周期不同，例如系统重启后不存在或系统重启后依然有效。&#xA;第一行即对应主机A的地址。但是没有C的相关地址信息，使用需要发送ARP请求报文。&#xA;主机C&#xA;1.将B的IP地址与MAC地址记录到自己的ARP高速缓存表中; 2给B发送ARP响应，以告知自己的MAC地址。&#xA;ARP不能跨网络使用，对于本例，只能逐链路使用。</description>
    </item>
    <item>
      <title>从零开始的计算机网络3-6</title>
      <link>https://blog.0pt.im/learn/1-3-6/</link>
      <pubDate>Sun, 16 Jul 2023 18:09:28 +0800</pubDate>
      <guid>https://blog.0pt.im/learn/1-3-6/</guid>
      <description>媒体接入控制的基本概念 共享信道要着重考虑的一个问题就是如何协调多个发送和接收站点对一个共享传输媒体的占用，即媒体接入控制MAC(Medium Access Control)。&#xA;随着技术的发展，交换技术的成熟和成本的降低，具有更高性能的使用点对点链路和链路层交换机的交换式局域网在有线领域已完全取代了共享式局域网，但由于无线信道的广播天性，无线局域网仍然使用的是共享媒体技术。&#xA;静态划分信道 信道复用&#xA;复用(Multiplexing）是通信技术中的一个重要概念。复用就是通过一条物理线路同时传输多路用户的信号。&#xA;当网络中传输媒体的传输容量大于多条单一信道传输的总通信量时，可利用复用技术在一条物理线路上建立多条通信信道来充分利用传输媒体的带宽。&#xA;1.频分复用FDM&#xA;频分复用的所有用户同时占用不同的频带资源并行通信。&#xA;2.时分复用TDM&#xA;时分复用的所有用户在不同的时间占用同样的频带宽度。&#xA;3.波分复用（光的频分复用）&#xA;4.码分复用&#xA;码分复用CDM是另一种共享信道的方法。实际上，由于该技术主要用于多址接入，人们更常用的名词是码分多址CDMA(Code Division Multiple Access)。&#xA;同理，频分复用FDM和时分复用TDM同样可用于多址接入，相应的名词是频分多址FDMA(Frequency Division Multiple Access)和时分多址TDMA(Time Division Multiple Access)。在本课程中，我们不严格区分复用与多址的概念。可简单理解如下:&#xA;复用是将单一媒体的频带资源划分成很多子信道，这些子信道之间相互独立，互不干扰。从媒体的整体频带资源上看，每个子信道只占用该媒体频带资源的一部分。&#xA;多址（更确切地应该称为多点接入）处理的是动态分配信道给用户。这在用户仅仅暂时性地占用信道的应用中是必须的，而所有的移动通信系统基本上都属于这种情况。相反，在信道永久性地分配给用户的应用中，多址是不需要的(对于无线广播或电视广播站就是这样)。&#xA;某种程度上，FDMA、TDMA、CDMA可以分别看成是FDM、TDM、CDM的应用。&#xA;与FDM和TDM不同，CDM的每一个用户可以在同样的时间使用同样的频带进行通信。由于各用户使用经过特殊挑选的不同码型，因此各用户之间不会造成干扰。&#xA;CDM最初是用于军事通信的，因为这种系统所发送的信号有很强的抗干扰能力，其频谱类似于白噪声，不易被敌人发现。&#xA;随着技术的进步，CDMA设备的价格和体积都大幅度下降，因而现在已广泛用于民用的移动通信中。&#xA;在CDMA中，每一个比特时间再划分为m个短的间隔，称为码片(Chip)。通常m的值是64或128。为了简单起见，在后续的举例中，我们假设m为8。&#xA;使用CDMA的每一个站被指派一个唯一的m bit码片序列(Chip Sequence)&#xA;一个站如果要发送比特1，则发送它自己的m bit码片序列;&#xA;一个站如果要发送比特0，则发送它自己的m bit码片序列的二进制反码;&#xA;例：指派给CDMA系统中某个站点的码片序列为00011011&#xA;发送比特1:发送自己的码片序列00011011&#xA;发送比特0:发送自己的码片序列的二进制反码11100100&#xA;为了方便，我们按惯例将码片序列中的0写为-1，将1写为+1。&#xA;则该站点的码片序列是(-1 -1 -1 +1 +1 -1 +1 +1)。&#xA;这种通信方式称为直接序列扩频，DSSS。&#xA;码片序列的挑选原则如下:&#xA;分配给每个站的码片序列必须各不相同，实际常采用伪随机码序列。&#xA;分配给每个站的码片序列必须相互正交(规格化内积为0)。正交就是向量互相垂直。&#xA;令向量S表示站S的码片序列，令向量T表示其他任何站的码片序列。两个不同站S和T的码片序列正交，就是向量S和T的规格化内积为0:&#xA;向量S相当于m维向量。&#xA;例题：共有4个站进行CDMA通信，这4个站的码片序列分别为:&#xA;A: (-1 -1-1 +1 +1 -1+1 +1) B: (-1 -1+1-1+1 +1 +1-1)</description>
    </item>
    <item>
      <title>从零开始的计算机网络3-5</title>
      <link>https://blog.0pt.im/learn/1-3-5/</link>
      <pubDate>Sat, 15 Jul 2023 18:09:28 +0800</pubDate>
      <guid>https://blog.0pt.im/learn/1-3-5/</guid>
      <description>点对点协议PPP 点对点协议PPP(Point-to-Point Protocol)是目前使用最广泛的点对点数据链路层协议。&#xA;PPP协议是因特网工程任务组IETF在1992年制定的。经过1993年和1994年的修订，现在的PPP协议已成为因特网的正式标准[RFC1661,RFC1662]。&#xA;用户连接到ISP就是通过PPP协议。&#xA;PPP协议为在点对点链路传输各种协议数据报提供了一个标准方法，主要由以下三部分构成:&#xA;对各种协议数据报的封装方法（封装成帧）&#xA;链路控制协议LCP，用于建立、配置以及测试数据链路的连接&#xA;一套网络控制协议NCPs，其中的每一个协议支持不同的网络层协议&#xA;帧格式 标志（Flag）字段: PPP帧的定界符，取值为0x7E&#xA;地址（Address）字段:取值为OxFF，预留（目前没有什么作用）&#xA;控制(Control)字段:取值为Ox03，预留（目前没有什么作用）&#xA;协议(Protocol）字段:指明帧的数据部分送交哪个协议处理&#xA;取值Ox0021表示:帧的数据部分为IP数据报&#xA;取值OxC021表示:帧的数据部分为LCP分组&#xA;取值0x8021表示:帧的数据部分为NCP分组&#xA;帧检验序列（Frame Check Sequence）字段:CRC计算出的校验位&#xA;透明传输 面向字节的异步链路采用插入转义字符的字节填充法&#xA;发送方的处理：&#xA;出现的每一个7E(PPP帧的定界符）字节转变成2字节序列(7D,5E)。&#xA;出现的每一个7D(转义字符)字节转变成2字节序列(7D,5D)。&#xA;出现的每一个ASCII码控制字符（数值小于0x20的字符)，则在该字符前面插入一个7D字节，同时将该字符的编码加上0x20。&#xA;接收方的处理：进行反变换即可恢复出原来的帧的数据部分。&#xA;面向比特的同步链路采用插入比特0的比特填充法&#xA;发送方的处理:&#xA;对帧的数据部分进行扫描（一般由硬件实现)。只要发现5个连续的比特1，则立即填充1个比特0。&#xA;接收方的处理:&#xA;对帧的数据部分进行扫描（一般由硬件实现)。只要发现5个连续的比特1，就把其后的1个比特0删除。&#xA;差错检测 RFC 1662的附录部分给出了FCS的计算方法的C语言实现(查表法)&#xA;接收方每收到一个PPP帧，就进行CRC检验。若CRC检验正确，就收下这个帧;反之，就丢弃这个帧。使用PPP的数据链路层向上不提供可靠传输服务。&#xA;工作状态 PPP链路的两端互相交换网络层特定的NCP分组。&#xA;如果在PPP链路上运行的是IP，则使用IP控制协议IPCP来对PPP链路的每一端配置P模块(如分配IP地址)。</description>
    </item>
    <item>
      <title>从零开始的计算机网络3-4</title>
      <link>https://blog.0pt.im/learn/1-3-4/</link>
      <pubDate>Fri, 14 Jul 2023 18:09:28 +0800</pubDate>
      <guid>https://blog.0pt.im/learn/1-3-4/</guid>
      <description>可靠传输 基本概念 使用差错检测技术（例如循环冗余校验CRC），接收方的数据链路层就可检测传输过程中是否产生了误码（比特错误）。&#xA;数据链路层向上层提供的服务类型&#xA;不可靠传输服务：仅仅丢弃有误码的帧，其他什么也不做;&#xA;可靠传输服务：想办法实现发送端发送什么，接收端就收到什么。&#xA;一般情况下，有线链路的误码率比较低，为了减小开销，并不要求数据链路层向上提供可靠传输服务。即使出现了误码，可靠传输的问题由其上层处理。&#xA;无线链路易受干扰，误码率比较高，因此要求数据链路层必须向上层提供可靠传输服务。&#xA;比特差错只是传输差错中的一种。&#xA;从整个计算机网络体系结构来看，传输差错还包括分组丢失（发送的分组因某种原因被丢弃）、分组失序（发送的多个分组到达接收方的顺序与发送时不同）以及分组重复（分组因网络延时卡在路由器，引发发送方的超时发送，出现重复）。&#xA;分组丢失、分组失序以及分组重复这些传输差错，一般不会出现在数据链路层，而会出现在其上层。&#xA;可靠传输的实现比较复杂，开销也比较大，是否使用可靠传输取决于应用需。&#xA;可靠传输的实现机制——停止-等待协议SW(Stop-and-Wait) 1.确认与否认&#xA;DATA为数据分组，ACK为确认分组，NAK为否认分组。从上往下。&#xA;如该图，接收方发送第一个DATA，接收方对其进行差错，确认无误码，返回ACK，发送方收到ACK后，才可以删除第一个DATA的缓存，发送第二个DATA，若第二个DATA在传输过程中出现误码，接收方对其进行差错，返回NAK，发送方收到NAK，重新发送第二个DATA。（这就是为什么只有收到ACk时才能删除那个数据分组的缓存。）&#xA;2.超时重传&#xA;接收方收不到数据分组，就不会发送ACK或NAK。如果不采取其他措施，发送方就会一直处于等待接收方ACK或NAK的状态。&#xA;为解决该问题，可以在发送方发送完一个数据分组时，启动一个超时计时器。若到了超时计时器所设置的重传时间而发送方仍收不到接收方的任何ACK或NAK，则重传原来的数据分组，这就叫做超时重传。&#xA;一般可将重传时间选为略大于“从发送方到接收方的平均往返时间”&#xA;3.确认分组丢失&#xA;ACK丢失，会引起发送方的超时重传。&#xA;为避免分组重复这种传输错误，必须给每个分组带上序号。（如图，DATA0，DATA1）&#xA;对于停止-等待协议，由于每发送一个数据分组就停止等待,只要保证每发送一个新的数据分组，其发送序号与上次发送的数据分组的序号不同就可以了，因此用一个比特来编号就够了。&#xA;4.确认分组迟到&#xA;对确认分组（ACK）进行编号。&#xA;ACK0迟到了，导致发送方超时重传，接收方接收到超时重传的DATA0，将其丢弃，并再发送ACK0，发送方接收到重复的ACK0，忽略该确认分组。&#xA;对于数据链路层的点对点信道，往返时间比较固定，不会出现确认分组迟到的情况，因此只在数据链路层实现停止等待协议，不需要给ACK编码。&#xA;注意事项：&#xA;1.接收端检测到数据分组有误码时，将其丢弃并等待发送方的超时重传。但对于误码率较高的点对点链路，为使发送方尽早重传，也可给发送方发送NAK分组&#xA;2.为了让接收方能够判断所收到的数据分组是否是重复的，需要给数据分组编号。由于停止-等待协议的停等特性，只需1个比特编号就够了，即编号0和1。&#xA;3.为了让发送方能够判断所收到的ACK分组是否是重复的，需要给ACK分组编号，所用比特数量与数据分组编号所用比特数量一样。数据链路层一般不会出现ACK分组迟到的情况，因此在数据链路层实现停止-等待协议可以不用给ACK分组编号。&#xA;4.超时计时器设置的重传时间应仔细选择。一般可将重传时间选为略大于“从发送方到接收方的平均往返时间”。&#xA;在数据链路层点对点的往返时间比较确定，重传时间比较好设定。&#xA;然而在运输层，由于端到端往返时间非常不确定，设置合适的重传时间有时并不容易。&#xA;信道利用率&#xA;当往返时延RTT远大于数据帧发送时延To时（例如使用卫星链路)，信道利用率非常低。&#xA;若出现重传，则对于传送有用的数据信息来说，信道利用率还要降低。&#xA;为了克服停止-等待协议信道利用率很低的缺点，就产生了另外两种协议，即后退N帧协议GBN和选择重传协议SR。&#xA;例题：主机甲采用停-等协议向主机乙发送数据，数据传输速率使3kbps，单向传播延时是200ms,忽略确认帧的传输延时。当信道利用率等于40%时，数据帧的长度为&#xA;A.240比特 B.400比特 C.480比特 D.800比特&#xA;解析：&#xA;可靠传输的实现机制——回退N帧协议GBN(Go-Back-N) 采用流水线传输可提高信道利用率。&#xA;1.采用3个比特给分组编序号，即序号0~7; n个比特， 0~2^n -1&#xA;2.发送窗口的尺寸Wt的取值:1&amp;lt;Wt≤2^3 - 1，本例取Wt=5. 1&amp;lt;Wr&amp;lt;2^n -1&#xA;3.接收窗口的尺寸Wr的取值:Wr=1;&#xA;发送窗口一次发送5个&#xA;到达接收方，接收窗口依次一个分组一个分组识别，并依次发回确认分组。&#xA;发送方每接受一个确认分组，发送窗口就向前滑动一个位置，这样就有新的序号落入发送窗口。&#xA;发送方可以把收到确认的分组从缓存中删除了，而接收方可以择机将已接收的数据交付上层处理。&#xA;累积确认&#xA;接收方不一定要对收到的数据分组逐个发送确认，而是可以在收到几个数据分组后（由具体实现决定)对按序到达的最后一个数据分组发送确认。ACKn表示序号为n及以前的所有数据分组都已正确接收。&#xA;如上图，接收方接收到0-1，发送一个ACK1，处理完2-4，发送一个ACK4，若ACK1丢了，ACK4到达发送方，则表明分组0-4都确认，已正确接收。&#xA;缺点&#xA;5号出现误码，丢弃，而后的序号6701，无法被5号接收窗口接收，也只能丢弃，每丢弃一个数据分组（5号误码不算），返回之前按序接受的最后一个确认分组，在本例中是ACK4，发4个ACK4。&#xA;发送方收到重复的确认。就知道之前所发送的数据分组出现了差错,于是可以不等超时计时器超时就立刻重传!&#xA;至于收到几个重复确认就立刻重传,由具体实现决定。若不能触发立刻重传，则等待超时计时器。超时后将发送窗口中的分组重传。&#xA;在本例中。尽管序号为6,7,0.1的数据分组正确到达接收方。但由于5号数据分组误码不被接受,它们也“受到牵连”而不被接受,发送方还要重传这些数据分组,这就是所谓的Go-back-N(回退N帧)。&#xA;发送窗口的尺寸不能超过其上限，如在上例，发送窗口为8，则发送01234567，接收方接收完这些后窗口序号为0，这样无法辨认新旧数据分组。</description>
    </item>
    <item>
      <title>从零开始的计算机网络3-3</title>
      <link>https://blog.0pt.im/learn/1-3-3/</link>
      <pubDate>Thu, 13 Jul 2023 18:09:28 +0800</pubDate>
      <guid>https://blog.0pt.im/learn/1-3-3/</guid>
      <description>差错检测 实际的通信链路都不是理想的，比特在传输过程中可能会产生差错:1可能会变成0,而0也可能变成1。这称为比特差错。&#xA;在一段时间内，传输错误的比特占所传输比特总数的比率称为误码率BER(Bit Error Rate)。使用差错检测码来检测数据在传输过程中是否产生了比特差错，是数据链路层所要解决的重要问题之一。&#xA;FCS用于让接收方的数据链路层检查是否产生误码。&#xA;奇偶校验 在待发送的数据后面添加1位奇偶校验位，使整个数据（包括所添加的校验位在内）中**“1”的个数**为奇数（奇校验)或偶数（偶校验)。&#xA;如果有奇数个位发生误码，则奇偶性发生变化，可以检查出误码;&#xA;如果有偶数个位发生误码，则奇偶性不发生变化，不能检查出误码（漏检)。&#xA;漏检率高，计算机网络的数据链路层一般不用奇偶校验。&#xA;循环冗余校验CRC(Cyclic Redundancy Check) 收发双方约定好一个生成多项式G(x);&#xA;发送方基于待发送的数据和生成多项式计算出差错检测码（冗余码)，将其添加到待传输数据的后面一起传输;&#xA;接收方通过生成多项式来计算收到的数据是否产生了误码。&#xA;例题：待发送的信息为101001，生成多项式为G(x)= x^3+ x^2+ 1，计算余数。&#xA;解析：1.构造被除数 待发送信息后面添加生成多项式最高次数个0&#xA;2.构造除数 生成多项式各项系数构成的比特串&#xA;3.做“除法”&#xA;4.检查余数 余数的位数应与生成多项式最高次数相同，如果位数不够，则在余数前补0来凑足位数。&#xA;例题：接收到的信息为101101001，生成多项式为G(x)= x^3 +x^2+l，判断传输是否误码?&#xA;解析：1.构造被除数 接收到的信息就是被除数&#xA;2.构造除数 生成多项式各项系数构成的比特串&#xA;3.做“除法”&#xA;4.检查余数 余数为0，可认为传输过程无误码;余数不为0，可认为传输过程产生误码。&#xA;检错码只能检测出帧在传输过程中出现了差错，但并不能定位错误，因此无法纠正错误。&#xA;要想纠正传输中的差错，可以使用冗余信息更多的纠错码进行前向纠错。但纠错码的开销比较大，在计算机网络中较少使用。&#xA;循环冗余校验CRC有很好的检错能力（漏检率非常低)，虽然计算比较复杂，但非常易于用硬件实现，因此被广泛应用于数据链路层。&#xA;在计算机网络中通常采用我们后续中将要讨论的检错重传方式来纠正传输中的差错，或者仅仅是丢弃检测到差错的帧，这取决于数据链路层向其上层提供的是可靠传输服务还是不可靠传输服务。</description>
    </item>
    <item>
      <title>从零开始的计算机网络3-2</title>
      <link>https://blog.0pt.im/learn/1-3-2/</link>
      <pubDate>Wed, 12 Jul 2023 18:09:28 +0800</pubDate>
      <guid>https://blog.0pt.im/learn/1-3-2/</guid>
      <description>封装成帧 封装成帧是指数据链路层给上层交付的协议数据单元添加帧头和帧尾使之成为帧。&#xA;帧头和帧尾中包含有重要的控制信息。&#xA;帧头和帧尾的作用之一就是帧定界。&#xA;首尾标志的作用就是帧定界&#xA;接收方的链路层可以依据帧定界标志，从物理层交付的比特流中，提取出一个一个的帧。&#xA;并不是每种数据链路层的帧都包含有帧定界标志。&#xA;使用该协议，物理层会在以太网V2的mac帧前添加前导码。&#xA;另外，以太网还规定了帧间间隔时间为96比特的发送时间，不需要帧定界。&#xA;透明传输是指数据链路层对上层交付的传输数据没有任何限制，就好像数据链路层不存在一样&#xA;flag是帧定界标志，是一个特定数值。如图，首位各一个flag，但是在上层交付的协议数据单元中，恰好也包含了这个特定数值，接收方就不能正确接收帧，会提前结束。&#xA;解决：在帧发送前，对帧数据部分进行扫描，每出现一个帧定界符，就在其前面插入一个转义字符（ESC）。&#xA;接收方在收到转义字符时，会去掉转义字符，并知道后面的不是帧定界符而是数据。&#xA;数据部分中出现了转义字符也是同理。&#xA;转义字符不是“esc”，而是一个特定字符，十进制值为27.。&#xA;面向字节的物理链路使用字节填充（或称字符填充)的方法实现透明传输。&#xA;面向比特的物理链路使用比特填充的方法实现透明传输。&#xA;在发送前，可采用零比特填充法，每5个连续的比特1前就插入一个比特0，来确保帧定界符的唯一性。接收方接受时把数据部分每5个连续的比特1前的比特0剔除即可。&#xA;例题. HDLC协议对 0111110001111110 组帧后对应的比特串为&#xA;A.011111000011111010 B.011111000111110101111110&#xA;C.01111100011111010 D.011111000111111001111101&#xA;解析：高级数据链路控制协议HDLC采用帧头和帧尾中的标志字段作为帧定界符，其值为01111110&#xA;HDLC为了实现“透明传输”，采用“零比特填充法”(每5个连续1后面插入一个比特0)，故选A&#xA;为了提高帧的传输效率，应当使帧的数据部分的长度尽可能大些。&#xA;考虑到差错控制等多种因素，每一种数据链路层协议都规定了帧的数据部分的长度上限，即最大传送单元MTU(Maximum Transfer Unit)。</description>
    </item>
    <item>
      <title>从零开始的计算机网络3-1</title>
      <link>https://blog.0pt.im/learn/1-3-1/</link>
      <pubDate>Tue, 11 Jul 2023 18:09:28 +0800</pubDate>
      <guid>https://blog.0pt.im/learn/1-3-1/</guid>
      <description>数据链路层概述 链路(Link)就是从一个结点到相邻结点的一段物理线路，而中间没有任何其他的交换结点。&#xA;数据链路(Data Link)是指把实现通信协议的硬件和软件加到链路上，就构成了数据链路。数据链路层以帧为单位传输和处理数据。&#xA;只研究数据链路层时，可以看作数据包在只在数据链路层水平传送。&#xA;数据链路层的三个重要问题（使用点对点信道的数据链路层） 1.封装成帧&#xA;发送方将待发送的数据，通过应用层封装成为应用层协议数据单元，然后交付给运输层。&#xA;运输层为复添加运输层协议首部，使之成为运输层协议数据单元，然后交付给网络层。&#xA;网络层为复添加网络层协议首部，使之成为网络层数据单元，然后交付给数据链路层。&#xA;数据链路层绘网络层协议数据单元添加一个数据链路层协议首部，简称为帧头，还要给其添加一个帧尾。&#xA;2.差错检测&#xA;3.可靠传输&#xA;如果数据链路层向其上层提供的是不可靠服务，那么丢弃就丢弃了，不会有更多措施。&#xA;如果数据链路层向其上层提供的是可靠服务，那么还需要其他措施，来确保接收方主机还可以重新收到被丢弃这个帧的正确副本。&#xA;尽管误码是不能完全避兔的，但若能实现发送方发送什么，接收方就能收到什么,就称为可靠传输。&#xA;使用广播信道的数据链路层 C如何知道主机A发送的数据是给自己的，其他主机如何知道主机A发送的数据不是给自己的。&#xA;将帧的目的地址添加在帧中一起传输。&#xA;帧碰撞，解决方法，使用一种特殊的协议 以太网的媒体接入控制协议CSMA/CD&#xA;其他概念&#xA;802.11局域网的媒体接入控制协议CSMA/CA数据链路层的互连设备&#xA;网桥和交换机的工作原理&#xA;集线器（物理层互连设备)与交换机的区别&#xA;接下来会讲。</description>
    </item>
    <item>
      <title>从零开始的计算机网络2-5</title>
      <link>https://blog.0pt.im/learn/1-2-5/</link>
      <pubDate>Mon, 10 Jul 2023 18:09:28 +0800</pubDate>
      <guid>https://blog.0pt.im/learn/1-2-5/</guid>
      <description>信道的极限容量 信号波形失去码元间的清晰界限，这种现象叫码间串扰。&#xA;失真因素&#xA;码元传输速率&#xA;信号传输距离&#xA;噪声干扰&#xA;传输媒体质量&#xA;奈氏准则 在假定的理想条件下，为了避免码间串扰，码元传输速率是有上限的。&#xA;理想低通信道的最高码元传输速率=2W Baud = 2W码元/秒&#xA;理想带通信道的最高码元传输速率=W Baud = W码元/秒&#xA;w:信道带宽（单位为Hz）&#xA;Baud:波特，即码元/秒&#xA;码元传输速率又称为波特率、调制速率、波形速率或符号速率。它与比特率有一定关系:&#xA;当1个码元只携带1比特的信息量时，则波特率（码元/秒)与比特率（比特/秒）在数值上是相等的;口当1个码元携带n比特的信息量时，则波特率转换成比特率时，数值要乘以n。&#xA;要提高信息传输速率（比特率），就必须设法使每一个码元能携带更多个比特的信息量。这需要采用多元制（如2-4里的QAM - 16）&#xA;实际的信道所能传输的最高码元速率，要明显低于奈氏准则给出的这个上限数值。&#xA;香农公式 带宽受限且有高斯白噪声干扰的信道的极限信息传输速率&#xA;C:信道的极限信息传输速率(单位: b/s)&#xA;w:信道带宽（单位:Hz)&#xA;S:信道内所传信号的平均功率&#xA;N:信道内的高斯噪声功率&#xA;S/N:信噪比，使用分贝(dB)作为度量单位&#xA;信道带宽或信道中信噪比越大，信息的极限传输速率越高。&#xA;在实际信道上能够达到的信息传输速率要比该公式的极限传输速率低不少。这是因为在实际信道中，信号还要受到其他一些损伤，如各种脉冲干扰、信号在传输中的衰减和失真等，这些因素在香农公式中并未考虑。&#xA;1.在信道带宽一定的情况下，根据奈氏准则和香农公式，要想提高信息的传输速率就必须采用多元制（更好的调制方法）和努力提高信道中的信噪比。&#xA;2.自从香农公式发表后，各种新的信号处理和调制方法就不断出现，其目的都是为了尽可能地接近香农公式给出的传输速率极限。&#xA;例题.在无噪声情况下，若某通信链路的带宽为3kHz，采用4个相位，每个相位具有4种振幅的QAM调制技术，则该通信链路的最大数据传输速率是&#xA;A.12 kbps B.24 kbps C.48 kbps D.96 kbps&#xA;解析：(1）根据奈氏准则可知，该通信链路的最高码元传输速率= 2x 3k = 6k(Baud) = 6k(码元/秒)&#xA;(2）采用4个相位，每个相位4种振幅的QAM调制技术，可以调制出4x4=16个不同的基本波形(码元);&#xA;采用二进制对这16个不同的码元进行编码，需要使用4个比特(log:16 = 4)。换句话说，每个码元可以携书的信息量为4比特;&#xA;综合（1)和(2)可知，该通信链路的最大数据传输速率=6k(码元/秒)x4(比特/码元)=24k (比特/秒)= 24 kbps，选B&#xA;不管题目给出的调制技术多么“牛”或对于我们而言有多陌生，这都不会影响我们解题。我们只需关心这种调制技术可以调制出多少个不同的基本波形（码元)即可。&#xA;例题：若某通信链路的数据传输速率为2400bps，采用4相位调制，则该链路的波特率是A.600波特 B.1200波特 C.4800波特 D.9600波特&#xA;解析：(1）采用4相位调制，可以调制出4种相位不同的基本波形(码元)。采用二进制对这4个不同的码元进行编码，(1）采用4相位调制，可以调制出4种相位不同的基本波形(码元)。采用二进制对这4个不同的码元进行编码，需要使用2个比特(logz4 = 2)。换句话说，每个码元可以携带的信息量为2比特;&#xA;(2）数据传输速率=波特率(码元传输速率)X每个码元所携带的信息量</description>
    </item>
    <item>
      <title>从零开始的计算机网络2-4</title>
      <link>https://blog.0pt.im/learn/1-2-4/</link>
      <pubDate>Sun, 09 Jul 2023 18:09:28 +0800</pubDate>
      <guid>https://blog.0pt.im/learn/1-2-4/</guid>
      <description>编码与调制 码元&#xA;在使用时间域的波形表示数字信号时,代表不同离散数值的基本波形。&#xA;两种基本波形，分别代表比特0或1，组合起来&#xA;一个传输媒体可以包含多个信道，单工的话一个信道，半双工全双工2个：如果采用信道复用技术，可以有多个信道。&#xA;常用编码 1.不归零编码(存在同步问题)&#xA;比特1是高电压，比特0是低电压，出现如下问题：&#xA;为解决这个问题，需要额外一根传输线来传输时钟信号,使发送方和接收方同步。&#xA;但是对于计算机网络，宁愿利用这根传输线传输数据信号，而不是传输时钟信号!&#xA;2.归零编码（自同步，编码效率低）&#xA;每个码元传输结束后信号都要“归零”，所以接收方只要在信号归零后进行采样即可，不需要单独的时钟信号。&#xA;实际上，归零编码相当于把时钟信号用“归零”方式编码在了数据之内，这称为“自同步”信号。&#xA;但是，归零编码中大部分的数据带宽,都用来传输“归零”而浪费掉了。&#xA;3.曼彻斯特编码（传统以太网，10Mb/s）&#xA;码元中间时刻的跳变既表示时钟,又表示数据。&#xA;4.差分曼彻斯特编码（比曼彻斯特编码变化少，更适合较高的传输速率）&#xA;跳变仅表示时钟;码元开始处电平是否发生变化表示数据。&#xA;基本调制方法 使用基本调制方法，1个码元只能包含1个比特信息。如何能使1个码元包含更多的比特呢？&#xA;可采用混合调制&#xA;频率 相位 振幅&#xA;因为频率和相位是相关的，即频率是相位随时间的变化率。所以一次只能调制频率和相位两个中的一个。&#xA;通常情况下，相位和振幅可以结合起来一起调制，称为正交振幅调制QAM。&#xA;混合调制举例——正交振幅调制QAM 星座图&#xA;QAM-16&#xA;12种相位&#xA;每种相位有1或2种振幅可选&#xA;可以调制出16种码元(波形)，每种码元可以对应表示4个比特&#xA;码元与4个比特的对应关系采用格雷码，任意两个相邻码元只有1个比特不同</description>
    </item>
    <item>
      <title>从零开始的计算机网络2-3</title>
      <link>https://blog.0pt.im/learn/1-2-3/</link>
      <pubDate>Sat, 08 Jul 2023 18:09:28 +0800</pubDate>
      <guid>https://blog.0pt.im/learn/1-2-3/</guid>
      <description>传输方式 串行传输和并行传输 串行传输：数据是1个比特1个比特依次发送，只需1条传输线路（例：计算机远距离通信）&#xA;并行传输：数据是n个比特n个比特依次发送，需n条传输线路（例：电脑内数据传输，cpu与内存）&#xA;同步传输和异步传输 收发双方时钟同步的方法&#xA;外同步:在收发双方之间添加一条单独的时钟信号线&#xA;内同步:发送端将时钟同步信号编码到发送数据中一起传输（例如曼彻斯特编码&#xA;以字节为单位发送，时间间隔不固定，通常要在每个字节前面加上起始位（红色S）和结束位（黑色E）&#xA;字节之间异步(字节之间的时间间隔不固定)&#xA;字节中的每个比特仍然要同步(各比特的持续时间是相同的)&#xA;单工/半双工/全双工 </description>
    </item>
    <item>
      <title>从零开始的计算机网络2-2</title>
      <link>https://blog.0pt.im/learn/1-2-2/</link>
      <pubDate>Fri, 07 Jul 2023 18:09:28 +0800</pubDate>
      <guid>https://blog.0pt.im/learn/1-2-2/</guid>
      <description>二.物理层下的传输媒体 传输媒体不属于物理层，只能排在物理层之下&#xA;导引型传输媒体 1.同轴电缆&#xA;基带同轴电缆(50欧姆) 数字传输，过去用于局域网&#xA;宽带同轴电缆(75欧姆) 模拟传输，目前主要用于有线电视&#xA;同轴电缆价格较贵且布线不够灵活和方便，随着集线器的出现,在局域网领域基本上都是采用双绞线作为传输媒体。&#xA;2.双绞线&#xA;绞合的作用&#xA;抵御部分来自外界的电磁波干扰&#xA;减少相邻导线的电磁干扰（高中物理，电磁感应，磁场相抵消）&#xA;5E基本够用，考虑未来发展，可以提前用6类&#xA;3.光纤&#xA;纤芯直径&#xA;多模光纤:50微米，62.5微米&#xA;单模光纤:9微米&#xA;包层直径125微米&#xA;工作波长&#xA;0.85微米（衰减较大)&#xA;1.30微米（衰减较小)&#xA;1.55微米（衰减较小)&#xA;光纤的优点&#xA;通信容量大(25000~30000GHz的带宽)&#xA;口传输损耗小，远距离传输时更加经济。&#xA;抗雷电和电磁干扰性能好。这在大电流脉冲干扰的环境下尤为重要。&#xA;无串音干扰，保密性好，不易被窃听。&#xA;体积小，重量轻。&#xA;光纤的缺点&#xA;割接需要专用设备&#xA;口光电接口价格较贵&#xA;光纤原理&#xA;当光从高折射率的媒体射向低折射率的媒体时，其折射角将大于入射角&#xA;因此，如果入射角足够大，就会出现全反射，即光碰到包层时，就会反射回纤芯&#xA;（1)单模光纤&#xA;没有模式色散，在1.31微米波长附近材料色散和波导色散大小相等符号相反，两者正好抵消。单模光纤适合长距离传输且衰减小，但其制造成本高，对光源要求高。&#xA;发送光源:激光发生器;接收检测:激光检波器&#xA;（2)多模光纤&#xA;由于色散(模式、材料、波导色散)，光在多模光纤中传输一定距离后必然产生信号失真(脉冲展宽)因此，多模光纤只适合近距离传输(建筑物内)&#xA;发送光源:发光二极管;接收检测:光电二极管&#xA;4.电力线&#xA;老技术，20世界20年代就出现了，用于有线电话连接&#xA;非导引型传输媒体 从极长波到甚长波，这些频段不用于电信领域&#xA;1.无线电波&#xA;2.微波（可以穿过大气层的电离层）&#xA;中继站将接受的微波发大后再发送给下一站，故称“接力”&#xA;利用地球同步卫星通信，通信距离远，但时延大（传播时延）&#xA;3.红外线&#xA;你家电视遥控器用的这个&#xA;之前笔记本和手机都有红外接口，用来通信，现在笔记本红外接口被淘汰。手机遥控用的手机红外接口。&#xA;点对点无线传输&#xA;直线传输，中间不能有障碍物，传输距离短&#xA;传输速率低(4Mb/s~16Mb/s)&#xA;4.可见光&#xA;LI-FI技术（了解即可）&#xA;2011年，德国物理学家哈拉尔德·哈斯（Harald Haas）和他在英国爱丁堡大学的团队发明了一种专利技术，利用闪烁的灯光来传输数字信息，这就是Li-Fi。&#xA;Li-Fi的工作原理并不复杂。给普通的LED灯泡装上微芯片，可以控制它每秒数百万次闪烁，亮了表示1，灭了代表0。由于频率太快，人眼根本觉察不到，但是光敏传感器却可以接收到这些变化。就这样，二进制的数据就被快速编码成灯光信号并进行了有效的传输。灯光下的电脑或手机，通过一套特制的接收装置，就能读懂灯光里的“莫尔斯密码”，就能通讯了。&#xA;高速率是可见光通信的最大优势，也是业界普遍看好其前景的主要原因。&#xA;除了速率之外，可见光通信还有很多其它方面的优势。&#xA;据统计，2020年支持Wi-Fi无线连接的设备将达17亿台，但随着设备的进一步增加，2025年基于传统RF（射频）技术的Wi-Fi网络可能无法满足设备连接需求。&#xA;蜂窝通信方面，只我们中国，移动通信基站有差不多600万个，大部分能量都用于冷却，效率只有5%。&#xA;LED光源就不一样了，目前全球LED灯泡就有大约400亿个。只需给这些LED灯泡加一个微芯片，就能改造成信号发射器，形成的通信网络规模是非常惊人的。这样做的成本也比部署Wi-Fi热点低得多，也不必新建基础设施。&#xA;而且，前面也说了，无线电波的频谱资源日趋紧张，网络已经变得拥挤不堪。可见光频谱的宽度达到射频频谱的1万倍，意味着能带来更高的带宽，可以使用的资源也非常丰富。使用光通信，完全不用担心频谱不够用的问题，同时还能缓解全球无线频谱资源短缺的现状。&#xA;此外，可见光对于人类来说是绿色的、无辐射伤害的一种物质。因此用光来作为无线通信的媒质，是一种对人类发展更健康，更可取的方向。同时用光来通信能降低能耗，因为不需要像基站那样提供额外的能耗，更加环保。&#xA;如果算上安全的话，也是一个优点，可见光通信，把光线一挡，就泄露不出去了。。。&#xA;但是，可见光通信的缺点其实也非常多。&#xA;首先，大家应该已经想到了，像Li-Fi这样的东东，你下行速率还好说，上行怎么办呢？手机上也装个电灯泡？</description>
    </item>
    <item>
      <title>从零开始的计算机网络2-1</title>
      <link>https://blog.0pt.im/learn/1-2-1/</link>
      <pubDate>Thu, 06 Jul 2023 18:09:28 +0800</pubDate>
      <guid>https://blog.0pt.im/learn/1-2-1/</guid>
      <description>一.物理层的基本概念 1.传播媒体 用来连接各种网络设备。&#xA;导引型传播媒体（常用）&#xA;双绞线&#xA;同轴电缆&#xA;光纤&#xA;非导引型传播媒体（常用）&#xA;微波通信（2~40GHZ） 物理层就是要解决在各种传输媒体上传输比特0和1的问题，给数据链路层提供透明比特流服务。&#xA;透明：数据链路层看不见也无需看见物理层是用何种方法传输比特0和1，只管享受物理层提供的服务。&#xA;物理层协议的主要任务 机械特性：指明接口所用接线器的形状和尺寸、引脚数目和排列、固定和锁定装置&#xA;电气特性：指明在接口电缆的各条线上出现的电压的范围&#xA;功能特性：指明某条线上出现的某一电平的电压表示何种意义&#xA;过程特性：指明对于不同功能的各种可能事件的出现顺序&#xA;物理层协议多，理解并上述概念即可。</description>
    </item>
    <item>
      <title>从零开始的计算机网络1-5</title>
      <link>https://blog.0pt.im/learn/1-1-5/</link>
      <pubDate>Wed, 05 Jul 2023 18:09:11 +0800</pubDate>
      <guid>https://blog.0pt.im/learn/1-1-5/</guid>
      <description>计算机网络体系结构 常见的计算机网络体系结构 OSI制定周期长，复杂，运行效率低&#xA;TCP/IP 更简单，且有商业驱动，抢占市场，成为标准&#xA;计算机网络体系结构分层的必要性 计算机网络是个非常复杂的系统。早在最初的ARPANET设计时就提出了分层的设计理念。&#xA;&amp;ldquo;分层&amp;ldquo;可将庞大而复杂的问题，转化为若干较小的局部问题，而这些较小的局部问题就比较易于研究和处理。&#xA;下面，我们按照由简单到复杂的顺序，来看看实现计算机网络要面临哪些主要的问题，以及如何将这些问题划分到相应的层次，层层处理。&#xA;1.若两台计算机用一根网线连接起来，有何问题&#xA;采用怎样的传输媒体（介质）&#xA;采用怎样的物理接口&#xA;使用怎样的信号表示比特0和1&#xA;归到物理层&#xA;2.若几台计算机都连到一根线上（总线型网络）&#xA;如何标识网络中的各主机（主机编址问题，例如MAC地址）&#xA;如何从信号所表示的一连串比特流中区分出地址和数据&#xA;如何协调各主机争用总线&#xA;归到数据链路层&#xA;3.若由几个网络和路由器组成一个小型互联网&#xA;如何标识各网络以及网络中的各主机（网络和主机共同编址的问题，例如IP地址）&#xA;路由器如何转发分组，如何进行路由选择&#xA;归到网络层&#xA;4.若一台主机开了一个浏览器进程和QQ进程（与网络通信相关的进程），一台服务器里运行着与网络通信相关的服务器进程，某时刻，主机收到了来自服务器的分组，要将分组交给哪个进程进行处理&#xA;如何解决进程之间基于网络的通信问题&#xA;出现传输错误时，如何处理&#xA;归类到运输层&#xA;5.通过上述，已经实现了进程间基于网络的通信，在此基础上，只需要制定各种应用层协议，并按协议标准编写相应的应用程序，通过应用进程间的交互来完成特定的网络应用。&#xA;归类到应用层&#xA;总结&#xA;分层思想举例 主机&#xA;应用层按http协议的规定构建一个http请求报文，&#xA;应用层将http请求报文交给运输层处理&#xA;运输层给http请求报文添加一个tcp首部（区分应用进程，实现可靠传输） 使之成为tcp报文段 运输层将tcp报文段交给网络层处理&#xA;网络层给tcp报文段添加一个ip首部（能在互联网上传输即能被路由器转发） 使之成为ip数据报 网络层将ip数据报交付给数据链路层处理，&#xA;数据链路层给ip数据报添加一个首部（能在一个链路或一个网络上传输）和一个尾部（让目 的主机检测接收到的的帧是否有误码）&#xA;使之成为帧 数据链路层将帧交付给物理层&#xA;物理层将帧看作是比特流（如果是以太网，还会加一个前导码，为让目的主机做好接受的准备）变换成相应的信号发送到路由器&#xA;路由器 物理层将信号变换为比特流，去掉前导码后，交付给数据链路层，实际上交付的是帧，&#xA;数据链路层将首部和尾部去掉后交付给网络层，实际上交付的是ip数据报，&#xA;网络层解析ip数据报的首部，从中提取出目的网络地址，然后查找自身的路由表，确定转发端口，以便进行转发，再将其交付给数据链路层&#xA;数据链路层给ip数据报添加一个首部（能在一个链路或一个网络上传输）和一个尾部（让目 的主机检测接收到的的帧是否有误码）（也是路由器自己的）&#xA;使之成为帧 数据链路层将帧交付给物理层&#xA;物理层将帧看作是比特流，变换成相应的信号发送到相应服务器&#xA;服务器&#xA;物理层将信号变换为比特流，去掉前导码后，交付给数据链路层，实际上交付的是帧&#xA;数据链路层将首部和尾部去掉后交付给网络层，实际上交付的是ip数据报&#xA;网络层去掉ip数据报的首部，交付给运输层，实际上交付的是tcp报文段&#xA;运输层去掉tcp报文段首部，交付给应用层，实际上交付的是http请求报文&#xA;应用层收到http请求报文后，进行解析，如何向主机发回http响应报文&#xA;过程同理。再倒过来&#xA;计算机网络体系结构中的专用术语 实体，协议，服务 实体：任何可发送或接收信息的硬件或软件进程。&#xA;对等实体：收发双方相同层次中的实体。&#xA;如，通信双方的网卡，正在进行通信的应用进程就是对等实体&#xA;协议：控制两个对等实体进行逻辑通信的规则的集合。&#xA;协议的三要素：语法 语义 同步</description>
    </item>
    <item>
      <title>从零开始的计算机网络1-4</title>
      <link>https://blog.0pt.im/learn/1-1-4/</link>
      <pubDate>Tue, 04 Jul 2023 18:09:11 +0800</pubDate>
      <guid>https://blog.0pt.im/learn/1-1-4/</guid>
      <description>计算机网络性能指标 比特 计算机中数据量的单位，也是信息论中信息量的单位。一个比特就是二进制数字中的一个1或0。&#xA;常用数据量单位&#xA;1Byte(B) = 8 bit&#xA;1 KB = 1,024 Bytes =2^10 B&#xA;1 MB = 1,024 KB = 1,048,576 Bytes = 2^20 B&#xA;1 GB = 1,024 MB = 1,048,576 KB = 1,073,741,824 Bytes = 2^30 B&#xA;1 TB = 1,024 GB = 1,048,576 MB = 1,073,741,824 KB = 1,099,511,627,776 Bytes = 2^40 B&#xA;B前的K为大写&#xA;速率 连接在计算机网络上的主机在数字信道上传送比特的速率，也称为比特率或数据率。&#xA;常用数据率单位&#xA;bit/s (b/s) (bps) ps:三个单位都一样&#xA;1 Kbps = 10^3 bps</description>
    </item>
    <item>
      <title>从零开始的计算机网络1-3</title>
      <link>https://blog.0pt.im/learn/1-1-3/</link>
      <pubDate>Mon, 03 Jul 2023 18:09:11 +0800</pubDate>
      <guid>https://blog.0pt.im/learn/1-1-3/</guid>
      <description>计算机网络的定义与分类 计算机网络的定义 计算机网络的精确定义并未统一&#xA;计算机网络的最简单的定义是:一些互相连接的、自治的计算机的集合。&#xA;互连是指计算机之间可以通过有线或无线的方式进行数据通信&#xA;自治是指独立的计算机，它有自己的硬件和软件，可以单独运行使用;集合是指至少需要两台计算机&#xA;集合是指至少需要两台计算机&#xA;计算机网络的较好的定义是:计算机网络主要是由一些通用的、可编程的硬件互连而成的，而这些硬件并非专门用来实现某一特定目的（例如，传送数据或视频信号)。这些可编程的硬件能够用来传送多种不同类型的数据，并能支持广泛的和日益增长的应用。&#xA;计算机网络所连接的硬件，并不限于一般的计算机，而是包括了智能手机等智能硬件。&#xA;计算机网络并非专门用来传送数据，而是能够支持很多种的应用（包括今后可能出现的各种应用)&#xA;计算机网络的分类 按交换技术分类&#xA;电路交换网络&#xA;报文交换网络&#xA;分组交换网络&#xA;按使用者分类&#xA;公用网&#xA;专用网&#xA;按传输介质分类&#xA;有线网络&#xA;无线网络&#xA;按覆盖范围分类&#xA;广域网WAN&#xA;城域网MAN&#xA;局域网LAN&#xA;个域网PAN&#xA;按拓扑结构分类&#xA;总线型网络&#xA;星型网络&#xA;环型网络&#xA;网状型网络</description>
    </item>
    <item>
      <title>从零开始的计算机网络1-2</title>
      <link>https://blog.0pt.im/learn/1-1-2/</link>
      <pubDate>Sun, 02 Jul 2023 18:09:11 +0800</pubDate>
      <guid>https://blog.0pt.im/learn/1-1-2/</guid>
      <description>三种交换方式：电路交换、分组交换和报文交换 电路交换(Circuit Switching) 电话交换机接通电话线的方式称为电路交换&#xA;从通信资源的分配角度来看，交换(Switching)就是按照某种方式动态地分配传输线路的资源&#xA;电路交换的三个步骤&#xA;建立连接（分配通信资源）&#xA;通话（一直占用通信资源）&#xA;释放连接（归还通信资源）&#xA;当使用电路交换来传送计算机数据时,其线路的传输效率往往很低。&#xA;计算机数据是突发式的出现在传输线路上，会造成占着茅坑不拉屎的情况。&#xA;分组交换(Packet Switching) 发送方：构造分组，缓存分组。（把报文分割成若干分组发送）&#xA;路由器：缓存分组，转发分组。（分组不一定经同一条线路到达接收方，可以合理分配线路，避免拥堵。）&#xA;接收方：接收分组，还原报文。&#xA;报文交换就是不分割报文的分组交换，需要大的缓存空间。&#xA;三种方式对比 电路交换&#xA;优点：通信时延小、有序传输、没有冲突、适用范围广、实时性强、控制简单&#xA;缺点：建立连接时间长、线路独占，使用效率低、灵活性差、难以规格化&#xA;报文交换&#xA;优点：无需建立连接、动态分配线路、提高线路可靠性、提高线路利用率、提供多目标服务&#xA;缺点：引起了转发时延、需要较大存储缓存空间、需要传输额外的信息量&#xA;分组交换&#xA;优点：无需建立连接、线路利用率高、简化了存储管理、加速传输、减少出错概率和重发&#xA;缺点：引起了转发时延、需要传输额外的信息量、 对于数据报服务，存在失序、丢失或重复分组的问题;对于虚电路服务,存在呼叫建立、数据传输 和虚电路释放三个过程</description>
    </item>
    <item>
      <title>从零开始的计算机网络1-1</title>
      <link>https://blog.0pt.im/learn/1-1-1/</link>
      <pubDate>Sat, 01 Jul 2023 18:09:11 +0800</pubDate>
      <guid>https://blog.0pt.im/learn/1-1-1/</guid>
      <description>因特网概述 网络、互连网（互联网）和因特网 网络（Network）由若干结点（Node）和连接这些节点的链路（Link）组成 多个网络还可以通过路由器互连起来，这样构成了一个覆盖范围更大的网络，即互连网（或互联网）。因此，互连网是“网络的网络（Network of Network）”&#xA;因特网（Internet）是世界上最大的互连网络（用户数以亿计，互连的网络数以百万计）。&#xA;internet(互联网或互连网)是一个通用名词，它泛指由多个计算机网络互连而成的网络，在这些网络之间的通信协议可以是任意的&#xA;Internet（因特网）则是一个专用名词，它指当前全球最大的，开发的，自由的，由众多网络互连而成的特定计算机网络，它采用TCP/IP协议族作为通信的规则，其前身是美国的ARPANET。&#xA;因特网发展的三个阶段 1969年，从单个网络ARPANET向互联网发展&#xA;1969年，第一个分组交互网ARPANET&#xA;70年代中期，研究多种网络之间的互连&#xA;1983年，TCP/IP协议成为ARPANET的标准协议（因特网诞生时间）&#xA;1985年，逐步形成三级结构的因特网&#xA;1985年，NSF（美国国家科学基金会）围绕六个大型计算机中心建设NSFNET（主干网、地区网和校园网）&#xA;1990年，ARPANET任务完成，正式关闭&#xA;1991年，美国政府将因特网主干网交给私人公司经营，并开始对接入因特网的单位收费&#xA;1993年，逐步形成了多层次ISP结构的因特网&#xA;1993年，NSFNET逐渐被若干个商用因特网主干网代替;政府机构不再负责因特网运营，让各种因特网服务提供者ISP来运营&#xA;1994年，万维网www技术促使因特网迅猛发展&#xA;1995年NSFNET停止运作，因特网彻底商业化&#xA;我们通过地区的因特网服务提供者ISP接入因特网，我国就是电信移动联通&#xA;基于ISP的三层结构的因特网&#xA;因特网的标准化工作 因特网的标准化工作对因特网的发展起了非常重要的作用。&#xA;因特网在制定其标准上的一个很大的特点是面向公众。&#xA;因特网所有的RFC（REquest For COMments）技术文档都可以从因特网上免费下载（http://www.ietf.org/rfc.html）&#xA;任何人都可以随时用电子邮件发表对某个文档的意见或建议。&#xA;因特网协会ISOC是一个国际性的组织，它负责对因特网进行全面管理，以及在世界范围内促进其发展和使用。&#xA;因特网体系结构委员会IAB，负责管理因特网有关协议的开发&#xA;因特网工程部IETF，负责研究中短期工程问题，主要针对协议的开发和标准化&#xA;因特网研究部IRTF，从事理论方面的研究和开发一些需要长期考虑的问题&#xA;制订因特网的正式标准要经过以下4个阶段&#xA;(1)因特网草案（在这个阶段还不是RFC文档)&#xA;(2)建议标准（从这个阶段开始就成为RFC文档)&#xA;(3)草案标准&#xA;(4)因特网标准&#xA;因特网的组成 边缘部分：由所有连接在因特网上的主机组成。这部分是用户直接使用的，用来进行通信（传送数据、音频或视频）和资源共享。&#xA;核心部分：由大量网络和连接这些网络的路由器组成。这部分是为边缘部分提供服务的（提供连通性和交换)。</description>
    </item>
  </channel>
</rss>
