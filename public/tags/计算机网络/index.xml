<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>计算机网络 on 春风少年兄</title>
    <link>https://blog.0pt.im/zh/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</link>
    <description>Recent content in 计算机网络 on 春风少年兄</description>
    <image>
      <title>春风少年兄</title>
      <url>https://blog.0pt.im/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://blog.0pt.im/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 07 Aug 2023 18:09:28 +0800</lastBuildDate><atom:link href="https://blog.0pt.im/zh/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>从零开始的计算机网络5-8</title>
      <link>https://blog.0pt.im/learn/1-5-8/</link>
      <pubDate>Mon, 07 Aug 2023 18:09:28 +0800</pubDate>
      
      <guid>https://blog.0pt.im/learn/1-5-8/</guid>
      <description>五.运输层</description>
      <content:encoded><![CDATA[<h1 id="tcp的运输连接管理">TCP的运输连接管理</h1>
<h3 id="tcp的连接建立">TCP的连接建立</h3>
<p>TCP是面向连接的协议，它基于运输连接来传送TCP报文段。</p>
<p>TCP运输连接的建立和释放是每一次面向连接的通信中必不可少的过程。</p>
<p>TCP运输连接有以下三个阶段:</p>
<ul>
<li>
<p>建立TCP连接</p>
</li>
<li>
<p>数据传送</p>
</li>
<li>
<p>释放TCP连接</p>
</li>
</ul>
<p>TCP的运输连接管理就是使运输连接的建立和释放都能正常地进行。</p>
<p>TCP的连接建立要解决以下三个问题:</p>
<ul>
<li>
<p>使TCP双方能够确知对方的存在;</p>
</li>
<li>
<p>使TCP双方能够协商一些参数（如最大窗口值、是否使用窗口扩大选项和时间戳选项以及服务质量等）；</p>
</li>
<li>
<p>使TCP双方能够对运输实体资源（如缓存大小、连接表中的项目等）进行分配。</p>
</li>
</ul>
<p><img loading="lazy" src="https://img.0pt.im/computernet/5-8/5-8-1.png" alt=""  />
</p>
<p><strong>TCP连接请求报文段</strong>首部中的同步位SYN被设置为1，表明这是一个TCP请求报文段。</p>
<p>序号字段seq被设置了一个初始值x，作为TCP客户进程方选择的初始序号。</p>
<p>请准意：TGP规定SYN被设置为1的报文段不能携带数据，但要消耗掉一个序号。</p>
<p><strong>针对TCP连接请求的确认报文段</strong>首部中的同步位SYN和确认位ACK都设置为1，表明这是一个TCP连接请求确认报文段。序号字段seq被设置了─个初始值y，作为TCP服务器进程诚选择的初始序号。确认号字段adk的值被设置成了x+1，这是对TP客户进程所选择的初始序号的确认。</p>
<p>请注意：这个报文段也不能携带数据，因为它是SYN被设置为1的报文段，但同样要消耗掉一个序号。</p>
<p>针对TCP连接请求的确认的确认报文段首部中的确认位ACK被设置为1，表明这是一个普通的TCP确认报文段。序号字段seq被设置为x+1，这是因为MGP客户进程发送的第一个TCP报文段的序号为X，并且不携带数据，因此第二个报文段的序号为x+1。</p>
<p>请注意:TCP规定普通的TCP确认报文段可以携带数据，但如果不携带数据，则不消耗序号。在这种情况下，所发送的下一个数据报文段的序号仍是x+1。</p>
<p>确认号字段ack被设置为y+1，这是对TCP服务器进程所选择的初始序号的确认。TCP服务器递程收到该确认报文段后也进入连接已建立状态。</p>
<p>为什么最后要发针对TCP连接请求的确认的确认报文段？</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/5-8/5-8-2.png" alt=""  />
</p>
<p>这是为了防止已失效的连接请求报文段突然又传送到了TCP服务器，因而导致错误。</p>
<p>例题：主机甲向主机乙发送一个(SYN=1,seq=11220)的TCP段，期望与主机乙建立TCP连接，若主机乙接受该连接请求，则主机乙向主机甲发送的正确的TCP段可能是</p>
<p>A.(SYN=0，ACK=0, seq=11221, ack=11221)    B.(SYN=1，ACK=1, seq=11220, ack=11220)</p>
<p>C.(SYN=1，ACK=1, seq=11221, ack=11221)    D.(SYN=0，ACK=0, seq=11220,ack=11220)</p>
<p>解析：见上文，选C。</p>
<h3 id="tcp的连接释放">TCP的连接释放</h3>
<p>TCP通过“四报文挥手”来释放连接</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/5-8/5-8-3.png" alt=""  />
</p>
<p>该报文段首部中的终止位FIN和确认位ACK的值都被设置为1，表明这是一个TCP接释放报文段，同时世对之前收到的报文段进行确认。序号seq字段的值设置为u，它等于TCP客户进程之前已传送过的、数据的最后一个字节的序号加1。</p>
<p>请注意：TCP规定终止位FN等于1的报文段即使不携带数据，也要消耗掉一个序号。</p>
<p>确认号ack字段的值设置为v，它等于TCP客户进程之前已收到的、数据的最局一个字节的序号加1。</p>
<p>TCP服务器进程收到TCP连接释放报文段后，会发送一个普通的TCP确认报文段养进入关闭等待状态。</p>
<p>该报文段首部中的确认位ACK的值被设置为1，表明这是一个普通的TCP确认报文段。序号seq字段的值设置为v，它等于TCP服务器进程之前已传送过的数据的最后一个字节的序号加1。确认号adk字段的值设置为u+1，这是对TCP连接释放报文段的确认。TCP服务器进程这时应通知高层应用进程：TCP客户进程要断开与自己的TCP连接。此时，从TGP客户进程到TCP服务器进程这个方向的连接就释放了。这时的TCP连接属于半关闭状态，也就是TCP客户进程已经没有数据要发送了。但如果TCP服务器进程仍有数据要发送，TCP客户进程仍要接收。</p>
<p>也就是说，从TCP服务器进程到TCP客户进程这个方向的连接并未关闭。</p>
<p>TCP客户进程收到TCP确认报文段后就入终止等待2状态。等待TCP服务器进程发出的TCP连接释放报文段。若使用TCP服务器进程的应用进程已经没有数据要发送了，应用进程就通知其TCP服务器进程释放连接。由于TCP连接释放是由TCP客户进程主动发起的，因此TCP服务器进程对TCP连接的释放称为被动关闭连接。</p>
<p>TCP服务器进程发送TCP连接释放报文段并进入最后确认状态。该报文段省部中的终止位FIN和确认位ACK的值都被设置为1，表明这是一个TCP连接释放报文段，同时也对之前收到的报文段进行确认。现在假定序号seq字段的值为w。这是因为在半关闭状态下 ，TCP服务器进程可能又发送了一些数据。确认号ack字段的值为u+1，这是对之前收到的TCP连接释放报文段的重复确认。TCP客户进程收到TCP连接释放报文段后，必须针对该报文段发送普通的TCP确认报文段，之后进入时间等待状态。该报文段首部中的确认位ACK的值被设置为1，表明这是一个普通的TCP确认报文段。序号seq字段的值设置为u+1，这是因为TCP客户进程之前的TCP连接释放报文段虽然不携带数据，但要消耗掉一个序号。确认号ack字段的值设置为w+1，这是对所接受到的TCP连接释放报文段的确认。TCP服务器进程收到该报文段后就进入关闭状态。而TCP客户进程还要经过2MSL后才能进入关闭状态。</p>
<p>MSL(Maximum Segment Lifetime)意思是最长报文段寿命，RFC793建议为2分种。</p>
<p>为什么不直接进入关闭状态而是还要等待2MSL？</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/5-8/5-8-4.png" alt=""  />
</p>
<p>TCP服务器进程每收到一次TCP客户进程的数据，就重新设置并启动<strong>保活计时器</strong>（2小时定时）。</p>
<p>若保活计时器定时周期内未收到TCP客户进程发来的数据，则<strong>当保活计时器到时后，TCP服务器进程就向TCP客户进程发送一个探测报文段</strong>，以后则每隔75秒钟发送一次。若一连发送10个探测报文段后仍无TCP客户进程的响应，TCP服务器进程就认为TCP客户进程所在主机出了故障接着就关闭这个连接。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>从零开始的计算机网络5-7</title>
      <link>https://blog.0pt.im/learn/1-5-7/</link>
      <pubDate>Sun, 06 Aug 2023 18:09:28 +0800</pubDate>
      
      <guid>https://blog.0pt.im/learn/1-5-7/</guid>
      <description>五.运输层</description>
      <content:encoded><![CDATA[<h1 id="tcp可靠传输的实现">TCP可靠传输的实现</h1>
<p>TCP基于<strong>以字节为单位的滑动窗口</strong>来实现可靠传输</p>
<p>虽然发送方的发送窗口是根据接收方的接收窗口设置的，但在同一时刻，发送方的<strong>发送窗口并不总是和接收方的接收窗口</strong>一样大。</p>
<ul>
<li>
<p>网络传送窗口值需要经历一定的时间滞后，并且这个时间还是不确定的。</p>
</li>
<li>
<p>发送方还可能根据网络当时的拥塞情况适当减小自己的发送窗口尺寸。</p>
</li>
</ul>
<p>对于<strong>不按序到达的数据应如何处理</strong>，TCP并无明确规定。</p>
<ul>
<li>
<p>如果接收方把不按序到达的数据一律丢弃，那么接收窗口的管理将会比较简单，但这样做对网络资源的利用不利,因为发送方会重复传送较多的数据。</p>
</li>
<li>
<p>TCP通常对不按序到达的数据是先临时存放在接收窗口中，等到字节流中所缺少的字节收到后，再<strong>按序交付上层的应用进程</strong>。</p>
</li>
</ul>
<p>TCP要求接收方必须有<strong>累积确认和捎带确认机制</strong>，这样可以减小传输开销。接收方可以在合适的时候发送确认，也可以在自己有数据要发送时把确认信息顺便捎带上。</p>
<ul>
<li>
<p>接收方不应过分推迟发送确认，否则会导致发送方不必要的超时重传，这反而浪费了网络的资源。</p>
</li>
<li>
<p>TCP标准规定，确认推迟的时间不应超过0.5秒。若收到一连串具有最大长度的报文段，则必须每隔-个报文段就发送一个确认[RFC 1122]。</p>
</li>
<li>
<p>捎带确认实际上并不经常发生，因为大多数应用程序很少同时在两个方向上发送数据。</p>
</li>
</ul>
<p><strong>TCP的通信是全双工通信</strong>。通信中的每一方都在发送和接收报文段。因此，每一方都有自己的发送窗口和接收窗口。在谈到这些窗口时，一定要弄清楚是哪一方的窗口。</p>
<p>例题：主机甲与主机乙之间已建立一个TCP连接，主机甲向主机乙发送了两个连续的TCP段，分别包含300字节和500字节的有效载荷，第一个段的序号为200，主机乙正确接收到两个段后，发送给主机甲的确认序号是</p>
<p>A.500    B.700    C.800    D.1000</p>
<p>解析：</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/5-7/5-7-1.png" alt=""  />
</p>
<p>选D</p>
<p>例题：主机甲与主机乙之间已建立一个TCP连接，主机甲向主机乙发送了3个连续的TCP段，分别包含300字节、400字节和500字节的有效载荷，第3个段的序号为900。若主机乙仅正确接收到第1个和第3个段，则主机乙发送给主机甲的确认序号是</p>
<p>A.300    B.500    C.1200    D.1400</p>
<p>解析：</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/5-7/5-7-2.png" alt=""  />
</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>从零开始的计算机网络5-6</title>
      <link>https://blog.0pt.im/learn/1-5-6/</link>
      <pubDate>Sat, 05 Aug 2023 18:09:28 +0800</pubDate>
      
      <guid>https://blog.0pt.im/learn/1-5-6/</guid>
      <description>五.运输层</description>
      <content:encoded><![CDATA[<h1 id="tcp超时重传时间的选择">TCP超时重传时间的选择</h1>
<p>超时重传时间的选择是TCP最复杂的问题之一</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/5-6/5-6-1.png" alt=""  />
</p>
<p><strong>不能直接使用某次测量得到的RTT样本来计算超时重传时间RTO</strong>。</p>
<p>利用每次测量得到的RTT样本，计算加权平均<strong>往返时间RTTs</strong>（又称为平滑的往返时间）。</p>
<p>RTTs = RTT1</p>
<p><strong>新的RTTs = (l - α) ×旧的RTTs+α ×新的RTT样本</strong></p>
<p>在上式中,0 ≤a &lt;1 :</p>
<p>若α很接近于0，则新RTT样本对RTTs的影响不大;</p>
<p>若α很接近于1，则新RTT样本对RTTs的影响较大;</p>
<p>已成为建议标准的RFC6298推荐的α值为1/8，即0.125。</p>
<p>用这种方法得出的加权平均往返时间RTTs就比测量出的RTT值更加平滑。</p>
<p>显然，<strong>超时重传时间RTO应略大于加权平均往返时间RTTs</strong>。</p>
<p>RFC6298建议使用下式计算超时重传时间RTO:</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/5-6/5-6-2.png" alt=""  />
</p>
<p>往返时间RTT的测量比较复杂</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/5-6/5-6-3.png" alt=""  />
</p>
<p>源主机若误将确认当作是对原报文段的确认:</p>
<p>所计算出的RTTs和RTO就会偏大，降低了传输效率;</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/5-6/5-6-4.png" alt=""  />
</p>
<p>源主机若误将确认当作是对重传报文段的确认：</p>
<p>所计算出的RTTs和RTO就会偏小，导致报文段没必要的重传，增大网络负荷;</p>
<p>针对<strong>出现超时重传时无法测准往返时间RTT</strong>的问题，<strong>Karn</strong>提出了一个<strong>算法</strong>:<strong>在计算加权平均往返时间RTTs时</strong>，<strong>只要报文段重传了，就不采用其往返时间RTT样本</strong>。也就是出现重传时，不重新计算RTTs，进而超时重传时间RTO也不会重新计算。</p>
<p>这又引起了新的问题。设想出现这样的情况:报文段的时延突然增大了很多，并且之后很长一段时间都会保持这种时延。因此在原来得出的重传时间内，不会收到确认报文段。于是就重传报文段。但根据Karn算法，不考虑重传的报文段的往返时间样本。这样，超时重传时间就无法更新。这会导致报文段反复被重传。</p>
<p>因此，要对<strong>Karn算法进行修正</strong>。方法是：<strong>报文段每重传一次，就把超时重传时间RTO增大一些</strong>。典型的做法是将新RTO的值取为旧RTO值的2倍。</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/5-6/5-6-5.png" alt=""  />
</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>从零开始的计算机网络5-5</title>
      <link>https://blog.0pt.im/learn/1-5-5/</link>
      <pubDate>Fri, 04 Aug 2023 18:09:28 +0800</pubDate>
      
      <guid>https://blog.0pt.im/learn/1-5-5/</guid>
      <description>五.运输层</description>
      <content:encoded><![CDATA[<h1 id="tcp的拥塞控制">TCP的拥塞控制</h1>
<p>在某段时间，若<strong>对网络中某一资源的需求超过了该资源所能提供的可用部分</strong>，网络性能就要变坏，这种情况就叫做拥塞(congestion)。</p>
<p>在计算机网络中的链路容量（即带宽）、交换结点中的缓存和处理机等，都是网络的资源。若<strong>出现拥塞而不进行控制</strong>，整个网络的<strong>吞吐量将随输入负荷的增大而下降</strong>。</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/5-5/5-5-1.png" alt=""  />
</p>
<ul>
<li>
<p>慢开始(slow-start)</p>
</li>
<li>
<p>拥塞避免(congestion avoidance)</p>
</li>
<li>
<p>快重传(fast retransmit)</p>
</li>
<li>
<p>快恢复(fast recovery)</p>
</li>
</ul>
<p>下面介绍这四种拥塞控制算法的基本原理，假定如下条件:</p>
<ul>
<li>
<p>数据是单方向传送，而另一个方向只传送确认。</p>
</li>
<li>
<p>接收方总是有足够大的缓存空间，因而发送方发送窗口的大小由网络的拥塞程度来决定。</p>
</li>
<li>
<p>以最大报文段MSS的个数为讨论问题的单位，而不是以字节为单位。</p>
</li>
</ul>
<p><img loading="lazy" src="https://img.0pt.im/computernet/5-5/5-5-2.png" alt=""  />
</p>
<p>发送方维护一个叫做<strong>拥塞窗口cwnd</strong>的状态变量，其值<strong>取决于网络的拥塞程度</strong>，并且<strong>动态变化</strong>。</p>
<ul>
<li>
<p>拥塞窗口<strong>cwnd的维护原则</strong>:只要网络<strong>没有出现拥塞</strong>，<strong>拥塞窗口</strong>就再<strong>增大</strong>一些;但只要网络<strong>出现拥塞</strong>，<strong>拥塞窗口就减少</strong>一些。</p>
</li>
<li>
<p>判断出现<strong>网络拥塞的依据</strong>:没有按时收到应当到达的确认报文（即<strong>发生超时重传</strong>）。</p>
</li>
</ul>
<p>发送方将拥塞窗口作为<strong>发送窗口swnd</strong>，即<strong>swnd = cwnd</strong>。</p>
<p>维护一个慢开始门限<strong>ssthresh</strong>状态变量:</p>
<ul>
<li>
<p>当cwnd &lt; ssthresh时，使用慢开始算法;</p>
</li>
<li>
<p>当cwnd &gt; ssthresh时，停止使用慢开始算法而改用拥塞避免算法;</p>
</li>
<li>
<p>当cwnd = ssthresh时，既可使用慢开始算法，也可使用拥塞避免算法。</p>
</li>
</ul>
<p>设初始时cwnd = 1，ssthresh = 16</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/5-5/5-5-3.png" alt=""  />
</p>
<p>“慢开始”是指一开始向网络注入的报文段少，并不是指拥塞窗口cwnd增长速度慢;</p>
<p>“拥塞避免”并非指完全能够避免拥塞，而是指在拥塞避免阶段将拥塞窗口控制为按线性规律增长，使网络比较不容易出现拥塞;</p>
<p>慢开始和拥塞避免算法是1988年提出的TCP拥塞控制算法(TCP Tahoe版本)。</p>
<p>1990年又增加了两个新的拥塞控制算法（<strong>改进TCP的性能</strong>），这就是快重传和快恢复（TCP Reno版本)。有时，<strong>个别报文段</strong>会在网络中<strong>丢失</strong>，但实际上网络<strong>并未发生拥塞</strong>。</p>
<ul>
<li>
<p>这将导致<strong>发送方</strong>超时重传，并<strong>误认为</strong>网络发生了<strong>拥塞</strong>;</p>
</li>
<li>
<p><strong>发送方把拥塞窗口cwnd又设置为最小值1</strong>，并错误地启动慢开始算法，因而<strong>降低了传输效率</strong>。</p>
</li>
</ul>
<p>采用快重传算法可以<strong>让发送方尽早知道发生了个别报文段的丢失</strong>。</p>
<p>所谓快重传，就是使发送方<strong>尽快进行重传</strong>，而<strong>不是等超时重传计时器超时</strong>再重传。</p>
<ul>
<li>
<p>要求接收方不要等待自己发送数据时才进行捎带确认，而是要<strong>立即发送确认</strong>;</p>
</li>
<li>
<p>即使收到了失序的报文段也要立即发出对已收到的报文段的<strong>重复确认</strong>。</p>
</li>
<li>
<p>发送方一旦收到<strong>3个连续的重复确认</strong>，就将相应的报文段<strong>立即重传</strong>，而不是等该报文段的超时重传计时器超时再重传。</p>
</li>
<li>
<p>对于个别丢失的报文段，发送方不会出现超时重传，也就不会误认为出现了拥塞（进而降低拥塞窗口cwnd为1)。使用快重传可以使整个网络的吞吐量提高约20%。</p>
</li>
</ul>
<p><img loading="lazy" src="https://img.0pt.im/computernet/5-5/5-5-4.png" alt=""  />
</p>
<p><strong>发送方一旦收到3个重复确认</strong>，就知道现在只是丢失了个别的报文段。于是不启动慢开始算法，<strong>而执行快恢复算法</strong>;</p>
<p>也有的快恢复实现是把快恢复开始时的拥塞窗口cwnd值再增大一些</p>
<p>即等于新的ssthresh + 3。</p>
<ul>
<li>
<p>既然发送方收到3个重复的确认，就表明有3个数据报文段已经离开了网络;</p>
</li>
<li>
<p>这3个报文段不再消耗网络资源而是停留在接收方的接收缓存中;</p>
</li>
<li>
<p>可见现在网络中不是堆积了报文段而是减少了3个报文段。因此可以适当把拥塞窗口扩大些</p>
</li>
</ul>
<p><img loading="lazy" src="https://img.0pt.im/computernet/5-5/5-5-5.png" alt=""  />
</p>
<p>例题：一个TCP连接总是以1KB的最大段长发送TCP段，发送方有足够多的数据要发送。当拥塞窗口为16KB时发生了超时，如果接下来的4个RTT（往返时间)内的TCP段的传输都是成功的，那么当第4个RTT时间内发送的所有TCP段都得到肯定应答时，拥塞窗口大小是</p>
<p>A.7KB        B.8KB        C.9KB        D.16KB</p>
<p>解析：</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/5-5/5-5-6.png" alt=""  />
</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>从零开始的计算机网络5-4</title>
      <link>https://blog.0pt.im/learn/1-5-4/</link>
      <pubDate>Thu, 03 Aug 2023 18:09:28 +0800</pubDate>
      
      <guid>https://blog.0pt.im/learn/1-5-4/</guid>
      <description>五.运输层</description>
      <content:encoded><![CDATA[<h1 id="tcp的流量控制">TCP的流量控制</h1>
<p>一般来说，我们总是希望数据传输得更快一些。</p>
<p>但如果发送方把数据发送得过快，接收方就可能来不及接收，这就会造成数据的丢失。</p>
<p>所谓流量控制(flow control)就是<strong>让发送方的发送速率不要太快</strong>，<strong>要让接收方来得及接收</strong>。</p>
<p>利用<strong>滑动窗口</strong>机制可以很方便地在TCP连接上实现对发送方的流量控制。</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/5-4/5-4-1.png" alt=""  />
</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/5-4/5-4-2.png" alt=""  />
</p>
<blockquote>
<p>ACK是TCP报文段首部的标志位，取值1表示这是一个TCP确认报文段。小写adk是TCP报文段首部中的确认号字段，取值201表示序号201之前的数据已全蔷R确接收，现在希望收到序号201及赏后续数据。rwnd是TCP报文段首部中的窗口字段，取值300表示自己的接收窗口大小为300。</p>
</blockquote>
<p>如果零窗口探测报文丢失，怎么办？</p>
<p>零窗口探测报文段也有重传计时器。没事。</p>
<p>例题：主机甲和主机乙之间建立了一个TCP连接，TCP最大段长度为1000字节。若主机甲的当前拥塞窗口为4000字节在主机甲向主机乙连续发送两个最大段后，成功收到主机乙发送的第一个段的确认段，确认段中通告的接收窗口大小为2000字节，则此时主机甲还可以向主机乙发送的最大字节数是</p>
<p>A.1000    B.2000    C.3000    D.4000</p>
<p>解析：</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/5-4/5-4-3.png" alt=""  />
</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>从零开始的计算机网络5-3</title>
      <link>https://blog.0pt.im/learn/1-5-3/</link>
      <pubDate>Wed, 02 Aug 2023 18:09:28 +0800</pubDate>
      
      <guid>https://blog.0pt.im/learn/1-5-3/</guid>
      <description>五.运输层</description>
      <content:encoded><![CDATA[<h1 id="udp和tcp的对比">UDP和TCP的对比</h1>
<p>UDP和TCP是TCP/IP体系结构运输层中的两个重要协议</p>
<h3 id="用户数据报协议udpuser-datagram-protocol">用户数据报协议UDP(User Datagram Protocol)</h3>
<p>1.无连接的UDP</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/5-3/5-3-1.png" alt=""  />
</p>
<p>2.UDP支持单播、多播以及广播</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/5-3/5-3-3.png" alt=""  />
</p>
<p>3.UDP是面向应用报文的</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/5-3/5-3-5.png" alt=""  />
</p>
<p>4.UDP向上层提供无连接不可靠传输服务（适用于IP电话、视频会议等实时应用）</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/5-3/5-3-9.png" alt=""  />
</p>
<p>5.UDP用户数据包首部仅8字节</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/5-3/5-3-10.png" alt=""  />
 </p>
<h3 id="传输控制协议tcptransmission-control-protocol">传输控制协议TCP(Transmission Control Protocol)</h3>
<p>1.面向连接的TCP</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/5-3/5-3-2.png" alt=""  />
</p>
<p>2.TCP仅支持单播</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/5-3/5-3-4.png" alt=""  />
</p>
<p>3.TCP是面向字节流的</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/5-3/5-3-6.png" alt=""  />
</p>
<blockquote>
<p>TCP并不知道数据报的含义，只是将其视为字节流，加载到发送缓存中发送。接收方的TCP也不知道数据报的含义，只是交付给应用进程，接收方的应用进程必须有能力识别接收到的字节流。</p>
</blockquote>
<p>4.TCP向上层提供面向连接的可靠传输服务（适用于要求可靠传输的应用，例如文件传输）</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/5-3/5-3-8.png" alt=""  />
</p>
<p>5.TCP报文段首部最小20字节，最大60字节</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/5-3/5-3-11.png" alt=""  />
</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>从零开始的计算机网络5-2</title>
      <link>https://blog.0pt.im/learn/1-5-2/</link>
      <pubDate>Tue, 01 Aug 2023 18:09:28 +0800</pubDate>
      
      <guid>https://blog.0pt.im/learn/1-5-2/</guid>
      <description>五.运输层</description>
      <content:encoded><![CDATA[<h1 id="运输层端口号复用与分用的概念">运输层端口号、复用与分用的概念</h1>
<p>运行在计算机上的进程使用<strong>进程标识符PID</strong>来标志。</p>
<p>因特网上的计算机并不是使用统一的操作系统，不同的操作系统(windows，Linux，Mac os)又使用<strong>不同格式的进程标识符</strong>。</p>
<p>为了使运行不同操作系统的计算机的应用进程之间能够进行网络通信，就必须<strong>使用统一的方法对TCP/IP体系的应用进程进行标识</strong>。</p>
<p>TCP/IP体系的运输层使用<strong>端口号</strong>来区分应用层的不同应用进程。</p>
<p>端口号使用<strong>16比特表示</strong>，取值范围<strong>0~65535</strong>;</p>
<ul>
<li>
<p>熟知端口号:0~1023，IANA把这些端口号指派给了TCP/IP体系中最重要的一些应用协议，例如:FTP使用21/20，HTTP使用80，DNS使用53。</p>
</li>
<li>
<p>登记端口号:1024~49151，为没有熟知端口号的应用程序使用。使用这类端口号必须在IANA按照规定的手续登记，以防止重复。例如:Microsoft RDP微软远程桌面使用的端口是3389。</p>
</li>
<li>
<p>短暂端口号:49152~65535，留给客户进程选择暂时使用。当服务器进程收到客户进程的报文时，就知道了客户进程所使用的动态端口号。通信结束后，这个端口号可供其他客户进程以后使用。</p>
</li>
</ul>
<p><strong>端口号只具有本地意义</strong>，即端口号只是为了<strong>标识本计算机应用层中的各进程</strong>，在因特网中，<strong>不同计算机中的相同端口号是没有联系的</strong>。</p>
<p>发送方的复用和接收方的分用</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/5-2/5-2-1.png" alt=""  />
</p>
<p>TCP/IP体系的应用层常用协议所使用的运输层熟知端口号</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/5-2/5-2-2.png" alt=""  />
</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>从零开始的计算机网络5-1</title>
      <link>https://blog.0pt.im/learn/1-5-1/</link>
      <pubDate>Mon, 31 Jul 2023 18:09:28 +0800</pubDate>
      
      <guid>https://blog.0pt.im/learn/1-5-1/</guid>
      <description>五.运输层</description>
      <content:encoded><![CDATA[<h1 id="运输层概述">运输层概述</h1>
<p>之前课程所介绍的计算机网络体系结构中的<strong>物理层</strong>、<strong>数据链路层</strong>以及<strong>网络层</strong>它们共同解决了将主机通过异构网络互联起来所面临的问题，<strong>实现了主机到主机的通信</strong>。</p>
<p>但实际上在计算机网络中进行<strong>通信的真正实体是位于通信两端主机中的进程</strong>(AP)。</p>
<p><strong>如何为运行在不同主机上的应用进程提供直接的通信服务是运输层的任务</strong>，运输层协议又称为端到端协议。</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/5-1/5-1-1.png" alt=""  />
</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/5-1/5-1-2.png" alt=""  />
</p>
<p>运输层向高层用户屏蔽了下面网络核心的细节(如网络拓扑、所采用的路由选择协议等)，它使应用进程看见的就<strong>好像是在两个运输层实体之间有一条端到端的逻辑通信信道</strong>。</p>
<p>根据应用需求的不同，<strong>因特网的运输层</strong>为应用层提供了两种不同的运输协议，即<strong>面向连接的TCP</strong>和<strong>无连接的UDP</strong>，这两种协议就是本章要讨论的主要内容。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>从零开始的计算机网络4-9</title>
      <link>https://blog.0pt.im/learn/1-4-9/</link>
      <pubDate>Sun, 30 Jul 2023 18:09:28 +0800</pubDate>
      
      <guid>https://blog.0pt.im/learn/1-4-9/</guid>
      <description>四.网络层</description>
      <content:encoded><![CDATA[<h1 id="虚拟专用网vpn与网络地址转换nat">虚拟专用网VPN与网络地址转换NAT</h1>
<h3 id="虚拟专用网vpnvirtual-private-network">虚拟专用网VPN(Virtual Private Network)</h3>
<p><strong>利用公用的因特网</strong>作为本机构各专用网之间的通信载体，这样的专用网又称为虚拟专用网。由于IPv4地址的紧缺，一个机构能够申请到的IPv4地址数量往往远小于本机构所拥有的主机数量。因此，<strong>虚拟专用网中的各主机所分配的地址应该是本机构可自由分配的专用地址</strong>，而不是需要申请的、在因特网上使用的公有地址。</p>
<p>专用(私有)地址:
10.0.0.0~10.255.255.255(10/8地址块)
172.16.0.0~172.31.255.255(172.16/12地址块)</p>
<p>192.168.0.0~192.168.255.255(192.168/16地址块)</p>
<blockquote>
<p>私有地址只能用于机构内部通信，而不能用于和因特网上的主机通信。</p>
</blockquote>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-9/4-9-1.png" alt=""  />
</p>
<p>从逻辑上看，R1和R2好像是一条直通的点对点链路。因此也被称为IP隧道技术</p>
<p>同一机构内不同部门的内部网络所构成的虚拟专用网VPN又称为<strong>内联网VPN</strong>
有时一个机构的VPN需要有某些外部机构（通常就是合作伙伴）参加进来。这样的VPN就称为<strong>外联网VPN</strong>，在外地工作的员工需要访问公司内部的专用网络时，只要在任何地点接入到因特网，运行驻留在员工PC中的VPN软件，在员工的PC和公司的主机之间建立VPN隧道，即可访问专用网络中的资源。这种VPN称为<strong>远程接入VPN</strong>。</p>
<p>网络地址转换NAT(Network Address Translation)</p>
<p>虽然因特网采用了无分类编址方式来减缓IPv4地址空间耗尽的速度，但由于因特网用户数目的激增，特别是大量小型办公室网络和家庭网络接入因特网的需求不断增加，IPv4地址空间即将面临耗尽的危险仍然没有被解除。</p>
<p>1994年提出了一种网络地址转换NAT的方法再次<strong>缓解了IPv4地址空间即将耗尽的问题</strong>。</p>
<p>NAT能使大量<strong>使用内部专用地址的专用网络用户共享少量外部全球地址来访问因特网上的主机和资源</strong>。</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-9/4-9-2.png" alt=""  />
</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-9/4-9-3.png" alt=""  />
</p>
<p>该转换方法存在一个问题:如果NAT路由器具有N个全球IP地址，那么至多只能有N个内网主机能够同时和因特网上的主机通信。</p>
<p>由于绝大多数的网络应用都是使用运输层协议TCP或UDP来传送数据，因此可以利用运输层的端口号和IP地址一起进行转换。这样，<strong>用一个全球IP地址就可以使多个拥有本地地址的主机同时和因特网上的主机进行通信</strong>。这种将端口号和IP地址一起进行转换的技术叫作<strong>网络地址与端口号转换NAPT</strong>(Network Address and Port Translation)。</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-9/4-9-4.png" alt=""  />
</p>
<p>外网主机不能首先对内网中的主机发起通信，因为NAPT转换表里找不到相应记录。</p>
<p>内网主机不能直接充当因特网服务器。</p>
<p>对于一些P2P网络应用，需要外网主机主动与内网主机进行通信，在通过NAT时会遇到问题,需要网络应用自己使用一些特殊的NAT穿越技术来解决问题。</p>
<p>另外，由于NAT对外网屏蔽了内网主机的网络地址，能为内网的主机提供一定的安全保护。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>从零开始的计算机网络4-8</title>
      <link>https://blog.0pt.im/learn/1-4-8/</link>
      <pubDate>Sat, 29 Jul 2023 18:09:28 +0800</pubDate>
      
      <guid>https://blog.0pt.im/learn/1-4-8/</guid>
      <description>四.网络层</description>
      <content:encoded><![CDATA[<h1 id="网际控制报文协议icmp">网际控制报文协议ICMP</h1>
<p>为了更有效地转发lP数据报和提高交付成功的机会，在网际层使用了网际控制报文协议ICMP(Internet Control Message Protocol)。</p>
<p>主机或路由器使用ICMP来发送差错<strong>报告报文</strong>和<strong>询问报文</strong>。</p>
<p><strong>ICMP报文被封装在IP数据报</strong>中发送。</p>
<p>ICMP差错报告报文共有以下五种:</p>
<ol>
<li>
<p>终点不可达</p>
</li>
<li>
<p>源点抑制</p>
</li>
<li>
<p>时间超过</p>
</li>
<li>
<p>参数问题</p>
</li>
<li>
<p>改变路由(重定向)</p>
</li>
</ol>
<p>1.终点不可达</p>
<p>当路由器或主机不能交付数据报时，就向源点发送终点不可达报文。</p>
<p>具体可再根据ICMP的代码字段细分为目的网络不可达目的主机不可达、目的协议不可达、目的端口不可达、目的网络未知、目的主机未知等13种错误。</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-8/4-8-2.png" alt=""  />
</p>
<p>2.源点抑制</p>
<p>当路由器或主机由于拥塞而丢弃数据报时，就向源点发送源点抑制报文，使源点知道应当把数据报的发送速率放慢。</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-8/4-8-3.png" alt=""  />
</p>
<p>3.时间超过</p>
<p>当路由器收到一个目的IP地址不是自己的IP数据报，会将其生存时间TTL字段的值减1。
若结果不为0，则将该IP数据报转发出去;若结果为O，除丢弃该IP数据报外，还要向源点发送时间超过报文。
另外，当终点在预先规定的时间内不能收到一个数据报的全部数据报片时，就把已收到的数据报片都丢弃，也会向源点发送时间超过报文。</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-8/4-8-4.png" alt=""  />
</p>
<p>4.参数问题</p>
<p>当路由器或目的主机收到IP数据报后，根据其首部中的检验和字段发现首部在传输过程中出现了误码就丢弃该数据报，并向源点发送参数问题报文。</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-8/4-8-5.png" alt=""  />
</p>
<p>5.改变路由（重定向）</p>
<p>路由器把改变路由报文发送给主机，让主机知道下次应将数据报发送给另外的路由器（可通过更好的路由)。</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-8/4-8-6.png" alt=""  />
</p>
<p>以下情况不应发送ICMP差错报告报文:</p>
<ul>
<li>
<p>对ICMP差错报告报文不再发送ICMP差错报告报文</p>
</li>
<li>
<p>对第一个分片的数据报片的所有后续数据报片都不发送ICMP差错报告报文</p>
</li>
<li>
<p>对具有多播地址的数报都不发送ICMP差错报告报文</p>
</li>
<li>
<p>对具有特殊地址(如127.0.0.0或0.0.0.0)的数据报不发送ICMP差错报告报文</p>
</li>
</ul>
<p>常用的ICMP询问报文有以下两种:</p>
<ul>
<li>
<p><strong>回送请求和回答</strong>    ICMP回送请求报文是由主机或路由器向一个特定的目的主机发出的询问。收到此报文的主机必须给源主机或路由器发送ICMP回送回答报文。这种询问报文用来<strong>测试目的站是否可达</strong>及了解其有关状态。</p>
</li>
<li>
<p><strong>时间戳请求和回答</strong>     ICMP时间戳请求报文是请某个主机或路由器回答当前的日期和时间。在ICMP时间戳回答报文中有一个32位的字段，其中写入的整数代表从1900年1月1日起到当前时刻一共有多少秒。这种询问报文用来<strong>进行时钟同步和测量时间</strong>。</p>
</li>
</ul>
<p>ICMP应用举例</p>
<p>1.分组网间探测PING(Packet InterNet Groper)</p>
<ul>
<li>
<p>用来测试主机或路由器间的连通性</p>
</li>
<li>
<p>应用层直接使用网际层的ICMP(没有通过运输层的TCP或UDP)</p>
</li>
<li>
<p>使用ICMP回送请求和回答报文</p>
</li>
</ul>
<blockquote>
<p>就是ping</p>
</blockquote>
<p>2.跟踪路由traceroute</p>
<ul>
<li>
<p>用来测试IP数据报从源主机到达目的主机要经过哪些路由器</p>
</li>
<li>
<p>Windows版本    tracert命令    应用层直接使用网际层ICMP    使用了ICMP回送请求和回答报文以及差错报告报文</p>
</li>
<li>
<p>Unix版本    traceroute命令    在运输层使用UDP协议    仅使用ICMP差错报告报文</p>
</li>
</ul>
<p>跟踪路由traceroute原理</p>
<p>主机依次发送TTL=1、2、3、4&hellip;的回送请求报文（1个1个发，当接收到ICMP差错报告后再发下一个）</p>
<p>经过路由依次丢弃IP数据报并给源主机发送ICMP差错报告（时间超过)</p>
<p>当到达目的主机时，目的主机向源主机发送ICMP回送请求的回答报文，源主机就知道到达终点，停止发送回送请求报文。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>从零开始的计算机网络4-7</title>
      <link>https://blog.0pt.im/learn/1-4-7/</link>
      <pubDate>Fri, 28 Jul 2023 18:09:28 +0800</pubDate>
      
      <guid>https://blog.0pt.im/learn/1-4-7/</guid>
      <description>四.网络层</description>
      <content:encoded><![CDATA[<h1 id="ipv4数据报的首部格式">IPv4数据报的首部格式</h1>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-7/4-7-1.png" alt=""  />
</p>
<p>首部长度</p>
<p>占4比特，表示IP数据报首部的长度。该字段的取值以4字节为单位。</p>
<p>最小十进制取值为5，表示IP数据报首部只有20字节固定部分;</p>
<p>最大十进制取值为15，表示IP数据报首部包含20字节固定部分和最大40字节可变部分;
可选字段</p>
<ul>
<li>
<p>长度从1个字节到40个字节不等。用来支持排错、测量及安全等措施。</p>
</li>
<li>
<p>可选字段增加了IP数据报的功能，但这同时也使得IP数据报的首部长度成为可变的。这就增加了每一个路由器处理IP数据报的开销。实际上可选字段很少被使用。</p>
</li>
</ul>
<p>填充字段</p>
<ul>
<li>确保首部长度为4字节的整数倍。使用全0进行填充。</li>
</ul>
<p>区分服务</p>
<ul>
<li>
<p>占8比特，用来获得更好的服务。</p>
</li>
<li>
<p>该字段在旧标准中叫作服务类型，但实际上一直没有被使用过。1998年，因特网工程任务组IETF把这个字段改名为区分服务。利用该字段的不同数值可提供不同等级的服务质量。</p>
</li>
<li>
<p>只有在使用区分服务时，该字段才起作用。一般情况下都不使用该字段。</p>
</li>
</ul>
<p>总长度</p>
<ul>
<li>
<p>占16比特，表示IP数据报的总长度（首部+数据载荷)。</p>
</li>
<li>
<p>最大取值为十进制的65535，以字节为单位。</p>
</li>
</ul>
<p>举例：（）为二进制   首部长度=(0101) x 4 = 5 x 4 = 20(字节)</p>
<p>总长度=(0000001111111100) = 1020(字节)</p>
<p>数据载荷长度=总长度-首部长度=1020 - 20 = 1000(字节)</p>
<p>标识</p>
<ul>
<li>
<p>占16比特，属于同一个数据报的各分片数据报应该具有相同的标识。</p>
</li>
<li>
<p>IP软件维持一个计数器，每产生一个数据报，计数器值加1，并将此值赋给标识字段。</p>
</li>
</ul>
<p>标志</p>
<p>占3比特，各比特含义如下:</p>
<ul>
<li>
<p>DF位:1表示不允许分片;0表示允许分片</p>
</li>
<li>
<p>MF位:1表示“后面还有分片”;0表示“这是最后一个分片”</p>
</li>
<li>
<p>保留位:必须为0</p>
</li>
</ul>
<p>片偏移</p>
<ul>
<li>
<p>占13比特，指出分片数据报的数据载荷部分偏移其在原数据报的位置有多少个单位。</p>
</li>
<li>
<p>片偏移以8个字节为单位。</p>
</li>
</ul>
<p>举例：对IPv4数据报进行分片</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-7/4-7-2.png" alt=""  />
</p>
<blockquote>
<p>片偏移除8是因为片偏移是以字节做单位。</p>
</blockquote>
<p>生存时间TTL</p>
<ul>
<li>
<p>占8比特，最初以秒为单位，最大生存周期为255秒;路由器转发IP数据报时，将IP数据报首部中的该字段的值减去IP数据报在本路由器上所耗费的时间，若不为0就转发，否则就丢弃。</p>
</li>
<li>
<p>现在以“跳数”为单位，路由器转发IP数据报时，将IP数据报首部中的该字段的值减1，若不为0就转发，否则就丢弃。</p>
</li>
<li>
<p>防止IP数据报在网络中永久兜圈。（前面有提到）</p>
</li>
</ul>
<p>协议</p>
<ul>
<li>占8比特，指明IPv4数据报的数据部分是何种协议数据单元。常用的一些协议和相应的协议字段值如下。</li>
</ul>
<table>
<thead>
<tr>
<th>协议名称</th>
<th>ICMP</th>
<th>IGMP</th>
<th>TCP</th>
<th>UDP</th>
<th>lPv6</th>
<th>OSPF</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>协议字段值</strong></td>
<td>1</td>
<td>2</td>
<td>6</td>
<td>17</td>
<td>41</td>
<td>89</td>
</tr>
</tbody>
</table>
<p>首部检验和</p>
<ul>
<li>
<p>占16比特，用来检测首部在传输过程中是否出现差错。比CRC检验码简单，称为因特网检验和.</p>
</li>
<li>
<p>IP数据报每经过一个路由器，路由器都要重新计算首部检验和，因为某些字段（生存时间、标志、片偏移等)的取值可能发生变化。</p>
</li>
<li>
<p>由于IP层本身并不提供可靠传输的服务，并且计算首部校验和是一项耗时的操作，因此在IPv6中,路由器不再计算首部校验和，从而更快转发IP数据报。</p>
</li>
</ul>
<p>源lP地址和目的IP地址</p>
<ul>
<li>各占32比特，用来填写发送该IP数据报的源主机的IP地址和接收该IP数据报的目的主机的IP地址。</li>
</ul>
<p>例题：某公司网络下图所示。IP地址空间192.168.1.0/24被均分给销售部和技术部两个子网，并已分别为部分主机和路由器接口分配了IP地址，销售部子网的MTU=1500B，技术部子网的MTU=800 B.</p>
<p>(2）假设主机192.168.1.1向主机192.168.1.208发送一个总长度为150OB的IP分组，IP分组的头部长度为20B，路由器在通过接口F1转发该IP分组时进行了分片。若分片时尽可能分为最大片，则一个最大IP分片封装数据的字节数是多少?至少需要分为几个分片?每个分片的片偏移量是多少?</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-7/4-7-3.png" alt=""  />
</p>
<p>解析：</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-7/4-7-4.png" alt=""  />
</p>
<p><strong>这么分是错的</strong>，因为片偏移量必须为整数。</p>
<p>应该取小于780且能被8整除的数，为776。</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-7/4-7-5.png" alt=""  />
</p>
<p>例题：题47-a图是网络拓扑，题47-b图是主机进行Web请求的1个以太网数据帧前80个字节的十六进制及ASCII码内容。(1) Web服务器的IP地址是什么?该主机的默认网关的MAC地址是什么?
(4)该帧所封装的IP分组经过路由器R转发时，需修改IP分组头中的哪些字段。</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-7/4-7-6.png" alt=""  />
</p>
<p>解析：</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-7/4-7-7.png" alt=""  />
</p>
<p>同理，该主机的默认网关的MAC地址是前6给字节，也就是00-21-27-21-51-ee</p>
<p>IP分组经过路由器R时,生存时间字段被减1;</p>
<p>首部检验和会被重新计算;</p>
<p>若IP分组总长度大于MTU，则需要进行分片,此时总长度字段、标志字段片偏移字段都需要修改。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>从零开始的计算机网络4-6</title>
      <link>https://blog.0pt.im/learn/1-4-6/</link>
      <pubDate>Thu, 27 Jul 2023 18:09:28 +0800</pubDate>
      
      <guid>https://blog.0pt.im/learn/1-4-6/</guid>
      <description>四.网络层</description>
      <content:encoded><![CDATA[<h1 id="路由选择协议概述">路由选择协议概述</h1>
<p>静态路由选择</p>
<ul>
<li>
<p>由<strong>人工配置</strong>的网络路由、默认路由、特定主机路由、黑洞路由等都属于静态路由。</p>
</li>
<li>
<p>这种人工配置方式简单、开销小。</p>
</li>
<li>
<p>但不能及时适应网络状态(流量、拓扑等)的变化。</p>
</li>
<li>
<p>一般只在小规模网络中采用。</p>
</li>
</ul>
<p>动态路由选择</p>
<ul>
<li>
<p>路由器通过路由选择协议<strong>自动获取路由信息</strong>。</p>
</li>
<li>
<p>比较复杂、开销比较大。</p>
</li>
<li>
<p><strong>能较好地适应网络状态的变化</strong>。</p>
</li>
<li>
<p>适用于<strong>大规模网络</strong>。</p>
</li>
</ul>
<p>因特网所采用的路由选择协议的主要特点</p>
<ul>
<li>
<p>自适应：动态路由选择，能较好地适应网络状态的变化</p>
</li>
<li>
<p>分布式：路由器之间交换路由信息</p>
</li>
<li>
<p>分层次：将整个因特网划分为许多较小的自治系统AS(Autonomous System)</p>
</li>
</ul>
<p>因特网采用<strong>分层次</strong>的路由选择协议</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-6/4-6-1.png" alt=""  />
</p>
<p>域间路由选择采用外部网关协议EGP</p>
<p>域内路由选择采用内部网关协议IGP</p>
<blockquote>
<p>只是路由选择协议的分类名称，不是具体的路由选择协议。网关一词是因为在早期</p>
</blockquote>
<p>常见的路由选择协议</p>
<p>路由选择协议</p>
<p>内部网关协议IGP</p>
<ul>
<li>
<p>路由信息协议RIP    基于距离向量，RIP在因特网上最早使用</p>
</li>
<li>
<p>内部网关路由协议IGRP    基于距离向量，是思科早期私有的协议，现在已被EIGRP取代</p>
</li>
<li>
<p>增强型内部网关路由协议EIGRP    思科私有的，用来取代IGRP的混合型路由协议(结合距离向量和链路状态)</p>
</li>
<li>
<p>开放式最短路径优先OSPF    基于链路状态，在各种网络中广泛使用</p>
</li>
<li>
<p>中间系统到中间系统IS-IS    基于链路状态，是ISP骨干网上最长常用的IGP协议</p>
</li>
</ul>
<p>外部网关协议EGP</p>
<ul>
<li>边界网关协议BGP</li>
</ul>
<p>路由器的基本结构</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-6/4-6-2.png" alt=""  />
</p>
<p>路由表一般仅包含从目的网络到下一跳的映射</p>
<p>路由表需要对网络拓扑变化的计算最优化</p>
<p>转发表是从路由表得出的
转发表的结构应当使查找过程最优化</p>
<blockquote>
<p>为方便理解，不严格区分路由表和转发表。</p>
</blockquote>
<h3 id="路由信息协议rip的基本工作原理">路由信息协议RIP的基本工作原理</h3>
<p><strong>路由信息协议RIP</strong>(Routing Information Protocol)是内部网关协议IGP中最先得到广泛使用的协议之一，其相关标准文档为RFC 1058。</p>
<p>RIP要求自治系统AS内的每一个路由器都要维护从它自己到AS内其他每一个网络的距离记录。这是一组距离，称为“<strong>距离向量D-V(Distance-Vector)</strong>”。</p>
<p>RIP使用<strong>跳数</strong>(Hop Count)作为度量(Metric)<strong>来衡量到达目的网络的距离</strong>。</p>
<ul>
<li>
<p>路由器到直连网络的距离定义为1。</p>
</li>
<li>
<p>路由器到非直连网络的距离定义为所经过的路由器数加1。</p>
</li>
<li>
<p>允许一条路径最多只能包含15个路由器。<strong>“距离”等于16时相当于不可达</strong>。因此，<strong>RIP只适用于小型互联网</strong>。</p>
</li>
</ul>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-6/4-6-3.png" alt=""  />
</p>
<p>RIP认为<strong>好的路由</strong>就是“距离短”的路由，也就是所<strong>通过路由器数量最少的路由</strong>。当到达同一目的网络有多条“距离相等”的路由时，可以进行<strong>等价负载均衡</strong>。</p>
<p>RIP包含以下三个要点:</p>
<ul>
<li>
<p><strong>和谁交换信息</strong>    仅和<strong>相邻路由器</strong>交换信息</p>
</li>
<li>
<p><strong>交换什么信息</strong>    自己的路由表</p>
</li>
<li>
<p><strong>何时交换信息</strong>    <strong>周期性交换</strong>（例如每30秒)</p>
</li>
</ul>
<p>RIP基本工作过程</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-6/4-6-4.png" alt=""  />
</p>
<p>路由器刚开始工作时，<strong>只知道自己到直连网络的距离为1</strong>。</p>
<p>每个路由器仅<strong>和相邻路由器周期性地交换并更新路由信息</strong>。</p>
<p>若干次交换和更新后，<strong>每个路由器都知道到达本AS内各网络的最短距离和下一跳地址</strong>，称为收敛。</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-6/4-6-5.png" alt=""  />
</p>
<p>RIP的路由条目的更新规则</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-6/4-6-6.png" alt=""  />
</p>
<p>C将其路由表发给D，结果D改造，对D原有路由表进行更新。</p>
<p>例题：某自治系统内采用RIP协议，若该自治系统内的路由器R1收到其邻居路由器R2的距离矢量，距离矢量中包含信息&lt; net1,16 &gt;，则能得出的结论是</p>
<p>A.R2可以经过R1到达net1，跳数为17    B.R2可以到达net1，跳数为16</p>
<p>C.R1可以经过R2到达net1，跳数为17    D.R1不能经过R2到达net1</p>
<p>解析：在RIP协议中，距离16表明目的网络不可达。因此，R2无法到达net1，R1也无法通过R2到达net1。选D</p>
<p>RIP存在“<strong>坏消息传播得慢</strong>”的问题</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-6/4-6-7.png" alt=""  />
</p>
<p>R1与N1连接出现故障。将N1改成16跳，并发送路由信息给R2，而此时R2也发路由信息给R1.若R2发送的路由信息先到，R1更新路由表N1为3跳，发送回R2，R2收到后，更新自身路由表N1为4跳，再发回R1&hellip;&hellip;直到R1R2路由表关于N1的均为16跳才停止，这叫做收敛。</p>
<p>“坏消息传播得慢”又称为<strong>路由环路</strong>或<strong>距离无穷计数</strong>问题，这是<strong>距离向量算法的一个固有问题</strong>。可以采取多种措施<strong>减少</strong>出现该问题的概率或减小该问题带来的危害。</p>
<ul>
<li>
<p><strong>限制最大路径距离</strong>为15（16表示不可达)</p>
</li>
<li>
<p>当路由表发生变化时就立即发送更新报文（即“<strong>触发更新</strong>”)，而不仅是周期性发送</p>
</li>
<li>
<p>让路由器记录收到某特定路由信息的接口，而不让同一路由信息再通过此接口向反方向传送（即“<strong>水平分割</strong>”）</p>
</li>
</ul>
<p>例题：假设R1、R2、R3采用RIP协议交换路由信息，且均已收敛。若R3检测到网络201.1.2.0/25不可达，并向R2通告一次新的距离向量，则R2更新后，其到达该网络的距离是</p>
<p>A.2    B.3    C.16    D.17</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-6/4-6-8.png" alt=""  />
</p>
<p>解析：</p>
<p>由题知，R3与201.1.2.0/25连接之间出现故障，R3将其改为201.1.2.0/25为16跳，并向R2通告一次新的距离向量。则R2也将201.1.2.0/25改为为16跳。</p>
<p>由知，R2更新后，则是R1给R2发送了RIP更新报文，R2又将201.1.2.0/25改为3跳。</p>
<p>选B</p>
<h3 id="开放最短路径优先ospf的基本工作原理">开放最短路径优先OSPF的基本工作原理</h3>
<p>开放最短路径优先OSPF(Open Shortest Path First)，是为克服RIP的缺点在1989年开发出来</p>
<ul>
<li>
<p>“开放”表明OSPF协议不是受某一家厂商控制，而是<strong>公开发表</strong>的。</p>
</li>
<li>
<p>“最短路径优先”是因为使用了Dijkstra提出的<strong>最短路径算法</strong>SPF。</p>
</li>
</ul>
<p>OSPF是<strong>基于链路状态</strong>的，而不像RIP那样是基于距离向量的。</p>
<p>OSPF采用SPF算法计算路由，从算法上保证了<strong>不会产生路由环路</strong>。</p>
<p>OSPF<strong>不限制网络规模</strong>，更新效率高，<strong>收敛速度快</strong>。</p>
<p>链路状态是指本路由器都<strong>和哪些路由器相邻</strong>，以及相应<strong>链路的“代价”</strong>(cost)。</p>
<ul>
<li>“代价”用来表示费用、距离、时延、带宽，等等。这些都由网络管理人员来决定。</li>
</ul>
<p>举例：思科路由器中OSPF计算代价的方法: 100Mbps/链路带宽</p>
<p>计算结果小于1的值仍记为1;大于1且有小数的，舍去小数。</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-6/4-6-10.png" alt=""  />
</p>
<p>OSPF相邻路由器之间通过交互<strong>问候(Hello)分组</strong>，建立和维护<strong>邻居关系</strong>。</p>
<ul>
<li>
<p>Hello分组封装在lP数据报中，发往组播地址224.0.0.5;</p>
</li>
<li>
<p>发送周期为10秒</p>
</li>
<li>
<p>40秒未收到来自邻居路由器的Hello分组，则认为该邻居路由器不可达。</p>
</li>
</ul>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-6/4-6-11.png" alt=""  />
</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-6/4-6-12.png" alt=""  />
</p>
<p>使用OSPF的每个路由器都会产生<strong>链路状态通告</strong>LSA(Link State Advertisement)。LSA中包含以下内容:</p>
<ul>
<li>
<p>直连网络的链路状态信息</p>
</li>
<li>
<p>邻居路由器的链路状态信息</p>
</li>
</ul>
<p>LSA被封装在<strong>链路状态更新分组LSU</strong>中，采用<strong>洪泛法</strong>发送。</p>
<p>使用OSPF的每个路由器都有一个<strong>链路状态数据库LSDB</strong>，用于存储LSA。</p>
<p>通过各路由器洪泛发送封装有自己LSA的LSU分组，各路由器的LSDB最终将达到一致。</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-6/4-6-13.png" alt=""  />
</p>
<p>使用OSPF的各路由器<strong>基于LSDB进行最短路径优先SPF计算</strong>，构建出各自到达其他各路由器的最短路径，即构建各自的路由表。</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-6/4-6-14.png" alt=""  />
</p>
<p>OSPF有以下五种分组类型</p>
<ul>
<li>
<p>类型1，<strong>问候</strong>(Hello)分组    用来发现和维护邻居路由器的可达性。</p>
</li>
<li>
<p>类型2，<strong>数据库描述</strong>(Database Description)分组    向邻居路由器给出自己的链路状态数据库中的所有链路状态项目的摘要信息</p>
</li>
<li>
<p>类型3，<strong>链路状态请求</strong>(Link State Request)分组    向邻居路由器请求发送某些链路状态项目的详细信息。</p>
</li>
<li>
<p>类型4，<strong>链路状态更新</strong>(Link State Update)分组    路由器使用这种分组将其链路状态进行洪泛发送，即用洪泛法对全网更新链路状态。</p>
</li>
<li>
<p>类型5，<strong>链路状态确</strong>认(Link State Acknowledgment)分组    这是对链路状态更新分组的确认分组。</p>
</li>
</ul>
<p>OSPF的基本工作过程</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-6/4-6-15.png" alt=""  />
</p>
<p>OSPF在多点接入网络中路由器邻居关系的建立</p>
<ul>
<li>
<p>选举指定路由器DR(designated router)和备用的指定路由器BDR(backup designated router)</p>
</li>
<li>
<p>所有的非DR/BDR只与DR/BDR建立邻居关系</p>
</li>
<li>
<p>非DR/BDR之间通过DR/BDR交换信息</p>
</li>
<li>
<p>DR出了故障就用BDR</p>
</li>
</ul>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-6/4-6-16.png" alt=""  />
</p>
<p>为了使OSPF能够用于规模很大的网络，OSPF把一个自治系统再划分为若干个更小的范围，叫做<strong>区域</strong>(Area)</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-6/4-6-17.png" alt=""  />
</p>
<p>区域内路由器IR(internal router): R1,R2,R8,49</p>
<p>区域边界路由器ABR(area border router): R3,R4,R7</p>
<p>主干路由器BBR(backbone router): R3,R4,R5,R6,R7</p>
<p>自治系统边界路由器ASBR(AS border router): R6</p>
<h3 id="边界网关协议bgp的基本工作原理">边界网关协议BGP的基本工作原理</h3>
<p>因特网采用分层次的路由选择协议</p>
<p>内部网关协议IGP（例如路由信息协议RIP或开放最短路径优先OSPF）</p>
<ul>
<li>
<p>设法使分组在一个自治系统内尽可能有效地从源网络传输到目的网络</p>
</li>
<li>
<p>无需考虑自治系统外部其他方面的策略</p>
</li>
</ul>
<p>外部网关协议EGP（例如边界网关协议BGP）</p>
<ul>
<li>在不同自治系统内，度量路由的“代价”(距离，带宽，费用等）可能不同。因此，对于自治系统之间的路由选择，使用“代价”作为度量来寻找最佳路由是不行的。</li>
</ul>
<p>外部网关协议EGP（例如边界网关协议BGP）</p>
<ul>
<li>
<p>在不同自治系统内，度量路由的“代价”(距离，带宽，费用等）可能不同。因此，对于自治系统之间的路由选择，使用“代价”作为度量来寻找最佳路由是不行的。</p>
</li>
<li>
<p>自治系统之间的路由选择必须考虑相关策略(政治，经济，安全等)</p>
</li>
<li>
<p>BGP只能是力求寻找一条能够到达目的网络且比较好的路由（不能兜圈子)，而并非要寻找一条最佳路由</p>
</li>
</ul>
<p>在配置BGP时，每个自治系统的管理员要选择至少一个路由器作为该自治系统的“<strong>BGP发言人</strong>&ldquo;不同自治系统的BGP发言人要交换路由信息，首先必须建立<strong>TCP连接</strong>，端口号为179</p>
<ul>
<li>
<p>在此TCP连接上交换BGP报文以建立<strong>BGP会话</strong></p>
</li>
<li>
<p>利用BGP会话<strong>交换路由信息</strong>（例如，增加新的路由，或撤销过时的路由，以及报告出错的情况等)</p>
</li>
<li>
<p>使用TCP连接交换路由信息的两个BGP发言人，彼此称为对方的<strong>邻站(<strong>neighbor)或</strong>对等站</strong>(peer)BGP发言人除了运行BGP外，还必须运行自己所在自治系统所使用的内部网关协议IGP，例如OSPF或RIlP。</p>
</li>
</ul>
<p>BGP发言人<strong>交换网络可达性的信息</strong>（要到达某个网络所要经过的一系列自治系统)</p>
<p>当BGP发言人互相交换了网络可达性的信息后，各BGP发言人就<strong>根据</strong>所采用的<strong>策略</strong>从收到的路由信息中<strong>找出到达各自治系统的较好的路由</strong>。也就是构造出树形结构、<strong>不存在回路的自治系统连通图</strong>。</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-6/4-6-18.png" alt=""  />
</p>
<p>BGP适用于多级结构的因特网</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-6/4-6-19.png" alt=""  />
</p>
<p>BGP-4有以下四种报文</p>
<ul>
<li>
<p>OPEN（打开）报文:用来与相邻的另一个BGP发言人建立关系，使通信初始化。</p>
</li>
<li>
<p>UPDATE（更新）报文:用来通告某一路由的信息，以及列出要撤销的多条路由。</p>
</li>
<li>
<p>KEEPALIVE（保活）报文:用来周期性地证实邻站的连通性。</p>
</li>
<li>
<p>NOTIFICATION（通知）报文:用来发送检测到的差错。</p>
</li>
</ul>
<p>例题：R1与R2之间利用哪个路由协议交换路由信息?该路由协议的报文被封装到哪个协议的分组中进行传输?</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-6/4-6-20.png" alt=""  />
</p>
<p>解析：</p>
<p>R1和R2分别位于两个不同的自治系统AS1和AS2中;</p>
<p>自治系统之间需要使用外部网关协议EGP这一类协议，具体为<strong>边界网关协议BGP</strong>，目前使用最多的版本是BGP-4;</p>
<p>BGP-4报文被封装在<strong>TCP报文段</strong>中进行传输。</p>
<p>例题：直接封装RIP、OSPF、BGP报文的协议分别是</p>
<p>A.TCP、UDP、IP    B.TCP、IP、UDP    C.UDP、TCP、IP    D.UDP、IP、TCP</p>
<p>解析：</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-6/4-6-21.png" alt=""  />
</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>从零开始的计算机网络4-5</title>
      <link>https://blog.0pt.im/learn/1-4-5/</link>
      <pubDate>Wed, 26 Jul 2023 18:09:28 +0800</pubDate>
      
      <guid>https://blog.0pt.im/learn/1-4-5/</guid>
      <description>四.网络层</description>
      <content:encoded><![CDATA[<h1 id="静态路由配置及其可能产生的路由环路问题">静态路由配置及其可能产生的路由环路问题</h1>
<p>静态路由配置是指用户或网络管理员使用路由器的相关命令给路由器<strong>人工配置路由表</strong>。</p>
<ul>
<li>
<p>这种人工配置方式简单、开销小。但<strong>不能及时适应网络状态(流量、拓扑等)的变化</strong>。</p>
</li>
<li>
<p>一般只在小规模网络中采用。</p>
</li>
</ul>
<p>使用静态路由配置可能出现以下<strong>导致</strong>产生<strong>路由环路</strong>的错误</p>
<ul>
<li>
<p>配置错误</p>
</li>
<li>
<p>聚合了不存在的网络</p>
</li>
<li>
<p>网络故障</p>
</li>
</ul>
<p>假设R1要转发给192.168.2.0/24，应该转发给R2的接口0。但是R1路由表除了直连自动识别外，没有R2接口0，换句话说，R1不知道目的网络的存在。</p>
<p>因此，我们可以使用路由器的相关配置命令，给R1添加一条到达该目的网络的路由条目。</p>
<p>该路由条目是是我们人工设置的静态路由。</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-5/4-5-1.png" alt=""  />
</p>
<p>默认路由为0.0.0.0/0，对于本例，下一跳为R2的接口0</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-5/4-5-2.png" alt=""  />
</p>
<p>人工配置默认路由，减少人工配置工作量，可以删了上一个静态路由。</p>
<p>特定主机路由</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-5/4-5-3.png" alt=""  />
</p>
<p>静态路由配置错误导致路由环路</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-5/4-5-4.png" alt=""  />
</p>
<p>R2要转发IP数据报给192.168.1.0/24，但是把静态路由配错了如图所示。如何会发给R3，R3检查路由表，把该数据报发给R2,R2检查路由表，又发给R3，形成<strong>路由环路</strong>。</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-5/4-5-5.png" alt=""  />
</p>
<p>为了<strong>防止IP数据报在路由环路中永久兜圈</strong>，在IP数据报首部设有<strong>生存时间TTL</strong>字段。</p>
<p>IP数据报进入路由器后，TTL字段的值减1。若TTL的值不等于0，则被路由器转发，否则被丢弃。</p>
<p>聚合了不存在的网络而导致的路由环路</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-5/4-5-6.png" alt=""  />
</p>
<p>先把黑洞路由当作不存在。R2要转发给192.168.2.0/24，检查路由表，发现192.168.0.0/22的聚合路由，于是发送给R1，R1检查路由表，匹配192.168.2.0/24，于是发送给192.168.2.0/24。</p>
<p>但是，聚合路由192.168.0.0/22包含4个IP，其中2个还不存在，试想，当R2要转发给一个不存在的IP192.168.0.0/24，检查路由表，发现192.168.0.0/22的聚合路由，于是发送给R1，R1检查路由表，只能匹配默认路由，于是发回给R2，然后就形成路由环路。</p>
<p>所以，我们可以在路由表中，添加所聚合的、不存在的黑洞路由。此时R2要转发给一个不存在的IP192.168.0.0/24，检查路由表，发现192.168.0.0/22的聚合路由与192.168.0.0/24的黑洞路由，根据最长前缀匹配，选择到黑洞路由，之后，该数据报被丢弃，相当于进入黑洞，有去无回。</p>
<p>网络故障导致的路由环路</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-5/4-5-7.png" alt=""  />
</p>
<p>当图示网络故障，路由表会自动删除所直连的路由记录。此时R1要发送给192.168.1.0/24，检查路由表，发现192.168.0.0/22的聚合路由，于是发送给R1，R1检查路由表，只能匹配默认路由，于是发回给R2，然后就形成路由环路。</p>
<p>所以，我们同样也可以添加黑洞路由。可以设置黑洞路由在故障发送后路由记录被删除后自动生效。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>从零开始的计算机网络4-4</title>
      <link>https://blog.0pt.im/learn/1-4-4/</link>
      <pubDate>Tue, 25 Jul 2023 18:09:28 +0800</pubDate>
      
      <guid>https://blog.0pt.im/learn/1-4-4/</guid>
      <description>四.网络层</description>
      <content:encoded><![CDATA[<h1 id="数据报的发送和转发过程">数据报的发送和转发过程</h1>
<p>IP数据报的发送和转发过程包含以下两部分:</p>
<ul>
<li>
<p>主机发送IP数据报</p>
</li>
<li>
<p>路由器转发IP数据报</p>
</li>
</ul>
<p>为了将重点放在TCP/IP协议栈的网际层发送和转发IP数据报的过程上，在之后的举例中，我们<strong>忽略使用ARP协议来获取目的主机或路由器接口的MAC地址的过程以及以太网交换机自学习和转发帧的过程</strong>。</p>
<p>举例：</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-4/4-4-1.png" alt=""  />
</p>
<p>假设C要发送数据给F，源主机如何知道目的主机是否与自己在同一个网络中？通过想与运算。</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-4/4-4-2.png" alt=""  />
</p>
<p>C怎么知道R的存在？</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-4/4-4-3.png" alt=""  />
</p>
<p>指定默认网关。</p>
<p>假设A发送数据给D</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-4/4-4-4.png" alt=""  />
</p>
<p>路由器是如何转发呢？</p>
<ul>
<li>
<p>检查lP数据报首部是否出错:若出错，则直接丢弃该lIP数据报并通告源主机若没有出错，则进行转发</p>
</li>
<li>
<p>根据lP数据报的目的地址在路由表中查找匹配的条目:若找到匹配的条目，则转发给条目中指示的下一跳若找不到，则丢弃该lP数据报并通告源主机</p>
</li>
</ul>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-4/4-4-5.png" alt=""  />
</p>
<p>将目的地址与目的网络相应的地址掩码进行相与，得到的结果为目的网络，即匹配。</p>
<blockquote>
<p>路由器隔离广播域，就算广播数据报的目的地址为其他网络，也不转发。</p>
</blockquote>
<p>例题：下列网络设备中，能够抑制广播风暴的是</p>
<p>1中继器  2集线器  3网桥  4路由器</p>
<p>A.仅1和2  B.仅3  C.仅3和4  D.仅4</p>
<p>解析：</p>
<p>中继器和集线器工作在物理层，既不隔离冲突域也不隔离广播域。</p>
<p>网桥和交换机(多端口网桥）工作在数据链路层，可以隔离冲突域，不能隔离广播域。</p>
<p>路由器工作在网络层，既隔离冲突域，也隔离广播域。</p>
<p>选D</p>
<p>例题：下列关于IP路由器概念的描述中，正确的是</p>
<p>1运行路由协议，设置路由表</p>
<p>2监测到拥塞时，合理丢弃IP分组</p>
<p>3对收到的IP分组头进行差错校验，确保传输的IP分组不丢失</p>
<p>4根据收到的IP分组的目的IP地址，将其转发到合适的输出线路上</p>
<p>A.仅34    B.仅123    C.仅124    D.1234</p>
<p>解析：</p>
<p>IP路由器工作在TCP/IP体系结构的网际层(或称IP层)，TCP/IP体系结构的网际层并不负责可靠传输，也就是不能确保传输的IP分组不丢失。</p>
<p>IP路由器对收到的lP分组头进行差错校验，当发现错误时会丢弃该IP分组并向源主机发送ICMP差错报告报文(类型为参数错误)。</p>
<p>综上所述，题目中的描述ⅢI是错误的，利用排除法可知选项C正确。题目中的其他描述项都是正确的。</p>
<p>例题：</p>
<p>某网络拓扑如下图所示，其中路由器内网接口、DHCP服务器、WWW服务器与主机1均采用静态IP地址配置，相关地址信息见图中标注;主机2~主机N通过DHCP服务器动态获取IP地址等配置信息。</p>
<p>若主机1的子网掩码和默认网关分别配置为255.255.255.0和111.123.15.2，则该主机是否能访问WWW服务器?是否能访问Internet?请说明理由。</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-4/4-4-6.png" alt=""  />
</p>
<p>解析：主机1可以访问WWW服务器。从IP地址与子网掩码配置以及物理连接方面看，主机1和wwW服务器在同一网络中。</p>
<p>主机1不能访问Internet，因为它的默认网关错误配置成了DHCP服务器的IP地址,DHCP服务器不具备路由器的功能,无法将IP分组转发到Internet。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>从零开始的计算机网络4-3</title>
      <link>https://blog.0pt.im/learn/1-4-3/</link>
      <pubDate>Mon, 24 Jul 2023 18:09:28 +0800</pubDate>
      
      <guid>https://blog.0pt.im/learn/1-4-3/</guid>
      <description>四.网络层</description>
      <content:encoded><![CDATA[<h1 id="ipv4地址概述">IPv4地址概述</h1>
<p>在TCP/IP体系中，IP地址是一个最基本的概念，我们必须把它弄清楚。</p>
<p>IPv4地址就是给因特网(Internet)上的<strong>每一台主机(或路由器）的每一个接口</strong>分配一个在全世界范围内是<strong>唯一的32比特的标识符</strong>。</p>
<p>IP地址由因特网名字和数字分配机构ICANN(Internet Corporation for Assigned Names and Numbers)进行分配。</p>
<ul>
<li>
<p>我国用户可向亚太网络信息中心APNIC(Asia Pacific Network Information Center)申请IP地址，需要缴费。</p>
</li>
<li>
<p>2011年2月3日，互联网号码分配管理局IANA(由ICANN行使职能）宣布，IPv4地址已经分配完毕。</p>
</li>
<li>
<p>我国在2014至2015年也逐步停止了向新用户和应用分配IPv4地址。同时全面开展商用部署</p>
</li>
</ul>
<p><strong>IPv4地址的编址方法经历了如下三个历史阶段</strong>:</p>
<ul>
<li>
<p>1981年  分类编址</p>
</li>
<li>
<p>1985年  划分子网</p>
</li>
<li>
<p>1993年  无分类编址</p>
</li>
</ul>
<p>32比特的IPv4地址不方便阅读、记录以及输入等，因此IPv4地址采用点分十进制表示方法以方便用户使用。</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-3/4-3-1.png" alt=""  />
</p>
<p>例题：请将以下这些32比特的IPv4地址转换为点分十进制形式。</p>
<p>(1) 00001010 11111110 00001111 11110000</p>
<p>(2)10101100 00010000 10111111 11110111</p>
<p>(3)11000000 10101000 10100101 00000111</p>
<p>答案：</p>
<p>(1)10.254.15.240    (2)172.16.191.247    (3)192.168.165.7</p>
<blockquote>
<p>二进制与十进制的转换自己学，较简单</p>
</blockquote>
<h3 id="分类编址的ipv4地址">分类编址的IPv4地址</h3>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-3/4-3-2.png" alt=""  />
</p>
<p>注意事项:</p>
<p>只有A类、B类和C类地址可分配给网络中的主机或路由器的各接口</p>
<p>主机号为“全0”的地址是网络地址，不能分配给主机或路由器的各接口</p>
<p>主机号为“全1”的地址是广播地址，不能分配给主机或路由器的各接口</p>
<h3 id="a类地址">A类地址</h3>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-3/4-3-3.png" alt=""  />
</p>
<p>可指派的网络数量为2^(8-1) - 2 = 126(减2的原因是除去最小网络号0和最大网络号127)</p>
<p>每个网络中可分配的IP地址数量为2^24 -2= 16777214(减2的原因是除去主机号为全0的网络地址和全1的广播地址)</p>
<h3 id="b类地址">B类地址</h3>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-3/4-3-5.png" alt=""  />
</p>
<p>可指派的网络数量为2^(16-2) =16384</p>
<p>每个网络中可分配的IP地址数量为2^16 - 2 = 65534(减2的原因是除去主机号为全0的网络地址和全1的广播地址)</p>
<p>注意:有些教材中指出128.0是保留网络号，B类第一个可指派的网络号为128.1。但根据2002年9月发表的RFC3330文档，128.0网络号已经可以分配了。</p>
<h3 id="c类地址">C类地址</h3>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-3/4-3-6.png" alt=""  />
</p>
<p>可指派的网络数量为2^(24-3) = 2097152</p>
<p>每个网络中可分配的IP地址数量为2^8 - 2= 254 (减2的原因是除去主机号为全0的网络地址和全1的广播地址)</p>
<p>注意:有些教材中指出192.0.0是保留网络号，C类第一个可指派的网络号为192.0.1。但根据2002年9月发表的RFC 3330文档，192.0.0网络号已经可以分配了。只不过目前还没有分配出去。</p>
<p>例题：</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-3/4-3-7.png" alt=""  />
</p>
<p>解析：</p>
<p>1.根据地址左起第一个十进制数的值，可以判断出网络类别(小于127的为A类，128~191的为B类，192~223的为C类);</p>
<p>2.根据网络类别，就可找出地址中的网络号部分和主机号部分(A类地址网络号为左起第一个字节，B类地址网络号为左起前两个字节,C类地址网络号为左起前三个字节);</p>
<p>3.以下三种情况的地址不能指派给主机或路由器接口:</p>
<ul>
<li>
<p>A类网络号0和127</p>
</li>
<li>
<p>主机号为“全0”，这是网络地址</p>
</li>
<li>
<p>主机号为“全1”，这是广播地址</p>
</li>
</ul>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-3/4-3-8.png" alt=""  />
</p>
<p>例题：下列IP地址中，只能作为IP分组的源IP地址但不能作为目的IP地址的是</p>
<p>A.0.0.0.0    B.127.0.0.1    C.20.10.10.3    D.255.255.255.25</p>
<p>解析：</p>
<p>地址0.0.0.0是一个特殊的IPv4地址，只能作为源地址使用，表示“在本网络上的本主机”。封装有DHCPDiscovery报文的IP分组的源地址使用0.0.0.0;</p>
<p>以127开头且后面三个字节非“全O”或“全1”的IP地址是一类特殊的IPv4地址，既可以作为源地址使用，也可以作为目的地址使用，用于本地软件环回测试，例如常用的环回测试地址127.0.0.1;</p>
<p>地址255.255.255.255是一个特殊的IPv4地址，只能作为目的地址使用，表示“只在本网络上进行广播(各路由器均不转发)”。</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-3/4-3-9.png" alt=""  />
</p>
<p>例题：请根据本节课所学内容给出下图各网络的IPv4地址分配方案。请按照节约IP地址的原则进行分配。</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-3/4-3-10.png" alt=""  />
</p>
<p>解析：</p>
<p><strong>路由器接口也需要一个ip地址</strong></p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-3/4-3-11.png" alt=""  />
</p>
<h3 id="划分子网的的ipv4地址">划分子网的的IPv4地址</h3>
<p>将原有的网络地址划分成若干个更细的子网，避免重复申请新的网络地址，从而节约网络地址。</p>
<p>如某单位申请了一个b类地址145.16.0.0，将其分为3个子网，主机号为145.16向后借去子网号，如145.16.0，145.16.2，145.16.3</p>
<p>10010001.00010000.00000000.00000000       (145.16.0.0)</p>
<p>10010001.00010000.00000001.00000000       (145.16.1.0)</p>
<p>10010001.00010000.00000010.00000000       (145.16.2.0)</p>
<p>10010001.00010000.00000011.00000000       (145.16.3.0)</p>
<p><strong>32比特的子网掩码可以表明分类IP地址的主机号部分被借用了几个比特作为子网号</strong></p>
<ul>
<li>
<p>子网掩码使用<strong>连续的比特1来对应网络号和子网号</strong></p>
</li>
<li>
<p>子网掩码使用<strong>连续的比特0来对应主机号</strong></p>
</li>
<li>
<p>将划分子网的<strong>IPv4地址</strong>与其相应的<strong>子网掩码</strong>进行<strong>逻辑与运算</strong>就可得到IPv4地址<strong>所在子网的网络地址</strong></p>
</li>
</ul>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-3/4-3-12.png" alt=""  />
</p>
<p>例题：已知某个网络的地址为218.75.230.0，使用子网掩码255.255.255.128对其进行子网划分，请给出划分细节。</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-3/4-3-13.png" alt=""  />
</p>
<p>对正常c类网进行分析</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-3/4-3-14.png" alt=""  />
</p>
<p>但是我们要分子网将主机号写成8个比特的二进制数</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-3/4-3-15.png" alt=""  />
</p>
<p>相当于分成2个子网。</p>
<p>例题：已知某个网络的地址为218.75.230.0，使用子网掩码255.255.255.192对其进行子网划分，请给出划分细节。</p>
<p>解析：</p>
<p>1.根据所给网络地址可知其为C类网络地址，网络号占3个字节，主机号占1个字节;</p>
<p>2.根据所给子网掩码可知从1字节主机号中借用2位作为子网号;</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-3/4-3-16.png" alt=""  />
</p>
<p>例题：某主机的IP地址为180.80.77.55，子网掩码为255.255.252.0，如该主机向其所在子网发送广播分组，则目的地址可以是</p>
<p>A.180.80.76.0    B.180.80.76.255    C.180.80.77.255    D.180.80.79.255</p>
<p>解析：</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-3/4-3-18.png" alt=""  />
</p>
<p>默认的子网掩码是指在未划分子网的情况下使用的子网掩码。</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-3/4-3-19.png" alt=""  />
</p>
<h3 id="无分类编址的ipv4地址">无分类编址的IPv4地址</h3>
<p>划分子网在一定程度上缓解了因特网在发展中遇到的困难，但是<strong>数量巨大的C类网</strong>因为其<strong>地址空间太小</strong>并<strong>没有得到充分使用</strong>，而因特网的IP地址仍在加速消耗，整个<strong>IPv4地址空间面临全部耗尽的威胁</strong>。</p>
<p>为此，因特网工程任务组IETF又提出了采用<strong>无分类编址</strong>的方法来解决IP地址紧张的问题同时还专门成立IPv6工作组负责研究新版本IP以彻底解决IP地址耗尽问题。</p>
<p>1993年，IETF发布了<strong>无分类域间路由选择</strong>CIDR(Classless Inter-Domain Routing)的RFC文档:RFC 1517~1519和1520。</p>
<ul>
<li>
<p><strong>CIDR消除了传统的A类、B类和C类地址，以及划分子网的概念</strong>;</p>
</li>
<li>
<p><strong>CIDR可以更加有效地分配IPv4的地址空间</strong>，并且可以在新的IPv6使用之前允许因特网的规模继续增长。</p>
</li>
</ul>
<p>CIDR使用“斜线记法”，或称CIDR记法。即在IPv4地址后面加上斜线“/”，在斜线后面写上网络前缀所占的比特数量。</p>
<p>举例：128.14.35.7 / 20</p>
<p>网络前缀占用的比特数量：20  主机编号占用的比特数量： 32-20=12</p>
<p>CIDR实际上是<strong>将网络前缀都相同的连续的IP地址组成一个“CIDR地址块”</strong>。</p>
<p>我们只要知道CIDR地址块中的任何一个地址，就可以知道该地址块的全部细节:</p>
<ul>
<li>
<p>地址块的最小地址</p>
</li>
<li>
<p>地址块的最大地址</p>
</li>
<li>
<p>地址块中的地址数量</p>
</li>
<li>
<p>地址块聚合某类网络(A类、B类或C类)的数量</p>
</li>
<li>
<p>地址掩码（也可继续称为子网掩码）</p>
</li>
</ul>
<p>例题：请给出CIDR地址块128.14.35.7/20的全部细节（最小地址，最大地址，地址数量，聚合C类网数量，地址掩码)。</p>
<p>解析：</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-3/4-3-20.png" alt=""  />
</p>
<p>例题：请给出CIDR地址块206.0.64.8/18的全部细节（最小地址，最大地址，地址数量，聚合C类网数量，地址掩码）。</p>
<p>解析：</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-3/4-3-21.png" alt=""  />
</p>
<p><strong>路由聚合</strong>(构造超网)</p>
<p>举例：</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-3/4-3-22.png" alt=""  />
</p>
<p><strong>网络前缀越长，地址块越小，路由越具体</strong>;</p>
<p>若路由器查表转发分组时发现有多条路由可选，则选择网络前缀最长的那条，这称为<strong>最长前缀匹配</strong>,因为这样的路由更具体。</p>
<p>例题：在子网192.168.4.0 / 30中，能接收目的地址为192.168.4.3的IP分组的最大主机数是</p>
<p>A.0    B.1    C.2    D.4</p>
<p>解析：</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-3/4-3-23.png" alt=""  />
</p>
<p>选C</p>
<p>例题：某路由表中有转发接口相同的4条路由表项，其目的网络地址分别为35.230.32.0/21、35.230.40.0/21、35.230.48.0/21和35.230.56.0/21，将该4条路由聚合后的目的网络地址为</p>
<p>A.35.230.0.0/19    B.35.230.0.0/20    C.35.230.32.0/19    D.35.230.32.0/20</p>
<p>解析：</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-3/4-3-24.png" alt=""  />
</p>
<p>故选C</p>
<h3 id="ipv4地址的应用规划">IPv4地址的应用规划</h3>
<p>1.定长的子网掩码FLSM</p>
<ul>
<li>
<p>使用同一个子网掩码来划分子网</p>
</li>
<li>
<p>每个子网所分配的IP地址数量相同，造成IP地址的浪费</p>
</li>
</ul>
<p>2.变长的子网掩码VLSM</p>
<ul>
<li>
<p>使用不同的子网掩码来划分子网</p>
</li>
<li>
<p>每个子网所分配的IP地址数量可以不同，尽可能减少对IP地址的浪费</p>
</li>
</ul>
<p>FLSM举例</p>
<p>假设申请到的C类网络为218.75.230.0，请使用定长的子网掩码给下图所示的小型互联网中的各设备分配IP地址。</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-3/4-3-25.png" alt=""  />
</p>
<p>应用需求:将C类网络218.75.230.0划分成5个子网，每个子网上可分配的IP地址数量不得少于各自的需求。</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-3/4-3-26.png" alt=""  />
</p>
<p>任选5个</p>
<p>VLSM举例</p>
<p>假设申请到的C类网络为218.75.230.0/24，请使用定长的子网掩码给下图所示的小型互联网中的各设备分配IP地址。</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-3/4-3-27.png" alt=""  />
</p>
<p>应用需求:从地址块218.75.230.0/24中取出5个地址块</p>
<p>(1个“/27”地址块，3个“/28”地址块，1个“/30&quot;(1个“/27”地址块，3个“/28”地址块，1个“/30&quot;地址块)，按需分配给上图所示的5个网络。</p>
<p>在该地址块中给左图所示的网络N1~N5分配子块，分配原则是“<strong>每个子块的起点位置不能随意选取，只能选取块大小整数倍的地址作为起点</strong>”。建议先给大的子块分配。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>从零开始的计算机网络4-2</title>
      <link>https://blog.0pt.im/learn/1-4-2/</link>
      <pubDate>Sun, 23 Jul 2023 18:09:28 +0800</pubDate>
      
      <guid>https://blog.0pt.im/learn/1-4-2/</guid>
      <description>四.网络层</description>
      <content:encoded><![CDATA[<h1 id="网络层提供的两种服务">网络层提供的两种服务</h1>
<h3 id="面向连接的虚电路服务">面向连接的虚电路服务</h3>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-2/4-2-1.png" alt=""  />
</p>
<p><strong>可靠通信由网络来保证</strong></p>
<p>必须建立<strong>网络层的连接</strong>——<strong>虚电路VC</strong>(Virtual Circuit)</p>
<p>通信双方<strong>沿着已建立的虚电路发送分组</strong></p>
<p>目的主机的地址仅在连接建立阶段使用，之后每个<strong>分组的首部只需携带一条虚电路的编号</strong>(构成虚电路的每一段链路都有一个虚电路编号)。</p>
<p>这种通信方式如果再使用可靠传输的网络协议，就可使所发送的分组最终正确到达接收方(无差错按序到达、不丢失、不重复)。</p>
<p><strong>通信结束后，需要释放之前所建立的虚电路</strong>。</p>
<p>很多广域分组交换网都使用面向连接的虚电路服务。例如，曾经的X.25和逐渐过时的帧中继FR、异步传输模式ATM等。</p>
<h3 id="无连接的数据报服务">无连接的数据报服务</h3>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-2/4-2-2.png" alt=""  />
</p>
<p><strong>可靠通信应当由用户主机来保证</strong></p>
<p><strong>不需要建立网络层连接</strong></p>
<p><strong>每个分组可走不同的路径</strong></p>
<p>每个分组的<strong>首部必须携带目的主机的完整地址</strong></p>
<p>这种通信方式所传送的<strong>分组可能误码</strong>、<strong>丢失</strong>、<strong>重复</strong>和<strong>失序</strong>。</p>
<p>由于<strong>网络本身不提供端到端的可靠传输服务</strong>，这就使网络中的路由器可以做得比较简单，而且价格低廉(与电信网的交换机相比较)。</p>
<p>因特网采用了这种设计思想，也就是将<strong>复杂的网络处理功能置于因特网的边缘(用户主机和其内部的运输层)</strong>，而将相对简单的尽最大努力的分组交付功能置于因特网核心。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>从零开始的计算机网络4-1</title>
      <link>https://blog.0pt.im/learn/1-4-1/</link>
      <pubDate>Sat, 22 Jul 2023 18:09:28 +0800</pubDate>
      
      <guid>https://blog.0pt.im/learn/1-4-1/</guid>
      <description>四.网络层</description>
      <content:encoded><![CDATA[<h1 id="网络层概述">网络层概述</h1>
<p>网络层的主要任务是<strong>实现网络互连</strong>，进而<strong>实现数据包在各网络之间的传输</strong>。</p>
<p>要实现网络层任务，需要解决以下主要问题:</p>
<ul>
<li>
<p>网络层向运输层提供怎样的服务（“可靠传输”还是“不可靠传输”）</p>
</li>
<li>
<p>网络层寻址问题</p>
</li>
<li>
<p>路由选择问题</p>
</li>
</ul>
<p><strong>因特网</strong>(Internet)是目前全世界用户数量最多的互联网，它使用<strong>TCP/IP协议栈</strong>。</p>
<p>由于TCP/IP协议栈的网络层使用<strong>网际协议IP</strong>，它是整个协议栈的核心协议，因此在TCP/IP协议栈中网络层常称为<strong>网际层</strong>。</p>
<p>综上所述，我们通过学习TCP/IP协议栈的网际层来学习网络层的理论知识和实践技术。</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/4-1/4-1-1.png" alt=""  />
</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>从零开始的计算机网络3-11</title>
      <link>https://blog.0pt.im/learn/1-3-11/</link>
      <pubDate>Fri, 21 Jul 2023 18:09:28 +0800</pubDate>
      
      <guid>https://blog.0pt.im/learn/1-3-11/</guid>
      <description>三.数据链路层</description>
      <content:encoded><![CDATA[<h1 id="虚拟局域网vlan">虚拟局域网VLAN</h1>
<h3 id="概述">概述</h3>
<p>以太网交换机工作在数据链路层（也包括物理层）</p>
<p>使用一个或多个以太网交换机互连起来的交换式以太网，其所有站点都属于<strong>同一个广播域</strong>。</p>
<p>随着交换式以太网规模的扩大，广播域相应扩大。</p>
<p>巨大的广播域会带来很多<strong>弊端</strong>:</p>
<ul>
<li>
<p>广播风暴</p>
</li>
<li>
<p>难以管理和维护</p>
</li>
<li>
<p>潜在的安全问题</p>
</li>
</ul>
<p>广播风暴会浪费网络资源和各主机的CPU资源!</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-11/3-11-1.png" alt=""  />
</p>
<p>分割广播域的方法</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-11/3-11-2.png" alt=""  />
</p>
<ul>
<li>
<p>使用路由器可以隔离广播域，路由器的成本较高。</p>
</li>
<li>
<p>虚拟局域网VLAN技术应运而生</p>
</li>
</ul>
<p>虚拟局域网VLAN(Virtual Local Area Network)是一种将局域网内的设备划分成与物理位置无关的逻辑组的技术，这些逻辑组具有某些共同的需求。</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-11/3-11-3.png" alt=""  />
</p>
<h3 id="实现机制">实现机制</h3>
<p>IEEE 802.1Q帧</p>
<p>IEEE 802.1Q帧（也称Dot One Q帧）对以太网的MAC帧格式进行了扩展，插入了<strong>4字节的VLAN标记</strong></p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-11/3-11-4.png" alt=""  />
</p>
<p>VLAN标记的<strong>最后12比特</strong>称为<strong>VLAN标识符VID</strong>，它唯一地标志了以太网帧属于哪一个VLAN.</p>
<ul>
<li>
<p>VID的取值范围是0~4095 (0 ~2^(12-1))</p>
</li>
<li>
<p>0和4095都不用来表示VLAN，因此用于表示VLAN的<strong>VID的有效取值范围是1~4094</strong>。</p>
</li>
</ul>
<p>0和4095都不用来表示VLAN，因此用于表示VLAN的VID的有效取值范围是1~4094。</p>
<p><strong>802.1Q帧是由交换机来处理的，而不是用户主机来处理的。</strong></p>
<ul>
<li>
<p>当交换机<strong>收到普通的以太网帧</strong>时，会将其插入4字节的VLAN标记转变为802.1Q帧，简称“<strong>打标签</strong>“</p>
</li>
<li>
<p>当交换机<strong>转发802.1Q帧</strong>时，<strong>可能</strong>会删除其4字节VLAN标记转变为普通以太网帧，简称“<strong>去标签</strong>”</p>
</li>
</ul>
<p>交换机的端口类型</p>
<p>交换机的端口类型有以下三种:</p>
<ul>
<li>
<p>Access</p>
</li>
<li>
<p>Trunk</p>
</li>
<li>
<p>Hybrid</p>
</li>
</ul>
<blockquote>
<p>思科交换机没有Hybrid端口</p>
</blockquote>
<p>交换机各端口的缺省VLAN ID</p>
<ul>
<li>
<p>在思科交换机上称为Native VLAN，即本征VLAN。</p>
</li>
<li>
<p>在华为交换机上称为Port VLAN ID，即端口VLAN ID，简记为PVID。</p>
</li>
</ul>
<p>Access端口一般用于连接用户计算机</p>
<p>Access端口只能属于一个VLAN</p>
<p>Access端口的PVID值与端口所属VLAN的ID相同(默认为1)</p>
<p>Access端口接收处理方法:</p>
<p>一般只接受“未打标签”的普通以太网MAC帧。根据接收帧的端口的PVID给帧“<strong>打标签</strong>”，即插入4字节VLAN标记字段，字段中的VID取值与端口的PVID取值相等。</p>
<p>Access端口发送处理方法:</p>
<p>若帧中的VID与端口的PVID相等，则“<strong>去标签</strong>”并<strong>转发</strong>该帧;否则不转发。</p>
<table>
<thead>
<tr>
<th><img loading="lazy" src="https://img.0pt.im/computernet/3-11/3-11-5.png" alt=""  />
</th>
<th><img loading="lazy" src="https://img.0pt.im/computernet/3-11/3-11-6.png" alt=""  />
</th>
</tr>
</thead>
</table>
<p>Trunk端口一般用于交换机之间或交换机与路由器之间的互连</p>
<p>Trunk端口可以属于多个VLAN</p>
<p>用户可以设置Trunk端口的PVID值。默认情况下，Trunk端口的PVID值为1。</p>
<p>Trunk端口发送处理方法:</p>
<ul>
<li>
<p>对VID等于PVID的帧，<strong>“去标签”再转发</strong>;</p>
</li>
<li>
<p>对VID不等于PVID的帧，<strong>直接转发</strong>;</p>
</li>
</ul>
<p>Trunk端口接收处理方法:</p>
<ul>
<li>
<p>接收“未打标签”的帧，根据接收帧的端口的PVID给帧“<strong>打标签</strong>”，即插入4字节VLAN标记字段，字段中的VID取值与端口的PVID取值相等。</p>
</li>
<li>
<p>接收“已打标签的帧”;</p>
</li>
</ul>
<table>
<thead>
<tr>
<th><img loading="lazy" src="https://img.0pt.im/computernet/3-11/3-11-7.png" alt=""  />
</th>
<th><img loading="lazy" src="https://img.0pt.im/computernet/3-11/3-11-8.png" alt=""  />
</th>
</tr>
</thead>
</table>
<p>例题：</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-11/3-11-9.png" alt=""  />
</p>
<p>上图给出了用于交换机互连的Trunk端口的PVID值的组合，试回答以下问题:</p>
<p>(1)主机A发送广播帧，则帧的传递过程是什么?</p>
<p>(2)主机C发送广播帧，则帧的传递过程是什么?</p>
<p>(3)从上述过程可以得出什么结论?</p>
<p>解析：</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-11/3-11-10.png" alt=""  />
</p>
<p>结论：互连的Trunk端口的PVID值不等,可能会造成转发错误!</p>
<p>Hybrid端口既可用于交换机之间或交换机与路由器之间的互连(同Trunk端口)，也可用于交换机与用户计算机之间的互连(同Access端口)</p>
<p>Hybrid端口可以属于多个VLAN(同Trun端口)用户可以设置Hybrid端口的PVID值。默认情况下,Hybrid端口的PVID值为1(同Trun端口)</p>
<p>Hybrid端口发送处理方法(与Trunk端口不同)查看帧的VID是否在端口的“去标签”列表中:</p>
<ul>
<li>
<p>若存在，则“去标签”后再转发;</p>
</li>
<li>
<p>若不存在，则直接转发;</p>
</li>
</ul>
<p>Hybrid端口接收处理方法(同Trunk端口)</p>
<ul>
<li>
<p>接收“未打标签”的帧，根据接收帧的端口的PVID给帧“打标签”，即插入4字节VLAN标记字段，字段中的VID取值与端口的PVID取值相等。</p>
</li>
<li>
<p>接收“已打标签的帧”;</p>
</li>
</ul>
<p>【应用举例】主机A、B、C连接在同一个交换机的不同接口上。利用Hybrid端口的功能，实现以下应用需求:A和B都能与C相互通信，但A与B不能相互通信。</p>
<table>
<thead>
<tr>
<th><img loading="lazy" src="https://img.0pt.im/computernet/3-11/3-11-11.png" alt=""  />
</th>
<th><img loading="lazy" src="https://img.0pt.im/computernet/3-11/3-11-12.png" alt=""  />
</th>
</tr>
</thead>
</table>
]]></content:encoded>
    </item>
    
    <item>
      <title>从零开始的计算机网络3-10</title>
      <link>https://blog.0pt.im/learn/1-3-10/</link>
      <pubDate>Thu, 20 Jul 2023 18:09:28 +0800</pubDate>
      
      <guid>https://blog.0pt.im/learn/1-3-10/</guid>
      <description>三.数据链路层</description>
      <content:encoded><![CDATA[<h1 id="以太网交换机的生成树协议stp">以太网交换机的生成树协议STP</h1>
<p>如何提高以太网的可靠性?</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-10/3-10-1.png" alt=""  />
</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-10/3-10-2.png" alt=""  />
</p>
<p>添加冗余链路可以提高以太网的可靠性</p>
<p>但是，冗余链路也会带来负面效应——形成网络环路网络环路会带来以下问题:</p>
<ul>
<li>
<p>广播风暴，大量消耗网络资源，使得网络无法正常转发其他数据帧;</p>
</li>
<li>
<p>主机收到重复的广播帧，大量消耗主机资源</p>
</li>
<li>
<p>交换机的帧交换表震荡（漂移)</p>
</li>
</ul>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-10/3-10-3.png" alt=""  />
</p>
<blockquote>
<p>广播帧一直循环转发。帧交换表一直变化。</p>
</blockquote>
<p>以太网交换机使用<strong>生成树协议STP</strong>(Spanning Tree Protocol),可以在增加冗余链路来提高网络可靠性的同时又<strong>避免网络环路带来的各种问题</strong>。</p>
<ul>
<li>
<p>不论交换机之间采用怎样的物理连接，交换机都能够自动计算并构建一个逻辑上没有环路的网络，其逻辑拓扑结构必须是树型的(无逻辑环路);</p>
</li>
<li>
<p>最终生成的树型逻辑拓扑要<strong>确保连通整个网络</strong>;</p>
</li>
<li>
<p>当首次连接交换机或网络<strong>物理拓扑发生变化</strong>时(有可能是人为改变或故障)，交换机都将进行<strong>生成树的重新计算</strong>。</p>
</li>
</ul>
<table>
<thead>
<tr>
<th><img loading="lazy" src="https://img.0pt.im/computernet/3-10/3-10-5.png" alt=""  />
</th>
<th><img loading="lazy" src="https://img.0pt.im/computernet/3-10/3-10-4.png" alt=""  />
</th>
</tr>
</thead>
</table>
]]></content:encoded>
    </item>
    
    <item>
      <title>从零开始的计算机网络3-9</title>
      <link>https://blog.0pt.im/learn/1-3-9/</link>
      <pubDate>Wed, 19 Jul 2023 18:09:28 +0800</pubDate>
      
      <guid>https://blog.0pt.im/learn/1-3-9/</guid>
      <description>三.数据链路层</description>
      <content:encoded><![CDATA[<h1 id="以太网交换机自学习和转发帧的流程">以太网交换机自学习和转发帧的流程</h1>
<p>以太网交换机工作在<strong>数据链路层</strong>（也包括物理层)</p>
<p>以太网交换机收到帧后，在帧交换表中查找<strong>帧的目的MAC地址所对应的接口号</strong>，然后通过该接口转发帧。</p>
<p>以太网交换机是一种即插即用设备，刚上电启动时其内部的帧交换表是空的。随着网络中各主机间的通信，以太网交换机<strong>通过自学习算法</strong>自动逐渐<strong>建立起帧交换表</strong>。</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-9/3-9-1.png" alt=""  />
</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-9/3-9-2.png" alt=""  />
</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-9/3-9-3.png" alt=""  />
</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-9/3-9-4.png" alt=""  />
</p>
<p>每条记录都有自己的<strong>有效时间</strong>,到期自动删除!这是因为<strong>MAC地址与交换机接口的对应关系并不是永久性的</strong>!</p>
<p>例题：为简单起见，主机A，B，C，D，E，F，G，H的MAC地址与其主机名称相同。主机间依次如下通信:</p>
<p>1.B→C  2.D→A  3.G→D  4.E→H  5.C→B  6.F→G</p>
<p>请给出以太网交换机1，2，3的自学习过程以及各自最终的帧交换表的内容。</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-9/3-9-5.png" alt=""  />
</p>
<p>解析：</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-9/3-9-6.png" alt=""  />
</p>
<p>例题：以太网交换机进行转发决策时使用的PDU地址是</p>
<p>A.目的物理地址    B.目的IP地址    C.源物理地址    D.源lP地址</p>
<p>解析：PDU(Protocol Data Unit)的意思是协议数据单元，它是计算机网络体系结构中对等实体间逻辑通信的对象。</p>
<p>以太网交换机工作在数据链路层（也包括物理层)，它接收并转发的PDU通常称为帧。以太网交换机收到帧后，在帧交换表中查找<strong>帧的目的MAC地址</strong>所对应的接口号，然后通过该接口转发帧。</p>
<p><strong>MAC地址又称为硬件地址或物理地址</strong>。请注意:不要被“物理”二字误导认为物理地址属于物理层范畴，物理地址属于数据链路层范畴。</p>
<p>例题：某以太网拓扑及交换机当前转发表如下图所示，主机00-e1-d5-00-23-a1向主机00-e1-d5-00-23-c1发送1个数据帧，主机OO-e1-d5-00-23-c1收到该帧后，向主机00-e1-d5-00-23-a1发送1个确认帧，交换机对这两个帧的转发端口分别是</p>
<p>A.{3}和{1}    B.{2，3}和{1}    C.{2，3}和{1，2}    D.{1，2，3}和{1}</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-9/3-9-7.png" alt=""  />
</p>
<p>解析：自己想</p>
<p>选B</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>从零开始的计算机网络3-8</title>
      <link>https://blog.0pt.im/learn/1-3-8/</link>
      <pubDate>Tue, 18 Jul 2023 18:09:28 +0800</pubDate>
      
      <guid>https://blog.0pt.im/learn/1-3-8/</guid>
      <description>三.数据链路层</description>
      <content:encoded><![CDATA[<h1 id="集线器与交换机的区别">集线器与交换机的区别</h1>
<p>早期的总线型以太网</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-8/3-8-2.png" alt=""  />
</p>
<p>使用双绞线和集线器HUB的星型以太网</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-8/3-8-3.png" alt=""  />
</p>
<p><strong>使用集线器的以太网在逻辑上仍是一个总线网</strong>，各站共享总线资源，<strong>使用的还是CSMA/CD协议</strong>;</p>
<p><strong>集线器只工作在物理层</strong>，它的每个接口仅简单地转发比特，不进行碰撞检测(由各站的网卡检测);</p>
<p><strong>集线器一般都有少量的容错能力和网络管理功能</strong>。例如，若网络中某个网卡出了故障，不停地发送帧。此时，集线器可以检测到这个问题，在内部断开与出故障网卡的连线，使整个以太网仍然能正常工作。</p>
<p>使用集线器HUB在物理层扩展以太网</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-8/3-8-4.png" alt=""  />
</p>
<p>以太网交换机</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-8/3-8-5.png" alt=""  />
</p>
<p>由此看出，交换机功能更强大。</p>
<blockquote>
<p>前提：1.忽略ARP过程。 2.假设交换机的帧交换表已“学习好了&quot;。</p>
</blockquote>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-8/3-8-6.png" alt=""  />
</p>
<p>以太网交换机通常都有<strong>多个接口</strong>。每个接口都可以直接与一台主机或另一个以太网交换机相连。一般都工作在<strong>全双工方式</strong>。</p>
<p>以太网交换机具有并行性，能<strong>同时连通多对接口</strong>，使多对主机能同时通信，<strong>无碰撞(不使用CSMA/CD协议)</strong>。</p>
<p>以太网交换机一般都具有多种速率的接口，例如:</p>
<p>10Mb/s、100Mb/s、1Gb/s、10Gb/s接口的多种组合。以太网交换机<strong>工作在数据链路层</strong>（也包括物理层），它收到帧后，在帧交换表中查找<strong>帧的目的MAC地址所对应的接口号</strong>，然后通过该接口转发帧。</p>
<p>以太网交换机是一种即插即用设备，其内部的<strong>帧交换表</strong>是通过<strong>自学习算法</strong>自动地逐渐建立起来的。</p>
<p>帧的两种转发方式:</p>
<ul>
<li>
<p>1.<strong>存储转发</strong></p>
</li>
<li>
<p>2.<strong>直通交换</strong>:采用基于硬件的交叉矩阵（交换时延非常小，但不检查帧是否有差错)</p>
</li>
</ul>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-8/3-8-7.png" alt=""  />
</p>
<p>小结：</p>
<p>集线器HUB</p>
<ul>
<li>
<p>早期以太网的互连设备</p>
</li>
<li>
<p>工作在OSI体系结构的物理层</p>
</li>
<li>
<p>对接收到的信号进行放大、转发</p>
</li>
<li>
<p>使用集线器作为互连设备的以太网仍然属于共享总线式以太网。集线器互连起来的所有主机共享总线带宽，属于同一个碰撞域和广播域。</p>
</li>
</ul>
<p>交换机SWITCH</p>
<ul>
<li>
<p>目前以太网中使用最广泛的互连设备</p>
</li>
<li>
<p>工作在OSI体系结构的数据链路层（也包括物理层）</p>
</li>
<li>
<p>根据MAC地址对帧进行转发</p>
</li>
<li>
<p>使用交换机作为互连设备的以太网，称为交换式以太网。交换机可以根据MAC地址过滤帧，即隔离碰撞域。</p>
</li>
<li>
<p>交换机的每个接口是一个独立的碰撞域</p>
</li>
<li>
<p>交换机隔离碰撞域但不隔离广播域（VLAN除外）</p>
</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>从零开始的计算机网络3-7</title>
      <link>https://blog.0pt.im/learn/1-3-7/</link>
      <pubDate>Mon, 17 Jul 2023 18:09:28 +0800</pubDate>
      
      <guid>https://blog.0pt.im/learn/1-3-7/</guid>
      <description>三.数据链路层</description>
      <content:encoded><![CDATA[<h1 id="mac地址ip地址以及arp协议">MAC地址、IP地址以及ARP协议</h1>
<p>MAC地址是以太网的MAC子层所使用的地址;                                 数据链路层</p>
<p>IP地址是TCP/IP体系结构网际层所使用的地址;                               网际层</p>
<p>ARP协议属于TCP/IP体系结构的网际层，其作用是已知设备所分配到的IP地址，使用ARP协议可以通过该IP地址获取到设备的MAC地址;                                      网际层</p>
<p>尽管IP地址和ARP协议属于TCP/IP体系结构的网际层（而不属于数据链路层)，但是它们与MAC地址存在一定的关系，并且我们日常的网络应用都离不开MAC地址、IP地址以及ARP协议。因此，我们将这三者放在一起讨论。</p>
<h3 id="mac地址">MAC地址</h3>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-7/3-7-1.png" alt=""  />
</p>
<p>使用点对点信道的数据链路层不需要使用地址</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-7/3-7-3.png" alt=""  />
</p>
<p>使用广播信道的数据链路层必须使用地址来区分各主机</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-7/3-7-4.png" alt=""  />
</p>
<p>当多个主机连接在同一个广播信道上，要想实现两个主机之间的通信，则每个主机都必须有一个唯一的标识,即一个数据链路层地址;</p>
<p>在每个主机发送的<strong>帧中必须携带标识发送主机和接收主机的地址</strong>。由于这类地址是用于媒体接入控制MAC(Media Access Control)，因此这类地址被称为<strong>MAC地址</strong>;</p>
<ul>
<li>
<p>MAC地址一般被固化在网卡（网络适配器）的电可擦可编程只读存储器EEPROM中，因此MAC地址也被称为<strong>硬件地址</strong>;</p>
</li>
<li>
<p>MAC地址有时也被称为物理地址。<strong>请注意:这并不意味着MAC地址属于网络体系结构中的物理层!</strong></p>
</li>
</ul>
<p>一般情况下，用户主机会包含两个网络适配器:有线局域网适配器（有线网卡）和无线局域网适配器（无线网卡)。每个网络适配器都有一个全球唯一的MAC地址。而交换机和路由器往往拥有更多的网络接口，所以会拥有更多的MAC地址。综上所述，<strong>严格来说，MAC地址是对网络上各接口的唯一标识，而不是对网络上各设备的唯一标识</strong>。</p>
<p>IEEE 802局域网的MAC地址格式</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-7/3-7-5.png" alt=""  />
</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-7/3-7-6.png" alt=""  />
</p>
<p>IEEE 802局域网的MAC地址发送顺序</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-7/3-7-7.png" alt=""  />
</p>
<p>单播MAC地址举例</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-7/3-7-8.png" alt=""  />
</p>
<p>在帧首部的目的地址字段填入C的MAC地址，源地址字段填入自己的MAC地址，再加上帧首部的其他字段，数据载荷以及帧尾部，就构成了该单播帧。</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-7/3-7-9.png" alt=""  />
</p>
<p>广播MAC地址举例</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-7/3-7-10.png" alt=""  />
</p>
<p>在帧首部的目的地址字段填入广播地址，源地址字段填入自己的MAC地址，再加上帧首部的其他字段，数据载荷以及帧尾部，就构成了该单播帧。</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-7/3-7-11.png" alt=""  />
</p>
<p>判断一个地址首部是不是多播地址</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-7/3-7-12.png" alt=""  />
</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-7/3-7-13.png" alt=""  />
</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-7/3-7-14.png" alt=""  />
</p>
<p>随机MAC地址</p>
<p>棱镜门事件，斯诺登爆料，美国国家安全局有一套系统，通过监视电子设备的MAC地址，来跟踪城市中每个人的行动。</p>
<p>随后，苹果，window10，安卓6.0，内核版本3.18的linux开始提供随机MAC地址的功能。目前大部分移动设备都采取了随机MAC地址的功能。</p>
<h3 id="ip地址">IP地址</h3>
<p>IP地址是因特网(Internet)上的主机和路由器所使用的地址，用于标识两部分信息:</p>
<ul>
<li>
<p>网络编号:标识因特网上数以百万计的网络</p>
</li>
<li>
<p>主机编号:标识同一网络上不同主机(或路由器各接口)</p>
</li>
</ul>
<p>很显然，之前介绍的MAC地址不具备区分不同网络的功能。</p>
<ul>
<li>
<p>如果只是一个单独的网络，不接入因特网，可以只使用MAC地址(这不是一般用户的应用方式)。</p>
</li>
<li>
<p>如果主机所在的网络要接入因特网，则IP地址和MAC地址都需要使用。</p>
</li>
</ul>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-7/3-7-15.png" alt=""  />
</p>
<p>从网络体系结构看IP地址与MAC地址</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-7/3-7-16.png" alt=""  />
</p>
<p>数据包转发过程中IP地址与MAC地址的变化情况</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-7/3-7-17.png" alt=""  />
</p>
<p>数据包转发过程中<strong>源IP地址和目的IP地址保持不变</strong>;</p>
<p>数据包转发过程中<strong>源MAC地址和目的MAC地址逐个链路(或逐个网络)改变</strong>.</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-7/3-7-18.png" alt=""  />
</p>
<p>由ARP协议解决</p>
<h3 id="arp协议">ARP协议</h3>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-7/3-7-19.png" alt=""  />
</p>
<p>B知道C的IP地址
B不知道C的MAC地址
B的数据链路层封装MAC帧时,<strong>无法填写目的MAC地址!</strong></p>
<p>每一个主机都有ARP高速缓存表</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-7/3-7-20.png" alt=""  />
</p>
<p>类型：</p>
<ul>
<li>
<p>动态:自动获取，生命周期默认为两分钟;</p>
</li>
<li>
<p>静态:手工设置，不同操作系统下的生命周期不同，例如系统重启后不存在或系统重启后依然有效。</p>
</li>
</ul>
<p>第一行即对应主机A的地址。但是没有C的相关地址信息，使用需要发送ARP请求报文。</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-7/3-7-21.png" alt=""  />
</p>
<p>主机C</p>
<p>1.将B的IP地址与MAC地址记录到自己的ARP高速缓存表中;
2给B发送ARP响应，以告知自己的MAC地址。</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-7/3-7-22.png" alt=""  />
</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-7/3-7-23.png" alt=""  />
</p>
<p>ARP不能跨网络使用，对于本例，只能逐链路使用。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>从零开始的计算机网络3-6</title>
      <link>https://blog.0pt.im/learn/1-3-6/</link>
      <pubDate>Sun, 16 Jul 2023 18:09:28 +0800</pubDate>
      
      <guid>https://blog.0pt.im/learn/1-3-6/</guid>
      <description>三.数据链路层</description>
      <content:encoded><![CDATA[<h1 id="媒体接入控制的基本概念">媒体接入控制的基本概念</h1>
<p>共享信道要着重考虑的一个问题就是如何协调多个发送和接收站点对一个共享传输媒体的占用，即<strong>媒体接入控制MAC</strong>(Medium Access Control)。</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-6/3-6-2.png" alt=""  />
</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-6/3-6-4.png" alt=""  />
</p>
<p>随着技术的发展，交换技术的成熟和成本的降低，具有更高性能的使用点对点链路和链路层交换机的交换式局域网在有线领域已完全取代了共享式局域网，但由于无线信道的广播天性，无线局域网仍然使用的是共享媒体技术。</p>
<h3 id="静态划分信道">静态划分信道</h3>
<p>信道复用</p>
<p>复用(Multiplexing）是通信技术中的一个重要概念。复用就是通过一条物理线路同时传输多路用户的信号。</p>
<p>当网络中传输媒体的传输容量大于多条单一信道传输的总通信量时，可利用复用技术在一条物理线路上建立多条通信信道来充分利用传输媒体的带宽。</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-6/3-6-5.png" alt=""  />
</p>
<p>1.频分复用FDM</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-6/3-6-6.png" alt=""  />
</p>
<p>频分复用的所有用户同时占用不同的频带资源并行通信。</p>
<p>2.时分复用TDM</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-6/3-6-7.png" alt=""  />
</p>
<p>时分复用的所有用户在不同的时间占用同样的频带宽度。</p>
<p>3.波分复用（光的频分复用）</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-6/3-6-8.png" alt=""  />
</p>
<p>4.码分复用</p>
<p>码分复用CDM是另一种共享信道的方法。实际上，由于该技术主要用于多址接入，人们更常用的名词是码分多址CDMA(Code Division Multiple Access)。</p>
<p>同理，频分复用FDM和时分复用TDM同样可用于多址接入，相应的名词是频分多址FDMA(Frequency Division Multiple Access)和时分多址TDMA(Time Division Multiple Access)。在本课程中，我们不严格区分复用与多址的概念。可简单理解如下:</p>
<ul>
<li>
<p>复用是将单一媒体的频带资源划分成很多子信道，这些子信道之间相互独立，互不干扰。从媒体的整体频带资源上看，每个子信道只占用该媒体频带资源的一部分。</p>
</li>
<li>
<p>多址（更确切地应该称为多点接入）处理的是动态分配信道给用户。这在用户仅仅暂时性地占用信道的应用中是必须的，而所有的移动通信系统基本上都属于这种情况。相反，在信道永久性地分配给用户的应用中，多址是不需要的(对于无线广播或电视广播站就是这样)。</p>
</li>
<li>
<p>某种程度上，FDMA、TDMA、CDMA可以分别看成是FDM、TDM、CDM的应用。</p>
</li>
</ul>
<p>与FDM和TDM不同，CDM的每一个用户可以<strong>在同样的时间使用同样的频带进行通信</strong>。由于<strong>各用户使用经过特殊挑选的不同码型</strong>，因此各用户之间<strong>不会造成干扰</strong>。</p>
<p>CDM最初是用于军事通信的，因为这种系统所发送的信号有很强的抗干扰能力，其频谱类似于白噪声，不易被敌人发现。</p>
<p>随着技术的进步，CDMA设备的价格和体积都大幅度下降，因而现在已广泛用于民用的移动通信中。</p>
<p>在CDMA中，每一个比特时间再划分为m个短的间隔，称为<strong>码片</strong>(Chip)。通常m的值是64或128。为了简单起见，在后续的举例中，我们假设m为8。</p>
<p>使用CDMA的每一个站被指派一个唯一的<strong>m bit码片序列</strong>(Chip Sequence)</p>
<ul>
<li>
<p>一个站如果要发送比特1，则发送它自己的m bit码片序列;</p>
</li>
<li>
<p>一个站如果要发送比特0，则发送它自己的m bit码片序列的二进制反码;</p>
</li>
</ul>
<p>例：指派给CDMA系统中某个站点的码片序列为00011011</p>
<p>发送比特1:发送自己的码片序列00011011</p>
<p>发送比特0:发送自己的码片序列的二进制反码11100100</p>
<p>为了方便，我们按惯例将码片序列中的0写为-1，将1写为+1。</p>
<p>则该站点的码片序列是(-1 -1 -1 +1 +1 -1 +1 +1)。</p>
<blockquote>
<p>这种通信方式称为直接序列扩频，DSSS。</p>
</blockquote>
<p>码片序列的挑选原则如下:</p>
<ol>
<li>
<p>分配给每个站的<strong>码片序列必须各不相同</strong>，实际常采用伪随机码序列。</p>
</li>
<li>
<p>分配给每个站的<strong>码片序列必须相互正交</strong>(规格化内积为0)。正交就是向量互相垂直。</p>
</li>
</ol>
<p>令向量S表示站S的码片序列，令向量T表示其他任何站的码片序列。两个不同站S和T的码片序列正交，就是向量S和T的规格化内积为0:</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-6/3-6-9.png" alt=""  />
</p>
<blockquote>
<p>向量S相当于m维向量。</p>
</blockquote>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-6/3-6-10.png" alt=""  />
</p>
<p>例题：共有4个站进行CDMA通信，这4个站的码片序列分别为:</p>
<p>A: (-1 -1-1 +1 +1 -1+1 +1)        B: (-1 -1+1-1+1 +1 +1-1)</p>
<p>C: (-1 +1 -1+1+1 +1 -1 -1)        D: (-1 +1 -1-1 -1 -1 +1 -1)</p>
<p>现收到码片序列(-1+1-3+1-1-3+1+1)。问是哪些站发送了数据?发送的是比特1还是0?</p>
<p>解析：用收到的码片序列分别与各站的码片序列进行求内积运算。若计算结果为数值1，则被判断的站发送了比特1;若计算结果为数值-1，则被判断的站发送了比特0;若计算结果为数值0，则被判断的站未发送数据。</p>
<p>经计算，A发送比特1，B发送比特0，C未发送，D发送比特1。</p>
<p>例题：站点A、B、C通过CDMA共享链路，A、B、C的码片序列(chipping sequence)分别是(1，1，1，1)、(1，-1，1，-1)和(1，1，-1，-1)。若C从链路上收到的序列是(2，0，2，0，0，-2，0，-2，0，2，0，2)，则C收到A发送的数据是</p>
<p>A.000    B.101    C.110    D.111</p>
<p>解析：由于题目所给各站的码片序列为4位，因此将站点C收到的序列分成三部分，每部分也由4位组成:</p>
<p>(2，0，2，0），(0，-2，0，-2) ,（0，2，0，2）</p>
<p>将站点A的码片序列(1，1，1，1)分别与上述三个部分进行内积运算，根据结果可判断出A发送的数据。第一个是比特1，第二个是比特0，第三个是比特1，选B</p>
<h3 id="媒体接入控制动态接入控制随机接入">媒体接入控制——动态接入控制——随机接入</h3>
<h3 id="载波监听多址接入碰撞检测csmacd-carrier-sense-multiple-accesscollision-detection">载波监听多址接入/碰撞检测CSMA/CD (Carrier Sense Multiple Access/Collision Detection)</h3>
<p>1.多址接入MA</p>
<p>多个站连接在一条总线上，竞争使用总线。</p>
<p>2.载波监听CS</p>
<p>每一个站在发送帧之前先要检测一下总线上是否有其他站点在发送帧(“先听后说”) ∶</p>
<ul>
<li>
<p>若检测到总线空闲96比特时间，则发送这个帧;</p>
</li>
<li>
<p>若检测到总线忙，则继续检测并等待总线转为空闲96比特时间，然后发送这个帧。</p>
</li>
</ul>
<blockquote>
<p>96比特时间是指，发送96比特所耗费的时间，也称为帧间最小间隔。其作用是使接收方可以检测出一个帧的结束。同时也使得所有其他站点都能有机会平等竟争信道并发送帧。</p>
</blockquote>
<p>3.碰撞检测CD</p>
<p>每一个正在发送帧的站边发送边检测碰撞（“边说边听”) :</p>
<p>一旦发现总线上出现碰撞，则立即停止发送，退避━段随机时间后再次发送(“一旦冲突，立即停说,等待时机，重新再说”)。</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-6/3-6-11.png" alt=""  />
</p>
<p>争用期（碰撞窗口）</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-6/3-6-12.png" alt=""  />
</p>
<p>主机最多经过2τ(即δ→0 )的时长就可检测到本次发送是否遭受了碰撞因此，以太网的端到端往返传播时延2τ称为<strong>争用期</strong>或<strong>碰撞窗口</strong>。</p>
<p>经过争用期这段时间还没有检测到碰撞，才能肯定这次发送不会发生碰撞。</p>
<p>每一个主机在自己发送帧之后的一小段时间内，存在着遭遇碰撞的可能性。这一小段时间是不确定的。它取决于另一个发送帧的主机到本主机的距离，但不会超过总线的端到端往返传播时延，即一个争用期时间。</p>
<p>显然，在以太网中发送帧的主机越多，端到端往返传播时延越大，发生碰撞的概率就越大。因此，<strong>共享式以太网不能连接太多的主机，使用的总线也不能太长</strong>。</p>
<p>10Mb/s以太网把争用期定为512比特发送时间，即51.2μs，因此其总线长度不能超过5120m，但考虑到其他一些因素，如信号衰减等，以太网规定总线长度不能超过2500m</p>
<p>最小帧长</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-6/3-6-13.png" alt=""  />
</p>
<p>假设A向D发送一个很短的帧，发完后C又向D发送帧，此时C检测总线为空闲，所以发送，然后发生碰撞。</p>
<p>很显然,以太网的帧长不能太短!</p>
<p><strong>以太网规定最小帧长为64字节</strong>，即512比特(512比特时间即为争用期);</p>
<p>如果要发送的数据非常少，那么必须加入一些填充字节，使帧长不小于64字节。</p>
<p>以太网的<strong>最小帧长确保了主机可在帧发送完成之前就检测到该帧的发送过程中是否遭遇了碰撞</strong>;</p>
<p>如果在争用期(共发送64字节）没有检测到碰撞，那么后续发送的数据就一定不会发生碰撞;如果在争用期内检测到碰撞，就立即中止发送，这时已经发送出去的数据一定小于64字节，因此<strong>凡长度小于64字节的帧都是由于碰撞而异常中止的无效帧</strong>。</p>
<p>最大帧长</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-6/3-6-15.png" alt=""  />
</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-6/3-6-16.png" alt=""  />
</p>
<p>截断二进制指数退避算法</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-6/3-6-17.png" alt=""  />
</p>
<p>若连续多次发生碰撞，就表明可能有较多的主机参与竞争信道。但使用上述退避算法可<strong>使重传需要推迟的平均时间随重传次数而增大</strong>(这也称为<strong>动态退避</strong>)，因而<strong>减小发生碰撞的概率</strong>，有利于整个系统的稳定。</p>
<p><strong>当重传达16次仍不能成功时</strong>，表明同时打算发送帧的主机太多，以至于连续发生碰撞，则<strong>丢弃该帧</strong>，并向高层报告。</p>
<p>信道利用率</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-6/3-6-18.png" alt=""  />
</p>
<p>帧发送流程</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-6/3-6-19.png" alt=""  />
</p>
<p>帧接收流程</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-6/3-6-20.png" alt=""  />
</p>
<p>例题：下列关于CSMA/CD协议的叙述中，错误的是</p>
<p>A.边发送数据帧，边检测是否发生冲突</p>
<p>B.适用于无线网络，以实现无线链路共享</p>
<p>C.需要根据网络跨距和数据传输速率限定最小帧长</p>
<p>D.当信号传播延迟趋近于0时，信道利用率趋近100%</p>
<p>解析：选项A描述的是“碰撞检测(冲突检测)”，描述正确;</p>
<p>选项B的描述错误，因为CSMA/CD协议不适用于无线网络。对于无线网络，可以使用CSMA/CA协议;</p>
<p>选项C中给出的“网络跨距”相当于给出了“端到端传播时延て”，进而可得出“争用期2z”，再乘以数据传输速率即为最小帧长，描述正确;</p>
<p>选项D描述正确，这可以从极限信道利用率的计算公式看出。故选B。</p>
<p>例题：在一个采用CSMA/CD协议的网络中，传输介质是一根完整的电缆，传输速率为1Gbps，电缆中的信号传播速度是200 000km/s。若最小数据帧长度减少800比特，则最远的两个站点之间的距离至少需要</p>
<p>A。增加160m    B.增加80m    C.减少160m    D.减少80m</p>
<p>解析：</p>
<p>本题考查采用CSMA/CD协议的以太网的最小帧长的相关概念。</p>
<p>设最远两个站点之间的距离为d(m)，最小帧长为I(bit);
最小帧长=争用期×数据传输速率</p>
<p>计算得，d=l/10</p>
<p>故选D</p>
<p>例题：某局域网采用CSMA/CD协议实现介质访问控制，数据传输速率为10Mbps,主机甲和主机乙之间的距离为2km，信号传播速度是200 000km/s。请回答下列问题，要求说明理由或写出计算过程。</p>
<p>(1）如主机甲和主机乙发送数据时发生冲突，则从开始发送数据时刻起，到两台主机均检测到冲突时刻止，最短需经过多长时间?最长需经过多长时间（假设主机甲和主机乙发送数据过程中，其他主机不发送数据）?</p>
<p>解析：</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-6/3-6-21.png" alt=""  />
</p>
<p>甲发送的帧信号传播到无限接近乙的某个时刻，乙也要发送帧，它检测到信道空闲（但信道此时并不空闲)，就立刻开始发送帧，这必然会导致碰撞。乙会首先检测到碰撞，一段时间后甲也会检测到碰撞。</p>
<p>从开始发送数据时刻起，到两台主机均检测到碰撞时刻止，最长需要经过的时间为两台主机间信号传播的往返时延（争用期）(2km ÷ 200 000km/s ) x 2 = 0.02ms</p>
<h3 id="载波监听多址接入碰撞避免csmacacarrier-sense-multiple-accesscollision-avoidance">载波监听多址接入/碰撞避免CSMA/CA(Carrier Sense Multiple Access/Collision Avoidance)</h3>
<p>既然CSMA/CD协议已经成功地应用于使用广播信道的有线局域网，那么同样使用广播信道的无线局域网能不能也使用CSMA/CD协议呢?</p>
<p><strong>在无线局域网中，仍然可以使用载波监听多址接入CSMA</strong>，即在发送帧之前先对传输媒体进行载波监听。若发现有其他站在发送帧，就推迟发送以免发生碰撞。</p>
<p><strong>在无线局域网中，不能使用碰撞检测CD</strong>，原因如下:</p>
<ul>
<li>
<p>由于无线信道的传输条件特殊，其信号强度的动态范围非常大，无线网卡上接收到的信号强度往往会远远小于发送信号的强度（可能相差百万倍)。<strong>如果要在无线网卡上实现碰撞检测CD，对硬件的要求非常高</strong>。</p>
</li>
<li>
<p>即使能够在硬件上实现无线局域网的碰撞检测功能，但由于无线电波传播的特殊性（<strong>存在隐蔽站问题</strong>)，<strong>进行碰撞检测的意义也不大</strong>。</p>
</li>
</ul>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-6/3-6-22.png" alt=""  />
</p>
<p><strong>802.11无线局域网</strong>使用CSMA/CA协议，在CSMA的基础上增加了一个<strong>碰撞避免CA功能</strong>,而不再实现碰撞检测功能。</p>
<p>由于<strong>不可能避免所有的碰撞</strong>，并且<strong>无线信道误码率较高</strong>，802.11标准还使用了**数据链路层确认机制(停止-等待协议)**来保证数据被正确接收。</p>
<p>802.11的MAC层标准定义了两种不同的媒体接入控制方式:</p>
<ul>
<li>
<p><strong>分布式协调功能DCF</strong>(Distributed Coordination Function)。在DCF方式下，没有中心控制站点，每个站点使用CSMA/CA协议通过争用信道来获取发送权，这是802.11定义的默认方式。</p>
</li>
<li>
<p><strong>点协调功能PCF</strong>(Point Coordination Function)。PCF方式使用集中控制的接入算法（一般在接入点AP实现集中控制)，是802.11定义的可选方式，在实际中较少使用。</p>
</li>
</ul>
<p>帧间间隔IFS(InterFrame Space)</p>
<p>802.11标准规定，所有的站点必须在持续检测到信道空闲一段指定时间后才能发送帧，这段时间称为帧间间隔IFS。</p>
<p>帧间间隔的长短取决于该站点要发送的帧的类型:</p>
<ul>
<li>
<p>高优先级帧需要等待的时间较短，因此可优先获得发送权;</p>
</li>
<li>
<p>低优先级帧需要等待的时间较长。若某个站的低优先级帧还没来得及发送，而其他站的高优先级帧已发送到信道上，则信道变为忙态，因而低优先级帧就只能再推迟发送了。这样就减少了发生碰撞的机会。</p>
</li>
</ul>
<p>常用的两种帧间间隔如下:</p>
<ul>
<li>
<p><strong>短帧间间隔SIFS</strong>(28us)，是最短的帧间间隔，用来分隔开属于一次对话的各帧。一个站点应当能够在这段时间内从发送方式切换到接收方式。使用SIFS的帧类型有ACK帧、CTS帧、由过长的MAC帧分片后的数据帧、以及所有回答AP探询的帧和在PCF方式中接入点AP发送出的任何帧。</p>
</li>
<li>
<p><strong>DCF帧间间隔DIFS</strong>(128us)，它比短帧间间隔SIFS要长得多，在DCF方式中用来发送数据帧和管理帧。</p>
</li>
</ul>
<p>CSMA/CA协议工作原理</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-6/3-6-23.png" alt=""  />
</p>
<p>源站为什么在检测到信道空闲后还要再等待一段时间DIFS?</p>
<p>就是考虑到可能有其他的站有高优先级的帧要发送。若有，就要让高优先级帧先发送。</p>
<p>目的站为什么正确接收数据帧后还要等待一段时间SIFS才能发送ACK帧?</p>
<p>SIFS是最短的帧间间隔，用来分隔开属于一次对话的各帧。</p>
<p>在这段时间内，一个站点应当能够从发送方式切换到接收方式。</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-6/3-6-24.png" alt=""  />
</p>
<p>为什么信道由忙转为空闲且经过DIFS时间后,还要退避一段随机时间才能使用信道?</p>
<p>防止多个站点同时发送数据而产生碰撞。</p>
<p>当站点检测到信道是空闲的，并且所发送的数据帧不是成功发送完上一个数据帧之后立即连续发送的数据帧,则不使用退避算法。</p>
<p>以下情况必须使用退避算法:</p>
<ul>
<li>
<p>在发送数据帧之前检测到信道处于忙状态时;</p>
</li>
<li>
<p>在每一次重传一个数据帧时;</p>
</li>
<li>
<p>在每一次成功发送后要连续发送下一个帧时(这是为了避免一个站点长时间占用信道)。</p>
</li>
</ul>
<p>CSMA/CA协议的退避算法</p>
<p>在执行退避算法时，站点为退避计时器设置一个随机的退避时间:</p>
<ul>
<li>
<p>当退避计时器的时间减小到零时，就开始发送数据;</p>
</li>
<li>
<p>当退避计时器的时间还未减小到零时而信道又转变为忙状态，这时就冻结退避计时器的数值，重新等待信道变为空闲，再经过时间DIFS后，继续启动退避计时器。</p>
</li>
</ul>
<p>在进行第i次退避时，退避时间在时隙编号{0，1，&hellip;.2^(2+i) -1}中随机选择一个，然后乘以基本退避时间（也就是一个时隙的长度）就可以得到随机的退避时间。这样做是为了使不同站点选择相同退避时间的概率减少。当时隙编号达到255时（对应于第6次退避）就不再增加了。</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-6/3-6-25.png" alt=""  />
</p>
<p>从左往右看</p>
<p>CSMA/CA协议的信道预约和虚拟载波监听</p>
<p>为了<strong>尽可能减少碰撞的概率</strong>和降低碰撞的影响，802.11标准允许要发送数据的站点<strong>对信道进行预约</strong>。</p>
<p>(1)源站在发送数据帧之前先发送一个短的控制帧，称为请求发送RTS(Request To Send)，它包括源地址、目的地址以及这次通信（包括相应的确认帧）所需的持续时间。</p>
<p>(2)若目的站正确收到源站发来的RTS帧，且媒体空闲，就发送一个响应控制帧，称为允许发送CTS(Cear To Send)，它也包括这次通信所需的持续时间(从RTS帧中将此持续时间复制到CTS帧中)。</p>
<p>(3)源站收到CTS帧后，再等待一段时间SIFS后，就可发送其数据帧。</p>
<p>(4)若目的站正确收到了源站发来的数据帧，在等待时间SIFS后，就向源站发送确认帧ACK。</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-6/3-6-26.png" alt=""  />
</p>
<p>除源站和目的站以外的<strong>其他各站</strong>，在<strong>收到CTS帧(或数据帧)后就推迟接入到无线局域网中</strong>。这样就保证了源站和目的站之间的通信不会受到其他站的干扰。</p>
<p>如果RTS帧发生碰撞，源站就收不到CTS帧，需执行退避算法重传RTS帧。</p>
<p>由于<strong>RTS帧和CTS帧很短，发送碰撞的概率、碰撞产生的开销及本身的开销都很小</strong>。而对于一般的数据帧，其发送时延往往大于传播时延（因为是局域网），碰撞的概率很大，且一旦发生碰撞而导致数据帧重发，则浪费的时间就很多，因此<strong>用很小的代价对信道进行预约往往是值得的</strong>。802.11标准规定了3种情况供用户选择:</p>
<ul>
<li>
<p>使用RTS帧和CTS帧</p>
</li>
<li>
<p>不使用RTS帧和CTS帧</p>
</li>
<li>
<p>只有当数据帧的长度超过某一数值时才使用RTS帧和CTS帧</p>
</li>
</ul>
<p>除RTS帧和CTS帧会携带通信需要持续的时间，数据帧也能携带通信需要持续的时间，这称为802.11的<strong>虚拟载波监听机制</strong>。由于利用虚拟载波监听机制，<strong>站点只要监听到RTS帧、CTS帧或数据帧中的任何一个，就能知道信道被占用的持续时间</strong>，而不需要真正监听到信道上的信号，因此<strong>虚拟载波监听机制能减少隐蔽站带来的碰撞问题</strong>。</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-6/3-6-27.png" alt=""  />
</p>
<p>A给B发送数据帧前，可以使用RTS来预约信道。即使C收不到该RTS帧，但可以收到B发给A的CTS帧，这样，C就知道了信道将被占用多长时间。A给B发送数据帧的时候，C不会干扰。</p>
<p>例题：下列选项中，对正确接收到的数据帧进行确认的MAC协议是</p>
<p>A.CSMA    B.CDMA    C.CSMA/CD    D.CSMA/CA</p>
<p>解析：CSMA是指载波监听多址接入，并不使用确认机制;</p>
<p>CDMA是指码分多址，属于静态划分信道，是物理层的信道复用技术，而不属于MAC协议</p>
<p>CSMA/CD是指载波监听多址接入/碰撞检测，是对CSMA的改进，是早期共享信道以太网使用的信道访问控制协议，并不使用确认机制;</p>
<p>CSMA/CA是指载波监听多址接入/碰撞避免，是802.11局域网采用的无线信道访问控制协议。802.11局域网在使用CSMA/CA的同时，还使用停止-等待协议。这是因为无线信道的通信质量远不如有线信道，因此无线站点每发送完一个数据帧后，要等到收到对方的确认帧后才能继续发送下一帧;故选D</p>
<p>例题：下列介质访问控制方法中，可能发生冲突的是</p>
<p>A.CDMA    B.CSMA    C.TDMA    D.FDMA</p>
<p>解析：CDMA(Code Division Multiplex Access)是指码分多址;</p>
<p>TDMA(Time Division Multiplex Access)是指时分多址;</p>
<p>FDMA(Frequency Division Multiplex Access)是指频分多址;</p>
<p>CSMA(Carrier Sense Multiple Access)是指载波监听多址接入;</p>
<p>TDMA，FDMA，CDMA是常见的物理层信道复用技术，属于静态划分信道，用于多用户共享信道，不会发生冲突。</p>
<p>CSMA属于争用型的媒体接入控制协议，连接在同一媒体上的多个站点使用该协议以竞争方式发送数据帧，可能出现冲突(也称为碰撞)。</p>
<p>例题：IEEE 802.11无线局域网的MAC协议CSMA/CA进行信道预约的方法是</p>
<p>A.发送确认帧    B.采用二进制指数退避   C.使用多个MAC地址     D.交换RTS与CTS帧</p>
<p>解析：CSMA/CA协议使用RTS和CTS帧来预约信道，它们都携带有通信需要持续的时间另外，除RTS和CTS帧外，数据帧也能携带通信需要持续的时间，这就是802.11的虚拟载波监听。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>从零开始的计算机网络3-5</title>
      <link>https://blog.0pt.im/learn/1-3-5/</link>
      <pubDate>Sat, 15 Jul 2023 18:09:28 +0800</pubDate>
      
      <guid>https://blog.0pt.im/learn/1-3-5/</guid>
      <description>三.数据链路层</description>
      <content:encoded><![CDATA[<h1 id="点对点协议ppp">点对点协议PPP</h1>
<p>点对点协议PPP(Point-to-Point Protocol)是目前使用最广泛的点对点数据链路层协议。</p>
<p>PPP协议是因特网工程任务组IETF在1992年制定的。经过1993年和1994年的修订，现在的PPP协议已成为因特网的正式标准[RFC1661,RFC1662]。</p>
<p>用户连接到ISP就是通过PPP协议。</p>
<p>PPP协议为在点对点链路传输各种协议数据报提供了一个标准方法，主要由以下三部分构成:</p>
<ul>
<li>
<p>对各种协议数据报的封装方法（封装成帧）</p>
</li>
<li>
<p>链路控制协议LCP，用于建立、配置以及测试数据链路的连接</p>
</li>
<li>
<p>一套网络控制协议NCPs，其中的每一个协议支持不同的网络层协议</p>
</li>
</ul>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-5/3-5-1.png" alt=""  />
</p>
<h3 id="帧格式">帧格式</h3>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-5/3-5-2.png" alt=""  />
</p>
<p>标志（Flag）字段: PPP帧的定界符，取值为0x7E</p>
<p>地址（Address）字段:取值为OxFF，预留（目前没有什么作用）</p>
<p>控制(Control)字段:取值为Ox03，预留（目前没有什么作用）</p>
<p>协议(Protocol）字段:指明帧的数据部分送交哪个协议处理</p>
<ul>
<li>
<p>取值Ox0021表示:帧的数据部分为IP数据报</p>
</li>
<li>
<p>取值OxC021表示:帧的数据部分为LCP分组</p>
</li>
<li>
<p>取值0x8021表示:帧的数据部分为NCP分组</p>
</li>
</ul>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-5/3-5-3.png" alt=""  />
</p>
<p>帧检验序列（Frame Check Sequence）字段:CRC计算出的校验位</p>
<h3 id="透明传输">透明传输</h3>
<p><strong>面向字节的异步链路采用插入转义字符的字节填充法</strong></p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-5/3-5-4.png" alt=""  />
</p>
<p>发送方的处理：</p>
<ul>
<li>
<p>出现的每一个7E(PPP帧的定界符）字节转变成2字节序列(7D,5E)。</p>
</li>
<li>
<p>出现的每一个7D(转义字符)字节转变成2字节序列(7D,5D)。</p>
</li>
<li>
<p>出现的每一个ASCII码控制字符（数值小于<strong>0x20</strong>的字符)，则在该字符前面插入一个7D字节，同时将该字符的编码<strong>加上0x20</strong>。</p>
</li>
</ul>
<p>接收方的处理：进行<strong>反变换</strong>即可恢复出原来的帧的数据部分。</p>
<p><strong>面向比特的同步链路采用插入比特0的比特填充法</strong></p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-5/3-5-5.png" alt=""  />
</p>
<p>发送方的处理:</p>
<p>对帧的数据部分进行扫描（一般由硬件实现)。只要发现<strong>5个连续的比特1</strong>，则立即<strong>填充1个比特0</strong>。</p>
<p>接收方的处理:</p>
<p>对帧的数据部分进行扫描（一般由硬件实现)。只要发现<strong>5个连续的比特1</strong>，就<strong>把其后的1个比特0删除</strong>。</p>
<h3 id="差错检测">差错检测</h3>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-5/3-5-6.png" alt=""  />
</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-5/3-5-7.png" alt=""  />
</p>
<p>RFC 1662的附录部分给出了FCS的计算方法的C语言实现(查表法)</p>
<p>接收方每收到一个PPP帧，就进行CRC检验。若CRC检验正确，就收下这个帧;反之，就丢弃这个帧。使用PPP的数据链路层<strong>向上不提供可靠传输服务</strong>。</p>
<h3 id="工作状态">工作状态</h3>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-5/3-5-8.png" alt=""  />
</p>
<p>PPP链路的两端互相交换网络层特定的NCP分组。</p>
<p>如果在PPP链路上运行的是IP，则使用IP控制协议IPCP来对PPP链路的每一端配置P模块(如分配IP地址)。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>从零开始的计算机网络3-4</title>
      <link>https://blog.0pt.im/learn/1-3-4/</link>
      <pubDate>Fri, 14 Jul 2023 18:09:28 +0800</pubDate>
      
      <guid>https://blog.0pt.im/learn/1-3-4/</guid>
      <description>三.数据链路层</description>
      <content:encoded><![CDATA[<h1 id="可靠传输">可靠传输</h1>
<h3 id="基本概念">基本概念</h3>
<p>使用<strong>差错检测技术</strong>（例如循环冗余校验CRC），接收方的数据链路层就可检测传输过程中是否产生了<strong>误码</strong>（比特错误）。</p>
<p>数据链路层向上层提供的服务类型</p>
<ul>
<li>
<p><strong>不可靠传输服务</strong>：<strong>仅仅丢弃有误码的帧</strong>，其他什么也不做;</p>
</li>
<li>
<p><strong>可靠传输服务</strong>：想办法实现<strong>发送端发送什么</strong>，<strong>接收端就收到什么</strong>。</p>
</li>
</ul>
<p>一般情况下，<strong>有线链路</strong>的误码率比较低，为了减小开销，并<strong>不要求数据链路层</strong>向上提供<strong>可靠</strong>传输服务。即使出现了误码，可靠传输的问题由其上层处理。</p>
<p><strong>无线链路</strong>易受干扰，误码率比较高，因此<strong>要求数据链路层</strong>必须向上层提供<strong>可靠</strong>传输服务。</p>
<p><strong>比特差错</strong>只是传输差错中的一种。</p>
<p>从整个计算机网络体系结构来看，传输差错还包括<strong>分组丢失</strong>（发送的分组因某种原因被丢弃）、<strong>分组失序</strong>（发送的多个分组到达接收方的顺序与发送时不同）以及<strong>分组重复</strong>（分组因网络延时卡在路由器，引发发送方的超时发送，出现重复）。</p>
<p>分组丢失、分组失序以及分组重复这些传输差错，一般不会出现在数据链路层，而会出现在其上层。</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-4/3-4-2.png" alt=""  />
</p>
<p>可靠传输的实现比较复杂，开销也比较大，是否使用可靠传输取决于应用需。</p>
<h3 id="可靠传输的实现机制停止-等待协议swstop-and-wait">可靠传输的实现机制——停止-等待协议SW(Stop-and-Wait)</h3>
<p>1.确认与否认</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-4/3-4-1.png" alt=""  />
</p>
<p><strong>DATA为数据分组，ACK为确认分组，NAK为否认分组。从上往下。</strong></p>
<p>如该图，接收方发送第一个DATA，接收方对其进行差错，确认无误码，返回ACK，发送方收到ACK后，才可以删除第一个DATA的缓存，发送第二个DATA，若第二个DATA在传输过程中出现误码，接收方对其进行差错，返回NAK，发送方收到NAK，重新发送第二个DATA。（这就是为什么只有收到ACk时才能删除那个数据分组的缓存。）</p>
<p>2.超时重传</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-4/3-4-3.png" alt=""  />
</p>
<p>接收方收不到数据分组，就不会发送ACK或NAK。如果不采取其他措施，发送方就会一直处于等待接收方ACK或NAK的状态。</p>
<p>为解决该问题，可以在发送方发送完一个数据分组时，启动一个<strong>超时计时器</strong>。若到了超时计时器所设置的<strong>重传时间</strong>而发送方仍收不到接收方的任何ACK或NAK，则重传原来的数据分组，这就叫做<strong>超时重传</strong>。</p>
<p>一般可将重传时间选为略大于“从发送方到接收方的平均往返时间”</p>
<p>3.确认分组丢失</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-4/3-4-4.png" alt=""  />
</p>
<p>ACK丢失，会引起发送方的超时重传。</p>
<p>为避免分组重复这种传输错误，必须给每个分组带上序号。（如图，DATA0，DATA1）</p>
<p>对于停止-等待协议，由于每发送一个数据分组就停止等待,只要保证每发送一个新的数据分组，其发送序号与上次发送的数据分组的序号不同就可以了，因此用一个比特来编号就够了。</p>
<p>4.确认分组迟到</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-4/3-4-5.png" alt=""  />
</p>
<p>对确认分组（ACK）进行编号。</p>
<p>ACK0迟到了，导致发送方超时重传，接收方接收到超时重传的DATA0，将其丢弃，并再发送ACK0，发送方接收到重复的ACK0，忽略该确认分组。</p>
<blockquote>
<p>对于数据链路层的点对点信道，往返时间比较固定，不会出现确认分组迟到的情况，因此只在数据链路层实现停止等待协议，不需要给ACK编码。</p>
</blockquote>
<p>注意事项：</p>
<p>1.接收端检测到数据分组有误码时，将其丢弃并等待发送方的超时重传。但对于误码率较高的点对点链路，为使发送方尽早重传，也可给发送方发送NAK分组</p>
<p>2.为了让接收方能够判断所收到的数据分组是否是重复的，需要给<strong>数据分组编号</strong>。由于停止-等待协议的停等特性，只需1个比特编号就够了，即编号0和1。</p>
<p>3.为了让发送方能够判断所收到的ACK分组是否是重复的，需要给<strong>ACK分组编号</strong>，所用比特数量<strong>与数据分组编号</strong>所用比特数量一样。数据链路层一般不会出现ACK分组迟到的情况，因此在<strong>数据链路层实现停止-等待协议可以不用给ACK分组编号</strong>。</p>
<p>4.超时计时器设置的<strong>重传时间</strong>应仔细选择。一般可将重传时间选为<strong>略大于“从发送方到接收方的平均往返时间”</strong>。</p>
<ul>
<li>
<p>在数据链路层点对点的往返时间比较确定，重传时间比较好设定。</p>
</li>
<li>
<p>然而在运输层，由于端到端往返时间非常不确定，设置合适的重传时间有时并不容易。</p>
</li>
</ul>
<p>信道利用率</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-4/3-4-6.png" alt=""  />
</p>
<p><strong>当往返时延RTT远大于数据帧发送时延To时（例如使用卫星链路)，信道利用率非常低。</strong></p>
<p>若出现重传，则对于传送有用的数据信息来说，信道利用率还要降低。</p>
<p>为了克服停止-等待协议信道利用率很低的缺点，就产生了另外两种协议，即后退N帧协议GBN和选择重传协议SR。</p>
<p>例题：主机甲采用停-等协议向主机乙发送数据，数据传输速率使3kbps，单向传播延时是200ms,忽略确认帧的传输延时。当信道利用率等于40%时，数据帧的长度为</p>
<p>A.240比特    B.400比特    C.480比特    D.800比特</p>
<p>解析：</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-4/3-4-7.png" alt=""  />
</p>
<h3 id="可靠传输的实现机制回退n帧协议gbngo-back-n">可靠传输的实现机制——回退N帧协议GBN(Go-Back-N)</h3>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-4/3-4-8.png" alt=""  />
</p>
<p>采用流水线传输可提高信道利用率。</p>
<p>1.采用3个比特给分组编序号，即序号0~7;                     n个比特，   0~2^n -1</p>
<p>2.发送窗口的尺寸Wt的取值:1&lt;Wt≤2^3 - 1，本例取Wt=5.     1&lt;Wr&lt;2^n -1</p>
<p>3.接收窗口的尺寸Wr的取值:Wr=1;</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-4/3-4-9.png" alt=""  />
</p>
<p>发送窗口一次发送5个</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-4/3-4-10.png" alt=""  />
</p>
<p>到达接收方，接收窗口依次一个分组一个分组识别，并依次发回确认分组。</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-4/3-4-11.png" alt=""  />
</p>
<p>发送方每接受一个确认分组，发送窗口就向前滑动一个位置，这样就有新的序号落入发送窗口。</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-4/3-4-12.png" alt=""  />
</p>
<p>发送方可以把收到确认的分组从缓存中删除了，而接收方可以择机将已接收的数据交付上层处理。</p>
<p>累积确认</p>
<p>接收方<strong>不一定</strong>要对收到的数据分组<strong>逐个发送确认</strong>，而是可以在收到几个数据分组后（由具体实现决定)<strong>对按序到达的最后一个数据分组发送确认</strong>。ACKn表示序号为n及以前的所有数据分组都已正确接收。</p>
<p>如上图，接收方接收到0-1，发送一个ACK1，处理完2-4，发送一个ACK4，若ACK1丢了，ACK4到达发送方，则表明分组0-4都确认，已正确接收。</p>
<p>缺点</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-4/3-4-13.png" alt=""  />
</p>
<p>5号出现误码，丢弃，而后的序号6701，无法被5号接收窗口接收，也只能丢弃，每丢弃一个数据分组（5号误码不算），返回之前按序接受的最后一个确认分组，在本例中是ACK4，发4个ACK4。</p>
<p>发送方收到重复的确认。就知道之前所发送的数据分组出现了差错,于是可以不等超时计时器超时就立刻重传!</p>
<p>至于收到几个重复确认就立刻重传,由具体实现决定。若不能触发立刻重传，则等待超时计时器。超时后将发送窗口中的分组重传。</p>
<p><strong>在本例中。尽管序号为6,7,0.1的数据分组正确到达接收方。但由于5号数据分组误码不被接受,它们也“受到牵连”而不被接受,发送方还要重传这些数据分组,这就是所谓的Go-back-N(回退N帧)。</strong></p>
<p>发送窗口的尺寸不能超过其上限，如在上例，发送窗口为8，则发送01234567，接收方接收完这些后窗口序号为0，这样无法辨认新旧数据分组。</p>
<p>小结</p>
<p>发送方</p>
<ul>
<li>
<p>发送方可在未收到接收方确认分组的情况下，将序号落在发送窗口内的多个数据分组全部发送出去;</p>
</li>
<li>
<p>发送方只有收到对已发送数据分组的确认时，发送窗口才能向前相应滑动;</p>
</li>
<li>
<p>发送方收到多个重复确认时，可在重传计时器超时前尽早开始重传，由具体实现决定。</p>
</li>
<li>
<p>发送方发送窗口内某个已发送的数据分组产生超时重发时，其后续在发送窗口内且已发送的数据分组也必须全部重传，这就是回退N帧协议名称的由来。</p>
</li>
</ul>
<p>接收方</p>
<ul>
<li>
<p>接收方的接收窗口尺寸取值是1因此接收方只能按序接收数据分组。</p>
</li>
<li>
<p>接收方只接收序号落在接收窗口内且无误码的数据分组，并且将接收窗口向前滑动一个位置，与此同时给发送方发回相应的确认分组。</p>
</li>
<li>
<p>为了减少开销，接收方不一定每收到一个按序到达且无误码的数据分组就给发送方发回一个确认分组,而是可以在连续收到好几个按序到达且无误码的数据分组后(由具体实现决定)，才针对最后一个数据分组发送确认分组，这称为累积确认;</p>
</li>
<li>
<p>或者可以在自己有数据分组要发送时才对之前按序接收且无误码的数据分组进行捎带确认;</p>
</li>
<li>
<p>接收方收到未按序到达的数据分组，除丢弃外，还要对最近按序接收的数据分组进行确认;</p>
</li>
</ul>
<p>例题：数据链路层使用后退N帧(GBN)协议，发送方已经发送了编号为0~7的帧。送方只收到0、2、3号帧的确认，则发送方需要重发的帧数是</p>
<p>A.2    B.3    C.4    D.5</p>
<p>解析：</p>
<p>(1)“发送方只收到0、2、3号帧的确认”表明接收方正确接收了0~3号帧，并针对它们中的每一个发送了确认帧,只不过针对1号帧的确认帧丢失了(这是题目中的陷阱，但又没有相应的选项，所以迷惑性并不是很大);</p>
<p>(2)截止到计时器超时，发送方只收到了针对0~3号帧的确认，而发送方之前已经发送了0~7号帧，因此应该从4号帧开始重传，即重传之前已经发送过的4、5、6、7号帧，共计重传4个帧。</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-4/3-4-14.png" alt=""  />
</p>
<p><!-- raw HTML omitted -->一个数据分组的误码就会导致其后续多个数据分组不能被接收方按序接收而丢弃（尽管它们无乱序和误码)。这必然会造成发送方对这些数据分组的超时重传，显然这是对通信资源的极大浪费。<!-- raw HTML omitted --></p>
<h3 id="可靠传输的实现机制选择重传协议srselective-request">可靠传输的实现机制——选择重传协议SR(Selective Request)</h3>
<p>为了进一步提高性能，可设法只重传出现误码的数据分组。因此，接收窗口的尺寸<strong>不应再等于1(而应大于1)</strong>，以便<strong>接收方先收下失序到达但无误码并且序号落在接收窗口内的那些数据分组</strong>，等到所缺分组收齐后再一并送交上层。这就是<strong>选择重传协议</strong>。</p>
<p>注意:</p>
<p><strong>选择重传协议</strong>为了使发送方仅重传出现差错的分组，接收方<strong>不能再采用累积确认</strong>，而需要对每个正确接收到的数据分组进行<strong>逐一确认</strong>!</p>
<p>1.采用3个比特给分组编序号，即序号0~7;         n个比特        0~2^n - 1</p>
<p>2.发送窗口的尺寸Wt的取值:1&lt;wt&lt;=(2^3-1)，本例取Wt=4               1&lt;Wt&lt;2^(n-1)</p>
<p>3.接收窗口的尺寸Wr的取值:Wr=Wt=4;</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-4/3-4-15.png" alt=""  />
</p>
<p>发送方发送了0、1、2、3这4个序号的分组，在传输过程中，序号2的分组丢失</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-4/3-4-16.png" alt=""  />
</p>
<p>接收方接受了0、1、3这3个分组，先接受0、1这2个（这2个数据分组<strong>按序到达</strong>），并返回相应的1、2确认分组此时接收窗口向前移动2位，4和5落在接收窗口的位置。然后接受3这个分组，并返回3确认分组。但是此时接收窗口不能向前移动，因为3号数据分组是<strong>未按序到达</strong>的数据分组。</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-4/3-4-17.png" alt=""  />
</p>
<p>发送窗口先接收0、1确认分组，此时发送窗口向前移动2位，4、5落在发送窗口的位置，然后发送4、5数据分组，此时发送方可将0、1数据分组从发送缓存删除。接收方可择机将已接收的数据交付上层处理。</p>
<p>然后发送窗口再接收3号确认分组，知道3号数据分组已成功接收，之后3号数据并不会重复发送。但发送窗口不能向前移动，因为3号确认分组是<strong>未按序到达</strong>的数据分组。</p>
<p>而后，若4、5数据分组到达接收方后，接收窗口也不能向前移动，其他操作同理。</p>
<p>等发送方针对2号数据分组的重传计时器超时了，发送方就会重传2号数据分组。</p>
<p>发送窗口超过范围会造成无法辨识新旧数据分组</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-4/3-4-18.png" alt=""  />
</p>
<p>发送方发送0、1、2、3、4数据分组，接收方接收后返回0、1、2、3、4确认分组。然后0号确认分组丢了，1、2、3、4确认分组正常接收，此时发送窗口不能向前移动。然后等发送方针对0号数据分组的重传计时器超时了，发送方就会重传0号数据分组，此时0号数据分组会匹配到第二组循环序号的0号当中，无法辨识新旧数据分组，出现分组重复。</p>
<p>小结</p>
<p>发送方</p>
<ul>
<li>
<p>发送方可在未收到接收方确认分组的情况下，将序号落在发送窗口内的多个数据分组全部发送出去;</p>
</li>
<li>
<p>发送方只有按序收到对已发送数据分组的确认时，发送窗口才能向前相应滑动;若收到未按序到达的确认分组时，对其进行记录，以防止其相应数据分组的超时重发，但发送窗口不能向前滑动。</p>
</li>
</ul>
<p>接收方</p>
<ul>
<li>
<p>接收方可接收未按序到达但没有误码并且序号落在接收窗口内的数据分组;</p>
</li>
<li>
<p>为了使发送方仅重传出现差错的分组，接收方不能再采用累积确认，而需要对每个正确接收到的数据分组进行逐一确认!</p>
</li>
<li>
<p>接收方只有在按序接收数据分组后，接收窗口才能向前相应滑动。</p>
</li>
</ul>
<p>例题：数据链路层采用选择重传协议(SR)）传输数据，发送方已发送了0~3号数据帧，现已收到1号帧的确认，而0、2号帧依次超时，则此时需要重传的帧数是</p>
<p>A.1      B.2      C.3      D.4</p>
<p>解析：</p>
<p>(1)与回退N帧协议不同，选择重传协议不支持累积确认。接收方每接收一个数据帧，就会发回相应的确认帧。</p>
<p>(2）题目所给“收到1号帧的确认，而0、2号帧依次超时”，因此需要重传O、2号帧。至于发送方已发送的3号数据帧，题目并未给出它的任何其他线索，因此无须考虑3号帧。</p>
<p>故选B</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>从零开始的计算机网络3-3</title>
      <link>https://blog.0pt.im/learn/1-3-3/</link>
      <pubDate>Thu, 13 Jul 2023 18:09:28 +0800</pubDate>
      
      <guid>https://blog.0pt.im/learn/1-3-3/</guid>
      <description>三.数据链路层</description>
      <content:encoded><![CDATA[<h1 id="差错检测">差错检测</h1>
<p>实际的通信链路都不是理想的，比特在传输过程中可能会产生差错:1可能会变成0,而0也可能变成1。这称为<strong>比特差错</strong>。</p>
<p>在一段时间内，传输错误的比特占所传输比特总数的比率称为<strong>误码率BER</strong>(Bit Error Rate)。使用差错检测码来检测数据在传输过程中是否产生了比特差错，是数据链路层所要解决的重要问题之一。</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-3/3-3-1.png" alt=""  />
</p>
<p>FCS用于让接收方的数据链路层检查是否产生误码。</p>
<h3 id="奇偶校验">奇偶校验</h3>
<ul>
<li>
<p>在待发送的数据后面<strong>添加1位奇偶校验位</strong>，使整个数据（包括所添加的校验位在内）中**“1”的个数**为奇数（奇校验)或偶数（偶校验)。</p>
</li>
<li>
<p>如果有<strong>奇数个位发生误码</strong>，则奇偶性发生变化，<strong>可以检查出误码</strong>;</p>
</li>
<li>
<p>如果有<strong>偶数个位发生误码</strong>，则奇偶性不发生变化，<strong>不能检查出误码</strong>（<strong>漏检</strong>)。</p>
</li>
</ul>
<p>漏检率高，计算机网络的数据链路层一般不用奇偶校验。</p>
<h3 id="循环冗余校验crccyclic-redundancy-check">循环冗余校验CRC(Cyclic Redundancy Check)</h3>
<ul>
<li>
<p>收发双方约定好一个生成多项式G(x);</p>
</li>
<li>
<p>发送方基于待发送的数据和生成多项式计算出差错检测码（冗余码)，将其添加到待传输数据的后面一起传输;</p>
</li>
<li>
<p>接收方通过生成多项式来计算收到的数据是否产生了误码。</p>
</li>
</ul>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-3/3-3-2.png" alt=""  />
</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-3/3-3-3.png" alt=""  />
</p>
<p>例题：待发送的信息为101001，生成多项式为G(x)= x^3+ x^2+ 1，计算余数。</p>
<p>解析：1.构造被除数  待发送信息后面添加生成多项式最高次数个0</p>
<p>2.构造除数  生成多项式各项系数构成的比特串</p>
<p>3.做“除法”</p>
<p>4.检查余数  余数的位数应与生成多项式最高次数相同，如果位数不够，则在余数前补0来凑足位数。</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-3/3-3-4.png" alt=""  />
</p>
<p>例题：接收到的信息为101101001，生成多项式为G(x)= x^3 +x^2+l，判断传输是否误码?</p>
<p>解析：1.构造被除数  接收到的信息就是被除数</p>
<p>2.构造除数   生成多项式各项系数构成的比特串</p>
<p>3.做“除法”</p>
<p>4.检查余数  余数为0，可认为传输过程无误码;余数不为0，可认为传输过程产生误码。</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-3/3-3-5.png" alt=""  />
</p>
<p><strong>检错码</strong>只能检测出帧在传输过程中出现了差错，但并不能定位错误，因此<strong>无法纠正错误</strong>。</p>
<p>要想纠正传输中的差错，可以使用冗余信息更多的<strong>纠错码</strong>进行<strong>前向纠错</strong>。但纠错码的开销比较大，在<strong>计算机网络中较少使用</strong>。</p>
<p>循环冗余校验<strong>CRC</strong>有很好的检错能力（<strong>漏检率非常低</strong>)，虽然计算比较复杂，但非常<strong>易于用硬件实现</strong>，因此被<strong>广泛应用于数据链路层</strong>。</p>
<p>在计算机网络中通常采用我们后续中将要讨论的<strong>检错重传方式来纠正传输中的差错</strong>，<strong>或者仅仅是丢弃检测到差错的帧</strong>，这取决于数据链路层向其上层提供的是可靠传输服务还是不可靠传输服务。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>从零开始的计算机网络3-2</title>
      <link>https://blog.0pt.im/learn/1-3-2/</link>
      <pubDate>Wed, 12 Jul 2023 18:09:28 +0800</pubDate>
      
      <guid>https://blog.0pt.im/learn/1-3-2/</guid>
      <description>三.数据链路层</description>
      <content:encoded><![CDATA[<h1 id="封装成帧">封装成帧</h1>
<p>封装成帧是指数据链路层给上层交付的协议数据单元添加帧头和帧尾使之成为帧。</p>
<ul>
<li>
<p>帧头和帧尾中包含有重要的控制信息。</p>
</li>
<li>
<p>帧头和帧尾的作用之一就是<strong>帧定界</strong>。</p>
</li>
</ul>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-2/3-2-1.png" alt=""  />
</p>
<p>首尾标志的作用就是帧定界</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-2/3-2-2.png" alt=""  />
</p>
<p>接收方的链路层可以依据帧定界标志，从物理层交付的比特流中，提取出一个一个的帧。</p>
<blockquote>
<p>并不是每种数据链路层的帧都包含有帧定界标志。</p>
</blockquote>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-2/3-2-3.png" alt=""  />
</p>
<p>使用该协议，物理层会在以太网V2的mac帧前添加前导码。</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-2/3-2-4.png" alt=""  />
</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-2/3-2-5.png" alt=""  />
</p>
<p>另外，以太网还规定了帧间间隔时间为96比特的发送时间，不需要帧定界。</p>
<p>透明传输是指数据链路层对上层交付的传输数据没有任何限制，就好像数据链路层不存在一样</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-2/3-2-6.png" alt=""  />
</p>
<p>flag是帧定界标志，是一个特定数值。如图，首位各一个flag，但是在上层交付的协议数据单元中，恰好也包含了这个特定数值，接收方就不能正确接收帧，会提前结束。</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-2/3-2-7.png" alt=""  />
</p>
<p>解决：在帧发送前，对帧数据部分进行扫描，每出现一个帧定界符，就在其前面插入一个转义字符（ESC）。</p>
<p>接收方在收到转义字符时，会去掉转义字符，并知道后面的不是帧定界符而是数据。</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-2/3-2-8.png" alt=""  />
</p>
<p>数据部分中出现了转义字符也是同理。</p>
<blockquote>
<p>转义字符不是“esc”，而是一个特定字符，十进制值为27.。</p>
</blockquote>
<p>面向字节的物理链路使用字节填充（或称字符填充)的方法实现透明传输。</p>
<p>面向比特的物理链路使用比特填充的方法实现透明传输。</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-2/3-2-9.png" alt=""  />
</p>
<p>在发送前，可采用零比特填充法，每5个连续的比特1前就插入一个比特0，来确保帧定界符的唯一性。接收方接受时把数据部分每5个连续的比特1前的比特0剔除即可。</p>
<p>例题. HDLC协议对 0111110001111110 组帧后对应的比特串为</p>
<p>A.011111000011111010  B.011111000111110101111110</p>
<p>C.01111100011111010  D.011111000111111001111101</p>
<p>解析：高级数据链路控制协议HDLC采用帧头和帧尾中的标志字段作为帧定界符，其值为01111110</p>
<p>HDLC为了实现“透明传输”，采用“零比特填充法”(每5个连续1后面插入一个比特0)，故选A</p>
<p>为了提高帧的传输效率，应当使<strong>帧的数据部分的长度尽可能大些</strong>。</p>
<p>考虑到差错控制等多种因素，每一种数据链路层协议都规定了帧的数据部分的长度上限，即最大传送单元MTU(Maximum Transfer Unit)。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>从零开始的计算机网络3-1</title>
      <link>https://blog.0pt.im/learn/1-3-1/</link>
      <pubDate>Tue, 11 Jul 2023 18:09:28 +0800</pubDate>
      
      <guid>https://blog.0pt.im/learn/1-3-1/</guid>
      <description>三.数据链路层</description>
      <content:encoded><![CDATA[<h1 id="数据链路层概述">数据链路层概述</h1>
<p><strong>链路</strong>(Link)就是从一个结点到相邻结点的一段物理线路，而中间没有任何其他的交换结点。</p>
<p><strong>数据链路</strong>(Data Link)是指把实现通信协议的硬件和软件加到链路上，就构成了数据链路。数据链路层以<strong>帧</strong>为单位传输和处理数据。</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-1/3-1-1.png" alt=""  />
</p>
<p>只研究数据链路层时，可以看作数据包在只在数据链路层水平传送。</p>
<h3 id="数据链路层的三个重要问题使用点对点信道的数据链路层">数据链路层的三个重要问题（使用点对点信道的数据链路层）</h3>
<p>1.封装成帧</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-1/3-1-2.png" alt=""  />
</p>
<p>发送方将待发送的数据，通过应用层封装成为应用层协议数据单元，然后交付给运输层。</p>
<p>运输层为复添加运输层协议首部，使之成为运输层协议数据单元，然后交付给网络层。</p>
<p>网络层为复添加网络层协议首部，使之成为网络层数据单元，然后交付给数据链路层。</p>
<p>数据链路层绘网络层协议数据单元添加一个数据链路层协议首部，简称为帧头，还要给其添加一个帧尾。</p>
<p>2.差错检测</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-1/3-1-3.png" alt=""  />
</p>
<p>3.可靠传输</p>
<p>如果数据链路层向其上层提供的是不可靠服务，那么丢弃就丢弃了，不会有更多措施。</p>
<p>如果数据链路层向其上层提供的是可靠服务，那么还需要其他措施，来确保接收方主机还可以重新收到被丢弃这个帧的正确副本。</p>
<p>尽管误码是不能完全避兔的，但若能实现发送方发送什么，接收方就能收到什么,就称为可靠传输。</p>
<h3 id="使用广播信道的数据链路层">使用广播信道的数据链路层</h3>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-1/3-1-4.png" alt=""  />
</p>
<p>C如何知道主机A发送的数据是给自己的，其他主机如何知道主机A发送的数据不是给自己的。</p>
<p>将帧的目的地址添加在帧中一起传输。</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/3-1/3-1-5.png" alt=""  />
</p>
<p>帧碰撞，解决方法，使用一种特殊的协议  <strong>以太网的媒体接入控制协议CSMA/CD</strong></p>
<p>其他概念</p>
<p>802.11局域网的媒体接入控制协议CSMA/CA数据链路层的互连设备</p>
<p>网桥和交换机的工作原理</p>
<p>集线器（物理层互连设备)与交换机的区别</p>
<p>接下来会讲。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>从零开始的计算机网络2-5</title>
      <link>https://blog.0pt.im/learn/1-2-5/</link>
      <pubDate>Mon, 10 Jul 2023 18:09:28 +0800</pubDate>
      
      <guid>https://blog.0pt.im/learn/1-2-5/</guid>
      <description>二.物理层</description>
      <content:encoded><![CDATA[<h1 id="信道的极限容量">信道的极限容量</h1>
<p><img loading="lazy" src="https://img.0pt.im/computernet/2-5/2-5-1.png" alt=""  />
</p>
<p>信号波形失去码元间的清晰界限，这种现象叫码间串扰。</p>
<p>失真因素</p>
<ul>
<li>
<p>码元传输速率</p>
</li>
<li>
<p>信号传输距离</p>
</li>
<li>
<p>噪声干扰</p>
</li>
<li>
<p>传输媒体质量</p>
</li>
</ul>
<h3 id="奈氏准则">奈氏准则</h3>
<p>在假定的理想条件下，<strong>为了避免码间串扰</strong>，<strong>码元传输速率是有上限的</strong>。</p>
<p>理想低通信道的最高码元传输速率=2W Baud = 2W码元/秒</p>
<p>理想带通信道的最高码元传输速率=W Baud = W码元/秒</p>
<blockquote>
<p>w:信道带宽（单位为Hz）</p>
<p>Baud:波特，即码元/秒</p>
</blockquote>
<p>码元传输速率又称为波特率、调制速率、波形速率或符号速率。它与比特率有一定关系:</p>
<p>当1个码元只携带1比特的信息量时，则波特率（码元/秒)与比特率（比特/秒）在数值上是相等的;口当1个码元携带n比特的信息量时，则波特率转换成比特率时，数值要乘以n。</p>
<p>要提高信息传输速率（比特率），就必须设法使每一个码元能携带更多个比特的信息量。这需要采用多元制（如2-4里的QAM - 16）</p>
<p>实际的信道所能传输的最高码元速率，要明显低于奈氏准则给出的这个上限数值。</p>
<h3 id="香农公式">香农公式</h3>
<p>带宽受限且有高斯白噪声干扰的信道的极限信息传输速率</p>
<p><img loading="lazy" src="https://img.opt.lockey.icu/blog/2-5-2.png" alt=""  />
</p>
<p>C:信道的极限信息传输速率(单位: b/s)</p>
<p>w:信道带宽（单位:Hz)</p>
<p>S:信道内所传信号的平均功率</p>
<p>N:信道内的高斯噪声功率</p>
<p>S/N:信噪比，使用分贝(dB)作为度量单位</p>
<p><img loading="lazy" src="https://img.opt.lockey.icu/blog/2-5-3.png" alt=""  />
</p>
<p>信道带宽或信道中信噪比越大，信息的极限传输速率越高。</p>
<p>在实际信道上能够达到的信息传输速率要比该公式的极限传输速率低不少。这是因为在实际信道中，信号还要受到其他一些损伤，如各种脉冲干扰、信号在传输中的衰减和失真等，这些因素在香农公式中并未考虑。</p>
<p>1.在信道带宽一定的情况下，根据奈氏准则和香农公式，要想<strong>提高信息的传输速率</strong>就必须采用<strong>多元制</strong>（更好的调制方法）和努力<strong>提高信道中的信噪比</strong>。</p>
<p>2.自从香农公式发表后，各种<strong>新的信号处理和调制方法就不断出现</strong>，其目的都是为了尽可能地<strong>接近香农公式给出的传输速率极限</strong>。</p>
<p>例题.在无噪声情况下，若某通信链路的带宽为3kHz，采用4个相位，每个相位具有4种振幅的QAM调制技术，则该通信链路的最大数据传输速率是</p>
<p>A.12 kbps    B.24 kbps   C.48 kbps    D.96 kbps</p>
<p>解析：(1）根据奈氏准则可知，该通信链路的最高码元传输速率= 2x 3k = 6k(Baud) = 6k(码元/秒)</p>
<p>(2）采用4个相位，每个相位4种振幅的QAM调制技术，可以调制出4x4=16个不同的基本波形(码元);</p>
<p>采用二进制对这16个不同的码元进行编码，需要使用4个比特(log:16 = 4)。换句话说，每个码元可以携书的信息量为4比特;</p>
<p>综合（1)和(2)可知，该通信链路的最大数据传输速率=6k(码元/秒)x4(比特/码元)=24k (比特/秒)= 24 kbps，选B</p>
<blockquote>
<p>不管题目给出的调制技术多么“牛”或对于我们而言有多陌生，这都不会影响我们解题。我们只需关心这种调制技术可以调制出多少个不同的基本波形（码元)即可。</p>
</blockquote>
<p>例题：若某通信链路的数据传输速率为2400bps，采用4相位调制，则该链路的波特率是A.600波特    B.1200波特    C.4800波特    D.9600波特</p>
<p>解析：(1）采用4相位调制，可以调制出4种相位不同的基本波形(码元)。采用二进制对这4个不同的码元进行编码，(1）采用4相位调制，可以调制出4种相位不同的基本波形(码元)。采用二进制对这4个不同的码元进行编码，需要使用2个比特(logz4 = 2)。换句话说，每个码元可以携带的信息量为2比特;</p>
<p>(2）数据传输速率=波特率(码元传输速率)X每个码元所携带的信息量</p>
<p>2400(比特/秒)=波特率X 2(比特/码元)</p>
<p>解得:波特率=1200(码元/秒)= 1200 (Baud) = 1200(波特)，选B</p>
<p>例题：若连接R2和R3链路的频率带宽为8kHz，信噪比为30dB，该链路实际数据传输速率约为理论最大数据传输速率的50%，则该链路的实际数据传输速率约是</p>
<p>A.8 kbps   B.20 kbps  c.40 kbps   D.80 kbps</p>
<p>解析：30（dB） = 10*log10（S/N）</p>
<p>解得S/N = 1000，带入香农公式，c约等80kps，则实际数据传输速率为40kps，选C</p>
<p>例题：若信道在无噪声情况下的极限数据传输速率不小于信噪比为30dB条件下的极限数据传输速率，则信号状态数至少是</p>
<p>A.4    B.8   C.16    D.32</p>
<p>解析：设信号状态数（可调制出的不同基本波形或码元数量)为X则每个码元可携带的比特数量为log2 X</p>
<p>信道在无噪声情况下的极限数据传输速率(用奈氏准则计算)= 2W(码元/秒)= 2w log2 X（比特/秒)</p>
<p>30dB信噪比条件下的极限数据传输速率(用香农公式计算)= W log2 (1 + 1000)(比特/秒)根据题意列出不等式:2W logzX ≥ W log2 (1 + 1000)</p>
<p>解得X≥32，选D</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>从零开始的计算机网络2-4</title>
      <link>https://blog.0pt.im/learn/1-2-4/</link>
      <pubDate>Sun, 09 Jul 2023 18:09:28 +0800</pubDate>
      
      <guid>https://blog.0pt.im/learn/1-2-4/</guid>
      <description>二.物理层</description>
      <content:encoded><![CDATA[<h1 id="编码与调制">编码与调制</h1>
<p><img loading="lazy" src="https://img.0pt.im/computernet/2-4/2-4-1.png" alt=""  />
</p>
<p>码元</p>
<p>在使用时间域的波形表示数字信号时,<strong>代表不同离散数值的基本波形</strong>。</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/2-4/2-4-4.png" alt=""  />
</p>
<p>两种基本波形，分别代表比特0或1，组合起来</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/2-4/2-4-3.png" alt=""  />
</p>
<blockquote>
<p>一个传输媒体可以包含多个信道，单工的话一个信道，半双工全双工2个：如果采用信道复用技术，可以有多个信道。</p>
</blockquote>
<h3 id="常用编码">常用编码</h3>
<p><img loading="lazy" src="https://img.0pt.im/computernet/2-4/2-4-5.png" alt=""  />
</p>
<p>1.不归零编码(存在同步问题)</p>
<p>比特1是高电压，比特0是低电压，出现如下问题：</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/2-4/2-4-6.png" alt=""  />
</p>
<p>为解决这个问题，需要<strong>额外一根传输线来传输时钟信号</strong>,使发送方和接收方同步。</p>
<p>但是对于计算机网络，<strong>宁愿利用这根传输线传输数据信号</strong>，而不是传输时钟信号!</p>
<p>2.归零编码（自同步，编码效率低）</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/2-4/2-4-7.png" alt=""  />
</p>
<p><strong>每个码元传输结束后信号都要“归零”</strong>，所以接收方只要在信号归零后进行采样即可，不需要单独的时钟信号。</p>
<p>实际上，归零编码相当于把时钟信号用“归零”方式编码在了数据之内，这称为“<strong>自同步</strong>”信号。</p>
<p>但是，归零编码中大部分的<strong>数据带宽</strong>,都用来传输“归零”而<strong>浪费</strong>掉了。</p>
<p>3.曼彻斯特编码（传统以太网，10Mb/s）</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/2-4/2-4-8.png" alt=""  />
</p>
<p>码元中间时刻的跳变既表示时钟,又表示数据。</p>
<p>4.差分曼彻斯特编码（比曼彻斯特编码变化少，更适合较高的传输速率）</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/2-4/2-4-9.png" alt=""  />
</p>
<p>跳变仅表示时钟;码元开始处电平是否发生变化表示数据。</p>
<h3 id="基本调制方法">基本调制方法</h3>
<p><img loading="lazy" src="https://img.0pt.im/computernet/2-4/2-4-10.png" alt=""  />
</p>
<p>使用基本调制方法，1个码元只能包含1个比特信息。如何能使1个码元包含更多的比特呢？</p>
<p>可采用混合调制</p>
<p><strong>频率    相位    振幅</strong></p>
<p>因为<strong>频率和相位是相关</strong>的，即频率是相位随时间的变化率。所以<strong>一次只能调制频率和相位两个中的一个</strong>。</p>
<p>通常情况下，相位和振幅可以结合起来一起调制，称为<strong>正交振幅调制QAM</strong>。</p>
<h3 id="混合调制举例正交振幅调制qam">混合调制举例——正交振幅调制QAM</h3>
<p>星座图</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/2-4/2-4-11.png" alt=""  />
</p>
<p>QAM-16</p>
<ul>
<li>
<p>12种相位</p>
</li>
<li>
<p>每种相位有1或2种振幅可选</p>
</li>
<li>
<p>可以调制出16种码元(波形)，每种码元可以对应表示4个比特</p>
</li>
<li>
<p>码元与4个比特的对应关系采用格雷码，任意两个相邻码元只有1个比特不同</p>
</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>从零开始的计算机网络2-3</title>
      <link>https://blog.0pt.im/learn/1-2-3/</link>
      <pubDate>Sat, 08 Jul 2023 18:09:28 +0800</pubDate>
      
      <guid>https://blog.0pt.im/learn/1-2-3/</guid>
      <description>二.物理层</description>
      <content:encoded><![CDATA[<h1 id="传输方式">传输方式</h1>
<h3 id="串行传输和并行传输">串行传输和并行传输</h3>
<p><img loading="lazy" src="https://img.0pt.im/computernet/2-3/2-3-1.png" alt=""  />
</p>
<p>串行传输：数据是1个比特1个比特依次发送，只需1条传输线路（例：计算机远距离通信）</p>
<p>并行传输：数据是n个比特n个比特依次发送，需n条传输线路（例：电脑内数据传输，cpu与内存）</p>
<h3 id="同步传输和异步传输">同步传输和异步传输</h3>
<p><img loading="lazy" src="https://img.0pt.im/computernet/2-3/2-3-2.png" alt=""  />
</p>
<p>收发双方时钟同步的方法</p>
<ul>
<li>
<p>外同步:在收发双方之间添加一条单独的时钟信号线</p>
</li>
<li>
<p>内同步:发送端将时钟同步信号编码到发送数据中一起传输（例如曼彻斯特编码</p>
</li>
</ul>
<p><img loading="lazy" src="https://img.0pt.im/computernet/2-3/2-3-3.png" alt=""  />
</p>
<blockquote>
<p>以字节为单位发送，时间间隔不固定，通常要在每个字节前面加上起始位（红色S）和结束位（黑色E）</p>
</blockquote>
<p>字节之间异步(字节之间的时间间隔不固定)</p>
<p>字节中的每个比特仍然要同步(各比特的持续时间是相同的)</p>
<h3 id="单工半双工全双工">单工/半双工/全双工</h3>
<p><img loading="lazy" src="https://img.0pt.im/computernet/2-3/2-3-4.png" alt=""  />
</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>从零开始的计算机网络2-2</title>
      <link>https://blog.0pt.im/learn/1-2-2/</link>
      <pubDate>Fri, 07 Jul 2023 18:09:28 +0800</pubDate>
      
      <guid>https://blog.0pt.im/learn/1-2-2/</guid>
      <description>二.物理层</description>
      <content:encoded><![CDATA[<h1 id="二物理层下的传输媒体">二.<strong>物理层下</strong>的传输媒体</h1>
<blockquote>
<p>传输媒体不属于物理层，只能排在物理层之下</p>
</blockquote>
<h3 id="导引型传输媒体">导引型传输媒体</h3>
<p>1.同轴电缆</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/2-2/2-2-1.png" alt=""  />
</p>
<ul>
<li>
<p>基带同轴电缆(50欧姆)  数字传输，过去用于局域网</p>
</li>
<li>
<p>宽带同轴电缆(75欧姆)  模拟传输，目前主要用于有线电视</p>
</li>
</ul>
<p>同轴电缆价格较贵且布线不够灵活和方便，随着集线器的出现,在局域网领域基本上都是采用双绞线作为传输媒体。</p>
<p>2.双绞线</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/2-2/2-2-2.png" alt=""  />
</p>
<p>绞合的作用</p>
<ul>
<li>
<p>抵御部分来自外界的电磁波干扰</p>
</li>
<li>
<p>减少相邻导线的电磁干扰（高中物理，电磁感应，磁场相抵消）</p>
</li>
</ul>
<p><img loading="lazy" src="https://img.0pt.im/computernet/2-2/2-2-3.png" alt=""  />
</p>
<blockquote>
<p>5E基本够用，考虑未来发展，可以提前用6类</p>
</blockquote>
<p>3.光纤</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/2-2/2-2-4.png" alt=""  />
</p>
<p>纤芯直径</p>
<ul>
<li>
<p>多模光纤:50微米，62.5微米</p>
</li>
<li>
<p>单模光纤:9微米</p>
</li>
</ul>
<p>包层直径125微米</p>
<p>工作波长</p>
<ul>
<li>
<p>0.85微米（衰减较大)</p>
</li>
<li>
<p>1.30微米（衰减较小)</p>
</li>
<li>
<p>1.55微米（衰减较小)</p>
</li>
</ul>
<p>光纤的优点</p>
<ul>
<li>
<p>通信容量大(25000~30000GHz的带宽)</p>
</li>
<li>
<p>口传输损耗小，远距离传输时更加经济。</p>
</li>
<li>
<p>抗雷电和电磁干扰性能好。这在大电流脉冲干扰的环境下尤为重要。</p>
</li>
<li>
<p>无串音干扰，保密性好，不易被窃听。</p>
</li>
<li>
<p>体积小，重量轻。</p>
</li>
</ul>
<p>光纤的缺点</p>
<ul>
<li>
<p>割接需要专用设备</p>
</li>
<li>
<p>口光电接口价格较贵</p>
</li>
</ul>
<p>光纤原理</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/2-2/2-2-5.png" alt=""  />
</p>
<p>当光从高折射率的媒体射向低折射率的媒体时，其折射角将大于入射角</p>
<p>因此，如果入射角足够大，就会出现全反射，即光碰到包层时，就会反射回纤芯</p>
<p>（1)单模光纤</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/2-2/2-2-6.png" alt=""  />
</p>
<p><strong>没有模式色散</strong>，在1.31微米波长附近材料色散和波导色散大小相等符号相反，两者正好抵消。单模光纤适合<strong>长距离传输</strong>且衰减小，但其制造成本高，对光源要求高。</p>
<p>发送光源:激光发生器;接收检测:激光检波器</p>
<p>（2)多模光纤</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/2-2/2-2-7.png" alt=""  />
</p>
<p>由于色散(模式、材料、波导色散)，光在多模光纤中传输一定距离后必然产生信号失真(<strong>脉冲展宽</strong>)因此，多模光纤只适合<strong>近距离传输</strong>(建筑物内)</p>
<p>发送光源:发光二极管;接收检测:光电二极管</p>
<p>4.电力线</p>
<p>老技术，20世界20年代就出现了，用于有线电话连接</p>
<h3 id="非导引型传输媒体">非导引型传输媒体</h3>
<p><img loading="lazy" src="https://img.0pt.im/computernet/2-2/2-2-8.png" alt=""  />
</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/2-2/2-2-9.png" alt=""  />
</p>
<blockquote>
<p>从极长波到甚长波，这些频段不用于电信领域</p>
</blockquote>
<p><img loading="lazy" src="https://img.0pt.im/computernet/2-2/2-2-10.png" alt=""  />
</p>
<p>1.无线电波</p>
<table>
<thead>
<tr>
<th><img loading="lazy" src="https://img.0pt.im/computernet/2-2/2-2-11.png" alt=""  />
</th>
<th><img loading="lazy" src="https://img.0pt.im/computernet/2-2/2-2-12.png" alt=""  />
</th>
</tr>
</thead>
</table>
<p>2.微波（可以穿过大气层的电离层）</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/2-2/2-2-13.png" alt=""  />
</p>
<p>中继站将接受的微波发大后再发送给下一站，故称“接力”</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/2-2/2-2-14.png" alt=""  />
</p>
<p>利用地球同步卫星通信，通信距离远，但时延大（传播时延）</p>
<p>3.红外线</p>
<p>你家电视遥控器用的这个</p>
<p>之前笔记本和手机都有红外接口，用来通信，现在笔记本红外接口被淘汰。手机遥控用的手机红外接口。</p>
<ul>
<li>
<p>点对点无线传输</p>
</li>
<li>
<p>直线传输，中间不能有障碍物，传输距离短</p>
</li>
<li>
<p>传输速率低(4Mb/s~16Mb/s)</p>
</li>
</ul>
<p>4.可见光</p>
<p>LI-FI技术（了解即可）</p>
<p>2011年，德国物理学家<strong>哈拉尔德·哈斯</strong>（Harald Haas）和他在英国爱丁堡大学的团队发明了一种专利技术，利用闪烁的灯光来传输数字信息，这就是Li-Fi。</p>
<p>Li-Fi的工作原理并不复杂。给普通的LED灯泡装上微芯片，可以控制它每秒数百万次闪烁，亮了表示1，灭了代表0。由于频率太快，人眼根本觉察不到，但是光敏传感器却可以接收到这些变化。就这样，二进制的数据就被快速编码成灯光信号并进行了有效的传输。灯光下的电脑或手机，通过一套特制的接收装置，就能读懂灯光里的“莫尔斯密码”，就能通讯了。</p>
<p>高速率是可见光通信的最大优势，也是业界普遍看好其前景的主要原因。</p>
<p>除了速率之外，可见光通信还有很多其它方面的优势。</p>
<p>据统计，2020年支持Wi-Fi无线连接的设备将达<strong>17亿台</strong>，但随着设备的进一步增加，2025年基于传统RF（射频）技术的Wi-Fi网络可能无法满足设备连接需求。</p>
<p>蜂窝通信方面，只我们中国，移动通信基站有差不多<strong>600万个</strong>，大部分能量都用于冷却，效率只有<strong>5%</strong>。</p>
<p>LED光源就不一样了，目前全球LED灯泡就有<strong>大约400亿个</strong>。只需给这些LED灯泡加一个微芯片，就能改造成信号发射器，形成的通信网络规模是非常惊人的。这样做的成本也比部署Wi-Fi热点低得多，也不必新建基础设施。</p>
<p>而且，前面也说了，无线电波的频谱资源日趋紧张，网络已经变得拥挤不堪。可见光频谱的宽度达到射频频谱的1万倍，意味着能带来更高的带宽，可以使用的资源也非常丰富。使用光通信，完全不用担心频谱不够用的问题，同时还能缓解全球无线频谱资源短缺的现状。</p>
<p>此外，可见光对于人类来说是绿色的、无辐射伤害的一种物质。因此用光来作为无线通信的媒质，是一种对人类发展更健康，更可取的方向。同时用光来通信能降低能耗，因为不需要像基站那样提供额外的能耗，更加环保。</p>
<p>如果算上安全的话，也是一个优点，可见光通信，把光线一挡，就泄露不出去了。。。</p>
<p>但是，可见光通信的<strong>缺点</strong>其实也非常多。</p>
<p>首先，大家应该已经想到了，像Li-Fi这样的东东，你下行速率还好说，上行怎么办呢？手机上也装个电灯泡？</p>
<p>然后，环境光源干扰。在封闭的室内用用是没问题，到了室外，光源杂乱，这个受影响就很大。</p>
<p>再有，就是距离，可见光通信的速率看上去很高，但是实验室里面都是短距离理想环境下测试，你不可能拿着手机挨着灯泡上网，你稍微离远点，速率就下降得厉害。而且，如果你背对着光源，挡住了光，就没信号了。。。</p>
<p>总而言之，可见光通信确实在理论传输速率、部署、成本、零电磁辐射等方面“秒杀”传统射频通信。但是指望它短时间内替换掉Wi-Fi或基站，肯定是不可能滴。以后如果光通信发展得好，它应该会和现有通信技术进行搭配使用，或者在某些特定场合下先用起来。</p>
<h3 id="无线电频谱管理机构">无线电频谱管理机构</h3>
<p>中国:工业和信息化部无线电管理局(国家无线电办公室)</p>
<p>美国:联邦通讯委员会FCC</p>
<p>lSM (Industrial, Scientific,Medical)频段</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/2-2/2-2-15.png" alt=""  />
</p>
<p>现在无线局域网就使用2.4GHz和5.8GHz频段</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>从零开始的计算机网络2-1</title>
      <link>https://blog.0pt.im/learn/1-2-1/</link>
      <pubDate>Thu, 06 Jul 2023 18:09:28 +0800</pubDate>
      
      <guid>https://blog.0pt.im/learn/1-2-1/</guid>
      <description>二.物理层</description>
      <content:encoded><![CDATA[<h1 id="一物理层的基本概念">一.物理层的基本概念</h1>
<h4 id="1传播媒体">1.传播媒体</h4>
<p>用来连接各种网络设备。</p>
<p>导引型传播媒体（常用）</p>
<ul>
<li>
<p>双绞线</p>
</li>
<li>
<p>同轴电缆</p>
</li>
<li>
<p>光纤</p>
</li>
</ul>
<p>非导引型传播媒体（常用）</p>
<ul>
<li>微波通信（2~40GHZ）</li>
</ul>
<p>物理层就是要解决在各种传输媒体上传输比特0和1的问题，给数据链路层提供<!-- raw HTML omitted -->透明<!-- raw HTML omitted -->比特流服务。</p>
<blockquote>
<p>透明：数据链路层看不见也无需看见物理层是用何种方法传输比特0和1，只管享受物理层提供的服务。</p>
</blockquote>
<h5 id="物理层协议的主要任务">物理层协议的主要任务</h5>
<ol>
<li>
<p>机械特性：指明接口所用接线器的<strong>形状</strong>和<strong>尺寸</strong>、<strong>引脚数目</strong>和<strong>排列</strong>、<strong>固定</strong>和<strong>锁定</strong>装置</p>
</li>
<li>
<p>电气特性：指明在接口电缆的各条线上出现的<strong>电压的范围</strong></p>
</li>
<li>
<p>功能特性：指明某条线上出现的某一电平的<strong>电压表示何种意义</strong></p>
</li>
<li>
<p>过程特性：指明对于不同功能的各种可能<strong>事件的出现顺序</strong></p>
</li>
</ol>
<p>物理层协议多，理解并上述概念即可。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>从零开始的计算机网络1-5</title>
      <link>https://blog.0pt.im/learn/1-1-5/</link>
      <pubDate>Wed, 05 Jul 2023 18:09:11 +0800</pubDate>
      
      <guid>https://blog.0pt.im/learn/1-1-5/</guid>
      <description>一.概述篇</description>
      <content:encoded><![CDATA[<h1 id="计算机网络体系结构">计算机网络体系结构</h1>
<h3 id="常见的计算机网络体系结构">常见的计算机网络体系结构</h3>
<p><img loading="lazy" src="https://img.0pt.im/computernet/1-5/1-5-1.png" alt=""  />
</p>
<p>OSI制定周期长，复杂，运行效率低</p>
<p>TCP/IP 更简单，且有商业驱动，抢占市场，成为标准</p>
<h3 id="计算机网络体系结构分层的必要性">计算机网络体系结构分层的必要性</h3>
<p><strong>计算机网络是个非常复杂的系统</strong>。早在最初的ARPANET设计时就提出了分层的设计理念。</p>
<p>&ldquo;<strong>分层</strong>&ldquo;可将庞大而复杂的问题，转化为若干较小的局部问题，而这些较小的局部问题就比较易于研究和处理。</p>
<p>下面，我们按照由简单到复杂的顺序，来看看实现计算机网络要面临哪些主要的问题，以及如何将这些问题划分到相应的层次，层层处理。</p>
<p>1.若两台计算机用一根网线连接起来，有何问题</p>
<ul>
<li>
<p>采用怎样的传输媒体（介质）</p>
</li>
<li>
<p>采用怎样的物理接口</p>
</li>
<li>
<p>使用怎样的信号表示比特0和1</p>
</li>
</ul>
<p>归到物理层</p>
<p>2.若几台计算机都连到一根线上（总线型网络）</p>
<ul>
<li>
<p>如何标识网络中的各主机（主机编址问题，例如MAC地址）</p>
</li>
<li>
<p>如何从信号所表示的一连串比特流中区分出地址和数据</p>
</li>
<li>
<p>如何协调各主机争用总线</p>
</li>
</ul>
<p>归到数据链路层</p>
<p>3.若由几个网络和路由器组成一个小型互联网</p>
<ul>
<li>
<p>如何标识各网络以及网络中的各主机（网络和主机共同编址的问题，例如IP地址）</p>
</li>
<li>
<p>路由器如何转发分组，如何进行路由选择</p>
</li>
</ul>
<p>归到网络层</p>
<p>4.若一台主机开了一个浏览器进程和QQ进程（与网络通信相关的进程），一台服务器里运行着与网络通信相关的服务器进程，某时刻，主机收到了来自服务器的分组，要将分组交给哪个进程进行处理</p>
<ul>
<li>
<p>如何解决进程之间基于网络的通信问题</p>
</li>
<li>
<p>出现传输错误时，如何处理</p>
</li>
</ul>
<p>归类到运输层</p>
<p>5.通过上述，已经实现了进程间基于网络的通信，在此基础上，只需要制定各种应用层协议，并按协议标准编写相应的应用程序，通过应用进程间的交互来完成特定的网络应用。</p>
<p>归类到应用层</p>
<p>总结</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/1-5/1-5-2.png" alt=""  />
</p>
<h3 id="分层思想举例">分层思想举例</h3>
<p><img loading="lazy" src="https://img.0pt.im/computernet/1-5/1-5-3.png" alt=""  />
</p>
<p>主机</p>
<p>应用层按http协议的规定构建一个<strong>http请求报文</strong>，</p>
<p>应用层将<strong>http请求报文</strong>交给运输层处理</p>
<p>运输层给<strong>http请求报文</strong>添加一个<strong>tcp首部</strong>（区分应用进程，实现可靠传输）
使之成为<strong>tcp报文段</strong>
运输层将<strong>tcp报文段</strong>交给网络层处理</p>
<p>网络层给<strong>tcp报文段</strong>添加一个<strong>ip首部</strong>（能在互联网上传输即能被路由器转发）
使之成为<strong>ip数据报</strong>
网络层将<strong>ip数据报</strong>交付给数据链路层处理，</p>
<p>数据链路层给<strong>ip数据报</strong>添加一个<strong>首部</strong>（能在一个链路或一个网络上传输）和一个尾部（让目 的主机检测接收到的的帧是否有误码）</p>
<p>使之成为<strong>帧</strong>
数据链路层将<strong>帧</strong>交付给物理层</p>
<p>物理层将<strong>帧</strong>看作是比特流（如果是以太网，还会加一个<strong>前导码</strong>，为让目的主机做好接受的准备）变换成相应的信号发送到路由器</p>
<p>路由器
物理层将信号变换为比特流，去掉<strong>前导码</strong>后，交付给数据链路层，实际上交付的是<strong>帧</strong>，</p>
<p>数据链路层将<strong>首部</strong>和<strong>尾部</strong>去掉后交付给网络层，实际上交付的是<strong>ip数据报</strong>，</p>
<p>网络层<!-- raw HTML omitted -->解析<!-- raw HTML omitted --><strong>ip数据报</strong>的<strong>首部</strong>，从中提取出目的网络地址，然后查找自身的路由表，确定转发端口，以便进行转发，再将其交付给数据链路层</p>
<p>数据链路层给<strong>ip数据报</strong>添加一个<strong>首部</strong>（能在一个链路或一个网络上传输）和一个<strong>尾部</strong>（让目 的主机检测接收到的的帧是否有误码）（也是路由器自己的）</p>
<p>使之成为<strong>帧</strong>
数据链路层将<strong>帧</strong>交付给物理层</p>
<p>物理层将<strong>帧</strong>看作是比特流，变换成相应的信号发送到相应服务器</p>
<p>服务器</p>
<p>物理层将信号变换为比特流，去掉<strong>前导码</strong>后，交付给数据链路层，实际上交付的是<strong>帧</strong></p>
<p>数据链路层将<strong>首部</strong>和<strong>尾部</strong>去掉后交付给网络层，实际上交付的是<strong>ip数据报</strong></p>
<p>网络层去掉<strong>ip数据报</strong>的首部，交付给运输层，实际上交付的是<strong>tcp报文段</strong></p>
<p>运输层去掉<strong>tcp报文段首部</strong>，交付给应用层，实际上交付的是<strong>http请求报文</strong></p>
<p>应用层收到<strong>http请求报文</strong>后，进行解析，如何向主机发回<strong>http响应报文</strong></p>
<p>过程同理。再倒过来</p>
<h3 id="计算机网络体系结构中的专用术语-实体协议服务">计算机网络体系结构中的专用术语 实体，协议，服务</h3>
<p>实体：任何可发送或接收信息的硬件或软件进程。</p>
<p>对等实体：收发双方相同层次中的实体。</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/1-5/1-5-4.png" alt=""  />
</p>
<blockquote>
<p>如，通信双方的网卡，正在进行通信的应用进程就是对等实体</p>
</blockquote>
<p>协议：控制两个对等实体进行逻辑通信的规则的集合。</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/1-5/1-5-5.png" alt=""  />
</p>
<p>协议的三要素：语法 语义 同步</p>
<ul>
<li>
<p>语法：定义所交换信息的格式</p>
</li>
<li>
<p>语义：定义收发双方所要完成的操作</p>
</li>
<li>
<p>同步：定义收发双方的时序关系</p>
</li>
</ul>
<p>在协议的控制下，两个对等实体间的逻辑通信使得本层能够向上一层提供服务。</p>
<p>要实现本层协议，还需要使用下面一层所提供的服务。</p>
<p>协议是“<strong>水平的</strong>”，服务是“<strong>垂直的</strong>”。</p>
<p>实体看得见相邻下层所提供的服务，但并不知道实现该服务的具体协议。也就是说，下面的协议对上面的实体是&rdquo;<strong>透明</strong>&ldquo;的。</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/1-5/1-5-6.png" alt=""  />
</p>
<p>服务访问点 在同一系统中<strong>相邻两层的实体交换信息的逻辑接口</strong>，用于区分不同的服务</p>
<ul>
<li>
<p>数据链路层的服务访问点为帧的“类型”字段。</p>
</li>
<li>
<p>网络层的服务访问点为IP数据报首部中的“协议字段”。</p>
</li>
<li>
<p>运输层的服务访问点为“端口号”。</p>
</li>
</ul>
<p>服务原语 上层使用下层所提供的服务必须通过与下层<strong>交换一些命令</strong>，这些命令称为服务原语。</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/1-5/1-5-7.png" alt=""  />
</p>
<p>协议数据单元PDU ** 对等层次之间传送的数据包**称为该层的协议数据单元。</p>
<p>服务数据单元SDU <strong>同一系统内，层与层之间交换的数据包</strong>称为服务数据单元。</p>
<p>多个SDU可以合成为一个PDU;一个SDU也可划分为几个PDU。</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/1-5/1-5-8.png" alt=""  />
</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>从零开始的计算机网络1-4</title>
      <link>https://blog.0pt.im/learn/1-1-4/</link>
      <pubDate>Tue, 04 Jul 2023 18:09:11 +0800</pubDate>
      
      <guid>https://blog.0pt.im/learn/1-1-4/</guid>
      <description>一.概述篇</description>
      <content:encoded><![CDATA[<h1 id="计算机网络性能指标">计算机网络性能指标</h1>
<h3 id="比特">比特</h3>
<p>计算机中数据量的单位，也是信息论中信息量的单位。一个比特就是二进制数字中的一个1或0。</p>
<p>常用数据量单位</p>
<p>1Byte(B) = 8 bit</p>
<p>1 KB = 1,024 Bytes =2^10 B</p>
<p>1 MB = 1,024 KB = 1,048,576 Bytes = 2^20 B</p>
<p>1 GB = 1,024 MB = 1,048,576 KB = 1,073,741,824 Bytes = 2^30 B</p>
<p>1 TB = 1,024 GB = 1,048,576 MB = 1,073,741,824 KB = 1,099,511,627,776 Bytes = 2^40 B</p>
<blockquote>
<p>B前的K为大写</p>
</blockquote>
<h3 id="速率">速率</h3>
<p>连接在计算机网络上的主机在数字信道上传送比特的速率，也称为比特率或数据率。</p>
<p>常用数据率单位</p>
<p>bit/s (b/s) (bps) ps:三个单位都一样</p>
<p>1 Kbps = 10^3 bps<br>
1 Mbps = 10^6 bps<br>
1 Gbps = 10^9 bps<br>
1 Tbps = 10^12 bps</p>
<blockquote>
<p>bps前的k为小写</p>
</blockquote>
<p>问：买了一块250GB是固态，安到电脑上，可用多少GB</p>
<pre tabindex="0"><code>(250*10^9) / 2^30 = 232.8 (GB)
</code></pre><p>问：有一个待发送的数据块，大小为100 MB，网卡的发送速率为100 Mbps，则网卡发送完该数据块需要多长时间?</p>
<pre tabindex="0"><code>100 MB / 100 Mbps = 1 MB / 1 Mbps = 8*2^20 bit / 10^6 bps = 8.3886 s 
</code></pre><p>问：主机甲通过1个路由器（存储转发方式)与主机乙互联，两段链路的数据传输速率均为10 Mbps,主机甲分别采用报文交换和分组大小为10 kb的分组交换向主机乙发送1个大小为8 Mb(1M=10^6)的报文。若忽略链路传播延迟、分组头开销和分组拆装时间，则两种交换方式完成该报文传输所需的总时间分别为多少？（ps：本问规定1M=10^6是为了便于计算）</p>
<p>报文交换</p>
<pre tabindex="0"><code>(8 Mb / 10 Mbps) * 2 = 1.6 s
</code></pre><p>分组交换</p>
<pre tabindex="0"><code>8 Mb / 10 Mbps = 0.8 s
</code></pre><h3 id="带宽">带宽</h3>
<p>带宽在模拟信号系统中的意义</p>
<ul>
<li>
<p><strong>信号</strong>所包含的各种不同频率成分所占据的<strong>频率范围</strong></p>
</li>
<li>
<p>单位:Hz (kHz,MHz,GHz)</p>
</li>
</ul>
<p>带宽在计算机网络中的意义</p>
<ul>
<li>
<p>用来表示网络的<strong>通信线路</strong>所能传送数据的能力，因此网络带宽表示在单位时间内从网络中的某一点到另一点所能通过的“<strong>最高数据率</strong>”</p>
</li>
<li>
<p>单位: b/s(kb/s,Mb/s,Gb/s,Tb/s)</p>
</li>
</ul>
<blockquote>
<p>其实，“带宽”的这两种表述之间有着密切的联系。一条通信线路的“频带宽度”越宽，其所传输数据的“最高数据率”也越高。</p>
</blockquote>
<h3 id="吞吐量">吞吐量</h3>
<p>吞吐量表示在<strong>单位时间内通过某个网络(或信道、接口)的数据量</strong>。</p>
<p>吞吐量被经常用于对现实世界中的网络的一种测量，以便知道实际上到底有多少数据量能够通过网络。</p>
<p>吞吐量<strong>受网络的带宽或额定速率的限制</strong>。</p>
<p>带宽为1Gb/s 的以太网，理论最高1Gb/s，通常只能达到700Mb/s左右</p>
<h3 id="时延">时延</h3>
<p>网络时延</p>
<ul>
<li>
<p>发送时延 分组长度(b) / 发送速率(b/s)</p>
</li>
<li>
<p>传播时延 信道长度(m) / 电磁波传播速率(m/s) 自由空间:3x10^8m/s</p>
<p>铜线:2.3x10^8m/s 光纤：2.0x10^8m/s</p>
</li>
<li>
<p>处理时延 一般不方便计算</p>
</li>
</ul>
<blockquote>
<p>在网络时延中，哪个时延占主导得<strong>具体情况具体分析</strong>，如发送大报文，信道短，大概率是发送时延占主导，若发送小报文，信道长，大概率是传播时延占主导，具体得用公式算出来时间进行比较。</p>
</blockquote>
<h3 id="时延带宽积--传播时延-x-带宽">时延带宽积 = 传播时延 x 带宽</h3>
<p>若发送端连续发送数据，则在所发送的第一个比特即将到达终点时，发送端就已经发送了时延带宽积个比特;</p>
<p>链路的时延带宽积又称为以<strong>比特为单位的链路长度</strong>。</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/1-4/1-4-1.png" alt=""  />
</p>
<h3 id="往返时间">往返时间</h3>
<p>在许多情况下，因特网上的信息不仅仅单方向传输，而是双向交互;我们有时很需要知道双向交互一次所需的时间，因此，往返时间RTT(Round-Trip Time)也是一个重要的性能指标。</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/1-4/1-4-2.png" alt=""  />
</p>
<p>以太网的源主机要与无线局域网的目的主机进行通信为例，往返时间是源主机发送分组开始，到收到目的主机的确认分组为止，所需要的时间。</p>
<h3 id="利用率">利用率</h3>
<p>信道利用率 用来表示某信道有百分之几的时间是被利用的（有数据通过）。</p>
<p>网络利用率 全网络的信道利用率的加权平均。</p>
<p>根据排队论，当某信道的利用率增大时，该信道引起的时延也会迅速增加;因此，<strong>信道利用率并非越高越好</strong>;</p>
<p>如果令Do表示网络空闲时的时延，D表示网络当前的时延，那么在适当的假定条件下，可以用下面的简单公式来表示D、Do和利用率U之间的关系:</p>
<p>$$
D = Do/(1-U)
$$</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/1-4/1-4-3.png" alt=""  />
</p>
<p>当网络的利用率达到50%时，时延就要加倍</p>
<p>当网络的利用率超过50%时，时延急剧增大</p>
<p>当网络的利用率接近100%时，时延就趋于无穷大</p>
<p>因此，一些拥有较大主干网的ISP通常会控制它们的信道利用率不超过50%。如果超过了，就要准备扩容，增大线路的带宽。</p>
<p>也不能使信道利用率太低，这会使宝贵的通信资源被白白浪费。应该使用一些机制，可以根据情况动态调整输入到网络中的通信量，使网络利用率保持在一个合理的范围内。</p>
<h3 id="丢包率">丢包率</h3>
<p>丢包率即分组丢失率，是指在一定的时间范围内，传输过程中丢失的分组数量与总分组数量的比率。丢包率具体可分为接口丢包率、结点丢包率、链路丢包率、路径丢包率、网络丢包率等。</p>
<p>丢包率是网络运维人员非常关心的一个网络性能指标，但对于普通用户来说往往并不关心这个指标,因为他们通常意识不到网络丢包。</p>
<p>分组丢失主要有两种情况:</p>
<ul>
<li>
<p>分组在传输过程中出现误码，被结点丢弃;</p>
</li>
<li>
<p>分组到达一台队列已满的分组交换机时被丢弃;在通信量较大时就可能造成网络拥塞。</p>
</li>
</ul>
<p>因此，丢包率反映了网络的拥塞情况:</p>
<ul>
<li>
<p>无拥塞时路径丢包率为0</p>
</li>
<li>
<p>轻度拥塞时路径丢包率为1%~4%</p>
</li>
<li>
<p>严重拥塞时路径丢包率为5%~15%</p>
</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>从零开始的计算机网络1-3</title>
      <link>https://blog.0pt.im/learn/1-1-3/</link>
      <pubDate>Mon, 03 Jul 2023 18:09:11 +0800</pubDate>
      
      <guid>https://blog.0pt.im/learn/1-1-3/</guid>
      <description>一.概述篇</description>
      <content:encoded><![CDATA[<h1 id="计算机网络的定义与分类">计算机网络的定义与分类</h1>
<h3 id="计算机网络的定义">计算机网络的定义</h3>
<p>计算机网络的精确定义并未统一</p>
<p>计算机网络的最简单的定义是:一些<strong>互</strong>相<strong>连</strong>接的、<strong>自</strong>治的计算机的<strong>集合</strong>。</p>
<ul>
<li>
<p><strong>互连</strong>是指计算机之间可以通过有线或无线的方式进行数据通信</p>
</li>
<li>
<p><strong>自治</strong>是指独立的计算机，它有自己的硬件和软件，可以单独运行使用;集合是指至少需要两台计算机</p>
</li>
<li>
<p><strong>集合</strong>是指至少需要两台计算机</p>
</li>
</ul>
<p>计算机网络的较好的定义是:计算机网络主要是由一些<strong>通用的、可编程的硬件互连</strong>而成的，而这些硬件并非专门用来实现某一特定目的（例如，传送数据或视频信号)。这些可编程的硬件能够用来<strong>传送多种不同类型的数据</strong>，并能<strong>支持广泛的和日益增长的应用</strong>。</p>
<ul>
<li>
<p>计算机网络所连接的硬件，并不限于一般的计算机，而是包括了智能手机等智能硬件。</p>
</li>
<li>
<p>计算机网络并非专门用来传送数据，而是能够支持很多种的应用（包括今后可能出现的各种应用)</p>
</li>
</ul>
<h3 id="计算机网络的分类">计算机网络的分类</h3>
<p>按交换技术分类</p>
<ul>
<li>
<p>电路交换网络</p>
</li>
<li>
<p>报文交换网络</p>
</li>
<li>
<p>分组交换网络</p>
</li>
</ul>
<p>按使用者分类</p>
<ul>
<li>
<p>公用网</p>
</li>
<li>
<p>专用网</p>
</li>
</ul>
<p>按传输介质分类</p>
<ul>
<li>
<p>有线网络</p>
</li>
<li>
<p>无线网络</p>
</li>
</ul>
<p>按覆盖范围分类</p>
<ul>
<li>
<p>广域网WAN</p>
</li>
<li>
<p>城域网MAN</p>
</li>
<li>
<p>局域网LAN</p>
</li>
<li>
<p>个域网PAN</p>
</li>
</ul>
<p>按拓扑结构分类</p>
<ul>
<li>
<p>总线型网络</p>
</li>
<li>
<p>星型网络</p>
</li>
<li>
<p>环型网络</p>
</li>
<li>
<p>网状型网络</p>
</li>
</ul>
<table>
<thead>
<tr>
<th><img loading="lazy" src="https://img.0pt.im/computernet/1-3/1-3-1.png" alt="q"  />
</th>
<th><img loading="lazy" src="https://img.0pt.im/computernet/1-3/1-3-2.png" alt=""  />
</th>
</tr>
</thead>
<tbody>
<tr>
<td><img loading="lazy" src="https://img.0pt.im/computernet/1-3/1-3-3.png" alt=""  />
</td>
<td><img loading="lazy" src="https://img.0pt.im/computernet/1-3/1-3-4.png" alt=""  />
</td>
</tr>
</tbody>
</table>
]]></content:encoded>
    </item>
    
    <item>
      <title>从零开始的计算机网络1-2</title>
      <link>https://blog.0pt.im/learn/1-1-2/</link>
      <pubDate>Sun, 02 Jul 2023 18:09:11 +0800</pubDate>
      
      <guid>https://blog.0pt.im/learn/1-1-2/</guid>
      <description>一.概述篇</description>
      <content:encoded><![CDATA[<h1 id="三种交换方式电路交换分组交换和报文交换">三种交换方式：电路交换、分组交换和报文交换</h1>
<h3 id="电路交换circuit-switching">电路交换(Circuit Switching)</h3>
<p>电话交换机接通电话线的方式称为电路交换</p>
<p>从通信资源的分配角度来看，交换(Switching)就是按照某种方式动态地分配传输线路的资源</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/1-2/1-2-2.png" alt=""  />
</p>
<p>电路交换的三个步骤</p>
<ul>
<li>
<p>建立连接（分配通信资源）</p>
</li>
<li>
<p>通话（一直占用通信资源）</p>
</li>
<li>
<p>释放连接（归还通信资源）</p>
</li>
<li>
<p><img loading="lazy" src="https://img.0pt.im/computernet/1-2/1-2-3.png" alt=""  />
</p>
</li>
</ul>
<blockquote>
<p>当使用电路交换来传送计算机数据时,其线路的传输效率往往很低。</p>
<p>计算机数据是突发式的出现在传输线路上，会造成占着茅坑不拉屎的情况。</p>
</blockquote>
<h3 id="分组交换packet-switching">分组交换(Packet Switching)</h3>
<p>发送方：构造分组，缓存分组。（把报文分割成若干分组发送）</p>
<p>路由器：缓存分组，转发分组。（分组不一定经同一条线路到达接收方，可以合理分配线路，避免拥堵。）</p>
<p>接收方：接收分组，还原报文。</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/1-2/1-2-4.png" alt=""  />
</p>
<blockquote>
<p>报文交换就是不分割报文的分组交换，需要大的缓存空间。</p>
</blockquote>
<h3 id="三种方式对比">三种方式对比</h3>
<p><img loading="lazy" src="https://img.0pt.im/computernet/1-2/1-2-5.png" alt=""  />
</p>
<p>电路交换</p>
<ul>
<li>
<p>优点：通信时延小、有序传输、没有冲突、适用范围广、实时性强、控制简单</p>
</li>
<li>
<p>缺点：建立连接时间长、线路独占，使用效率低、灵活性差、难以规格化</p>
</li>
</ul>
<p>报文交换</p>
<ul>
<li>
<p>优点：无需建立连接、动态分配线路、提高线路可靠性、提高线路利用率、提供多目标服务</p>
</li>
<li>
<p>缺点：引起了转发时延、需要较大存储缓存空间、需要传输额外的信息量</p>
</li>
</ul>
<p>分组交换</p>
<ul>
<li>
<p>优点：无需建立连接、线路利用率高、简化了存储管理、加速传输、减少出错概率和重发</p>
</li>
<li>
<p>缺点：引起了转发时延、需要传输额外的信息量、 对于数据报服务，存在失序、丢失或重复分组的问题;对于虚电路服务,存在呼叫建立、数据传输 和虚电路释放三个过程</p>
</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>从零开始的计算机网络1-1</title>
      <link>https://blog.0pt.im/learn/1-1-1/</link>
      <pubDate>Sat, 01 Jul 2023 18:09:11 +0800</pubDate>
      
      <guid>https://blog.0pt.im/learn/1-1-1/</guid>
      <description>一.概述篇</description>
      <content:encoded><![CDATA[<h1 id="因特网概述">因特网概述</h1>
<h3 id="网络互连网互联网和因特网">网络、互连网（互联网）和因特网</h3>
<ul>
<li>网络（Network）由若干<strong>结点</strong>（Node）和连接这些节点的<strong>链路</strong>（Link）组成</li>
</ul>
<p><img loading="lazy" src="https://img.0pt.im/computernet/1-1/1-1-1.png" alt="1"  />
</p>
<ul>
<li>
<p>多个网络还可以通过路由器互连起来，这样构成了一个覆盖范围更大的网络，即互连网（或互联网）。因此，互连网是“<strong>网络的网络</strong>（Network of Network）”</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/1-1/1-1-2.png" alt="1EE"  />
</p>
</li>
<li>
<p>因特网（Internet）是世界上最大的互连网络（用户数以亿计，互连的网络数以百万计）。</p>
</li>
</ul>
<p><img loading="lazy" src="https://img.0pt.im/computernet/1-1/1-1-3.png" alt=""  />
</p>
<blockquote>
<p>internet(互联网或互连网)是一个通用名词，它泛指由多个计算机网络互连而成的网络，在这些网络之间的通信协议可以是任意的</p>
<p>Internet（因特网）则是一个专用名词，它指当前全球最大的，开发的，自由的，由众多网络互连而成的特定计算机网络，它采用TCP/IP协议族作为通信的规则，其前身是美国的ARPANET。</p>
</blockquote>
<h3 id="因特网发展的三个阶段">因特网发展的三个阶段</h3>
<p>1969年，从单个网络ARPANET向互联网发展</p>
<ul>
<li>
<p>1969年，第一个分组交互网<strong>ARPANET</strong></p>
</li>
<li>
<p>70年代中期，研究多种网络之间的互连</p>
</li>
<li>
<p>1983年，<strong>TCP/IP协议</strong>成为ARPANET的标准协议（因特网诞生时间）</p>
</li>
</ul>
<p>1985年，逐步形成三级结构的因特网</p>
<ul>
<li>
<p>1985年，NSF（美国国家科学基金会）围绕六个大型计算机中心建设<strong>NSFNET</strong>（主干网、地区网和校园网）</p>
</li>
<li>
<p>1990年，ARPANET任务完成，正式关闭</p>
</li>
<li>
<p>1991年，美国政府将因特网主干网交给私人公司经营，并开始对接入因特网的单位收费</p>
</li>
</ul>
<p>1993年，逐步形成了多层次ISP结构的因特网</p>
<ul>
<li>
<p>1993年，NSFNET逐渐被若干个商用因特网主干网代替;政府机构不再负责因特网运营，让各种<strong>因特网服务提供者ISP</strong>来运营</p>
</li>
<li>
<p>1994年，<strong>万维网www技术</strong>促使因特网迅猛发展</p>
</li>
<li>
<p>1995年NSFNET停止运作，<strong>因特网彻底商业化</strong></p>
</li>
</ul>
<blockquote>
<p>我们通过地区的因特网服务提供者ISP接入因特网，我国就是电信移动联通</p>
</blockquote>
<p><img loading="lazy" src="https://img.0pt.im/computernet/1-1/1-1-4.png" alt=""  />
</p>
<p>基于ISP的三层结构的因特网</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/1-1/1-1-5.png" alt=""  />
</p>
<h3 id="因特网的标准化工作">因特网的标准化工作</h3>
<p>因特网的标准化工作对因特网的发展起了非常重要的作用。</p>
<p>因特网在制定其标准上的一个很大的特点是<strong>面向公众</strong>。</p>
<ul>
<li>
<p>因特网所有的<strong>RFC</strong>（REquest For COMments）技术文档都可以从因特网上免费下载（http://www.ietf.org/rfc.html）</p>
</li>
<li>
<p>任何人都可以随时用电子邮件发表对某个文档的意见或建议。</p>
</li>
</ul>
<p><strong>因特网协会ISOC</strong>是一个国际性的组织，它负责对因特网进行全面管理，以及在世界范围内促进其发展和使用。</p>
<ul>
<li>
<p>因特网体系结构委员会IAB，负责管理因特网有关协议的开发</p>
</li>
<li>
<p>因特网工程部IETF，负责研究中短期工程问题，主要针对协议的开发和标准化</p>
</li>
<li>
<p>因特网研究部IRTF，从事理论方面的研究和开发一些需要长期考虑的问题</p>
</li>
</ul>
<p>制订因特网的正式标准要经过以下<strong>4个阶段</strong></p>
<ul>
<li>
<p>(1)因特网草案（在这个阶段还不是RFC文档)</p>
</li>
<li>
<p>(2)建议标准（从这个阶段开始就成为RFC文档)</p>
</li>
<li>
<p>(3)草案标准</p>
</li>
<li>
<p>(4)因特网标准</p>
</li>
</ul>
<h3 id="因特网的组成">因特网的组成</h3>
<p>边缘部分：由所有连接在因特网上的<strong>主机</strong>组成。这部分是<strong>用户直接使用</strong>的，用来进行<strong>通信</strong>（传送数据、音频或视频）和<strong>资源共享</strong>。</p>
<p>核心部分：由<strong>大量网络</strong>和连接这些网络的<strong>路由器</strong>组成。这部分是<strong>为边缘部分提供服务</strong>的（提供连通性和交换)。</p>
<p><img loading="lazy" src="https://img.0pt.im/computernet/1-1/1-1-6.png" alt=""  />
</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
